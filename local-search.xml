<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/08/07/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/08/07/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="git干嘛的">Git干嘛的</h4><ul><li>分布式版本控制系统</li></ul><h4 id="命令汇总">命令汇总</h4><h5 id="查看git版本">查看git版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git -v<br></code></pre></td></tr></table></figure><h5 id="初始化配置">初始化配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置用户名</span><br>git config --global user.name &quot;wing2791&quot; <br><span class="hljs-meta prompt_"># </span><span class="language-bash">上述的用户名可以省略双引号,如果用户名有空格，则无法省略</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">省略(<span class="hljs-built_in">local</span>):本地配置,只对本地仓库有效</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--global: 全局配置,所有仓库生效</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--system: 系统配置,对所有用户生效</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置邮箱</span><br>git config --global user.email wing2791@163.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存用户名和密码，这样就不用每次都输入了</span><br>git config --global credential.helper store<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置信息</span><br>git config --global --list<br></code></pre></td></tr></table></figure><h5 id="新建仓库">新建仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir learn-git<br>cd learn-git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化空仓库,会以learn-git为仓库</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">会在learn-git文件夹下创建一个my-repo文件夹,以my-repo文件夹为仓库</span><br>git init my-repo<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加仓库地址，克隆仓库到本地</span><br>git clone https//....git<br></code></pre></td></tr></table></figure><h5 id="添加和提交文件">添加和提交文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>git status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态的简略模式,??表示为跟踪，M表示修改</span><br>git status -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将文件添加到暂存区</span><br>git add filename.suffix<br><span class="hljs-meta prompt_"># </span><span class="language-bash">git add 支持使用通配符,只添加.txt结尾的文件</span><br>git add *.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以提交文件夹，提交当前文件夹</span><br>git add .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交文件,-m表示提交时对文件信息的描述,只提交暂存区中的文件</span><br>git commit -m &quot;the first commit&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看提交记录</span><br>git log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看简洁嘻嘻</span><br>git log --oneline<br></code></pre></td></tr></table></figure><h5 id="git-reset-回退版本">git reset 回退版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --soft # 回退到某个版本,并且保留工作区和暂存区中的所有修改内容<br>git reset --hard # 回退到某个版本,并且丢弃工作区和暂存区的所有修改内容<br>git reset --mixed # 回退到某个版本,并且只保留工作区的修改内容，而丢弃暂存区中的内容（reset默认参数）<br>git reset --soft ID # 需要添加回退版本ID,这个需要用git log查看<br>git ls-files # 查看暂存区内容<br>git reset HEAD^ # 使用--mixed模式，HEAD^指当前 HEAD 的前一个提交<br>git reflog # 查看操作历史记录，可以查看操作的ID号，用于回退<br></code></pre></td></tr></table></figure><h5 id="git-diff查看差异">git diff查看差异</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff # 可以查看修改的内容具体是什么，默认比较工作区和暂存区的区别<br>git diff HEAD # 查看工作区和版本库的区别,HEAD指的是最新提交节点<br>git diff --cached # 查看暂存库和版本库的区别<br>git diff ID1 ID2 # 比较两个特定版本库的差异，HEAD~表示上一个版本，HEAD~2表示之前的两个版本<br>git diff ID1 ID2 file1.txt # 只查看file1.txt的修改内容<br></code></pre></td></tr></table></figure><h5 id="版本库中删除文件">版本库中删除文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm file1.txt # 删除工作区中文件file1.txt<br>git add . # 更新暂存区，删除暂存区中的file1.txt<br>git rm file2.txt # 会在工作区和暂存区中都删除file2.txt<br>git commit -m &quot;information&quot;<br></code></pre></td></tr></table></figure><h5 id="gitignore忽略文件">.gitignore忽略文件</h5><ul><li>.gitignore中的内容就是指所有忽略的文件名，也可以是文件夹名，文件夹名是相对于<code>.gitignore</code> ,例如<code>temp/</code></li><li>如果文件夹是空文件夹，不会被版本管理</li><li><a href="https://git-scm.com/docs/gitignore">git官网匹配规则</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">*.log # 就是忽略所有的.log文件<br>!a.log # 表示在*.log忽略的规则下，不忽略a.log文件<br>/TODO # 表示只忽略当前目录下的TODO文件，不忽略subdir/TODO<br>build/ # 忽略任何目录下名为build的文件夹<br>doc/*.txt # 只忽略doc文件夹下的所有.txt文件,但是不忽略doc/subdir/*.txt的文件，即不忽略子文件夹下的文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果某个文件已经被添加到仓库中,如忽略*.<span class="hljs-built_in">log</span>，但是仓库中有other.log，更新other.log文件的时候，也会一起更新other.log文件</span><br>doc/**/*.pdf # 葫芦doc/目录及其所有子目录下的.pdf文件<br>git rm --cached other.log # 从暂存区中移除文件 other.log<br></code></pre></td></tr></table></figure></li></ul><h5 id="github的使用和远程仓库操作">github的使用和远程仓库操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git@github.com:wing2791/wing2791.github.io.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git开头的仓库使用的是SSH协议,在push的时候不需要验证用户名和密码,但是需要在github上添加ssh公钥的配置，添加密钥的时候如果修改了名称，需要额外配置，这里不赘述</span><br>git push &lt;remote&gt; &lt;branch&gt; # 本地仓库的指定分支推送到远程仓库，这里配置好一般直接git push，配置在后面<br>git pull &lt;remote&gt; # 远程仓库拉取到本地<br></code></pre></td></tr></table></figure><h5 id="关联本地仓库和远程仓库">关联本地仓库和远程仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add &lt;shortname&gt; &lt;url&gt; # 关联一个远程仓库<br><span class="hljs-meta prompt_"># </span><span class="language-bash">git remote add roigin git@....git</span><br>git remote -v # 查看当前仓库对应的远程仓库的别名和地址<br>git branch -M main # 指定分支名为main<br>git push -u origin main:main # u是upstream的缩写,把本地仓库和别名为origin仓库的远程仓库关联起来，把本地仓库的main分支推送给远程仓库的main分支，如果本地分支和远程仓库分支名称一样,可以main:main改为main，第一个main本地分支,第二个main远程分支<br><br>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; # 拉去远程仓库修改内容，起其中仓库名和分支名都可以省略，默认为拉取仓库别名为orgin的main分支<br>git fetch # 只会获取远程仓库的修改，但是并不合并到本地仓库中，需要手动合并<br></code></pre></td></tr></table></figure><h5 id="分支的使用">分支的使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch 分支名 # 创建一个新的分支<br>git checkout 分支1 # 切换到分支1，checkout也可以用来恢复文件，会产生歧义，故换一个切换分支的命令切换到分支1<br>git switch 分支1 # 切换到分支1<br>git merge 分支1 # 假如现在处在main分支，运行该命令可以将分支1中的内容合并到main中<br>git log --graph --oneline --decorate --all # 查看分支图<br>git branch -d branch-name # 当branch-name被合并后，可以用-d进行删除<br>git branch -D branch-name # 强制删除分支branch-name<br></code></pre></td></tr></table></figure><h5 id="解决合并冲突">解决合并冲突</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -a -m &quot;commit content&quot; # -a参数会直接添加到暂存区，然后提交到仓库，完成两个步骤，这个只对已经添加过的文件生效，新文件无法使用，-a -m 可以写成-am<br>git status # 可以查看冲突文件的列表<br>git diff # 可以查看冲突的具体内容<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后直接查看原文件，可以手动修改冲突内容，重新添加，提交即可</span><br>git add .<br>git commit -m &quot;commit cotent&quot;<br>git merge --abort # 中止合并<br></code></pre></td></tr></table></figure><h5 id="回退和rebase">回退和rebase</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rebase branch-name<br>git checkout -b dev ID # 恢复到dev分支的ID的时刻，看来checkout很多功能啊<br>alias graph=&quot;git log --graph --oneline --decorate --all&quot; # 可以把查看图形化的提交记录命令改为graph<br></code></pre></td></tr></table></figure><p>merge - 优点 - 不会破坏原分支的提交历史，方便回溯和查看 - 缺点 -会产生额外的提交节点，分支图比较复杂 rebase - 优点 -不会新增额外的提交记录，形成线性历史，比较直观和干净 - 缺点 -会改变提交历史，改变了当前分支branch out的节点，避免在共享分支使用</p><h5 id="分支管理和工作流模型">分支管理和工作流模型</h5><h4 id="其他待补充">其他待补充</h4><ul><li>git的权限管理</li><li>在不同编辑器上的使用</li><li>可视化git管理工具</li><li>实际使用的例子</li></ul><h4 id="参考视频">参考视频</h4><p><a href="https://www.bilibili.com/video/BV1HM411377j">【GeekHour】一小时Git教程</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB的简单使用</title>
    <link href="/2024/07/29/MongoDb%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/29/MongoDb%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="基本命令">基本命令</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>show databases</td><td>显示当前数据库</td></tr><tr><td>show dbs</td><td>显示当前数据库</td></tr><tr><td>use 数据库名</td><td>进入指定数据库</td></tr><tr><td>db</td><td>显示当前所处数据库</td></tr><tr><td>show collections</td><td>显示数据库中所有的集合</td></tr></tbody></table><h4 id="crud操作create-read-update-delete">CRUD操作（create read updatedelete）</h4><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>db.&lt;collection&gt;.insert(doc)</td><td>向集合中插入一个文档</td></tr><tr><td>db.stus.insert({name:"孙悟空",age:18,gender:"男"})</td><td>向当前的数据库中的stus集合中插入一个学生对象{name:"孙悟空",age:18,gender:"男"}</td></tr><tr><td>db.stus.insert([{name:"孙悟空",age:18,gender:"男"},{name:"沙和尚",age:22,gender:"男"},{name:"猪八戒",age:24,gender:"男"}])</td><td>一次性插入多个</td></tr><tr><td>db.stus.insert([{_id:"hello",name:"孙悟空",age:18,gender:"男"},])</td><td>会自定义id</td></tr><tr><td>db.stus.insertOne({name:"孙悟空",age:18,gender:"男"},)<br>db.stus.insertMany([{name:"孙悟空",age:18,gender:"男"},{name:"孙悟空",age:18,gender:"男"}])</td><td>insertOne()和insertMany()分别是用来插入一个和多个数据</td></tr><tr><td>db.&lt;collection&gt;.find()<br>-find()用来查看集合中所有符合条件的文档<br>-find()可以接收一个对象作为条件参数<br>{}表示查询集合中所有的文档<br>{属性：值}查询属性是指定值的文档</td><td>查询当前集合中的所有文档</td></tr><tr><td>db.stus.find({_id:"hello"})<br>db.stus.find({age:28,name:"白骨精"})</td><td>查询id为hello的文档<br>查询年龄为28，name为白骨精的文档</td></tr><tr><td>db.stus.find()<br>db.stus.find()[0]<br>db.stus.find()[0].name<br>db.stus.find({}).count()<br>db.stus.find().length()</td><td>查询stus中所有文档<br>查询第一个文档<br>查询第一个文档的name属性<br>查询stus集合中文档的数量，find()中有{}效果是一样的<br>作用同count()</td></tr><tr><td>db.&lt;collectioin&gt;.findOne()<br>db.&lt;collection&gt;.findOne().name</td><td>用来查询集合中符合条件的第一个<br>查询集合中第一个的name属性</td></tr><tr><td>db.&lt;collection&gt;.findOne()</td><td>查询集合中符合条件的第一个文档</td></tr></tbody></table><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>db.collection.update(查询条件，新对象)</td><td>修改查询到的对象为新对象<br>update()默认情况下会使用新对象替换旧的对象，默认替换修改一个符合条件的</td></tr><tr><td>db.stus.update({"_id":"hello"},{<span class="math inline">\(set:{name:&quot;沙和尚&quot;}})&lt;br/&gt;db.stus.update({&quot;\_id&quot;:&quot;hello&quot;},{\)</span>set:{gender:"女",address:"流沙河"}})</td><td><span class="math inline">\(set: 用来修改文档中的指定属性&lt;br/&gt;修改\_id为hello的对象中name为沙和尚&lt;br/&gt;修改\_id为hello的对象中的gender为女，添加address属性 ||db.stus.update({&quot;name&quot;:&quot;孙悟空&quot;},{\)</span>set:{address:"花果山2"}},{multi:true})</td></tr><tr><td>db.stus.update({"_id":"hello"},{$unset:{address:{}}})</td><td><span class="math inline">\(unset:用来删除文档中的指定属性&lt;br/&gt;删除\_id为hello的对象中address属性，删除是根据属性删除，属性后面的值不管，可以用{}或&quot;&quot;或者随便什么值（1也可以，简单就行）代替|| db.\&lt;collection\&gt;.updateMany()                               |同时修改多个符合条件的文档                                   ||db.stus.updateMany({&quot;name&quot;:&quot;孙悟空&quot;},{\)</span>set:{address:"花果山"}})</td></tr><tr><td>db.&lt;collection&gt;.updateOne()</td><td>修改一个符合条件的文档</td></tr><tr><td>db.&lt;collection&gt;.replaceOne()</td><td>替换一个文档</td></tr></tbody></table><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>db.&lt;collection&gt;.remove()</td><td>可以根据条件来删除文档，传递的条件和find()一样，默认情况下删除符合条件的所有文档</td></tr><tr><td>db.stus.remove({age:28},true)</td><td>可以根据条件来删除stus集合中的文档,只删除一个</td></tr><tr><td>db.stus.remove({})</td><td>删除stus中的所有文档（性能略差），stus集合还在</td></tr><tr><td>db.stus.drop()</td><td>删除stus集合,如果stus集合是数据库中的最后一个，那么数据库也会被删除</td></tr><tr><td>db.dropDatabase()</td><td>删除所在的数据库</td></tr><tr><td>db.&lt;collection&gt;.deleteOne()</td><td>删除集合中的一个对象</td></tr><tr><td>db.&lt;collection&gt;.deleteMany()</td><td>删除集合中的多个对象</td></tr></tbody></table><ul><li><p>文档之间的关系</p><ul><li><p>一对一(one to one)</p><ul><li><p>夫妻（一个丈夫 对应 一个妻子）</p></li><li><p>在MongoDB可以通过内嵌文档的形式来体现出一对一的关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">use wifeAndHusband;<br>db.wifeAndHusband.insert([<br>&#123;<br>name:&quot;黄蓉&quot;,<br>husband:<br>&#123;<br>name:&quot;郭靖&quot;,<br>&#125;<br>&#125;,<br>&#123;<br>name:&quot;&quot;,<br>husband:<br>&#123;<br>name:&quot;武大郎&quot;,<br>&#125;<br>&#125;<br>]);<br><br>db.wifeAndHusband.find();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>一对多(one to many)/多对一(many to one)</p><ul><li><p>也可以通过内嵌文档来映射一对多的关系</p></li><li><p>父母 -- 孩子</p></li><li><p>用户 -- 订单</p></li><li><p>文章 -- 评论</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.users.insert(<br>[<br>&#123;<br>username:&quot;swk&quot;,<br>&#125;,<br>&#123;<br>username:&quot;zbj&quot;,<br>&#125;<br><br>]<br>);<br>db.users.find();<br><br>db.order.insert(<br>&#123;<br>list:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;大鸭梨&quot;],<br>user_id:ObjectId(&quot;6352bdd40a470000750024d8&quot;),<br>&#125;<br><br>);<br>db.order.find();<br><br>db.order.insert(<br>&#123;<br>list:[&quot;西瓜&quot;,&quot;葡萄&quot;,&quot;桃子&quot;],<br>user_id:ObjectId(&quot;6352bdd40a470000750024d9&quot;),<br>&#125;<br><br>);<br>db.order.find();<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查找用户swk的订单<br>var user_id <span class="hljs-operator">=</span> db.users.findOne(&#123;username:&quot;swk&quot;&#125;)._id;<br>db.order.find(&#123;user_id:user_id&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>多对多(many to many)</p><ul><li><p>分类 -- 商品</p></li><li><p>老师 -- 学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>多对多<br>db.teachers.insert(<br>[<br>&#123;name:&quot;洪七公&quot;&#125;,<br>&#123;name:&quot;黄药师&quot;&#125;,<br>&#123;name:&quot;龟仙人&quot;&#125;,<br>]<br><br>);<br>db.teachers.find()<br><br><br>db.stus.insert(<br>[<br>&#123;<br>name:&quot;郭靖&quot;,<br>tech_isd:<br>[<br>ObjectId(&quot;6352c0260a470000750024dc&quot;),<br>ObjectId(&quot;6352c0260a470000750024dd&quot;),<br>]<br>&#125;,<br>&#123;<br>name:&quot;孙悟空&quot;,<br>tech_isd:<br>[<br>ObjectId(&quot;6352c0260a470000750024dc&quot;),<br>ObjectId(&quot;6352c0260a470000750024dd&quot;),<br>ObjectId(&quot;6352c0260a470000750024de&quot;),<br>]<br>&#125;,<br>]<br>);<br>db.stus.find()<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="排序和投影">排序和投影</h4><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>db.&lt;collection&gt;.find({}).sort([属性:1/-1])</td><td>对集合中的数据进行排序<br>1表示升序，-1表示降序</td></tr><tr><td>db.stus.find({}).sort({age:1,name:-1})</td><td>对stus集合中所有的数据按照年龄升序，name降序进行排序</td></tr><tr><td>db.&lt;collection&gt;.find({},{属性:1/0})</td><td>对集合中的数据字段进行筛选<br>1表示显示，0表示不显示</td></tr><tr><td>db.stus.find({},{name:1,_id:0,gender:1});</td><td>对stus集合中的数据，显示name和gender字段，不显示_id字段，默认显示_id字段</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询文档时，默认情况是按照创建的时间进行排序（升序），视频上说是按照_id，实际上我测试不是的，是根据创建时间进行排序<br>db.stus.find(&#123;&#125;);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>sort()可以用来指定文档的排序规则，sort()需要传递一个对象来指定排序规则，<span class="hljs-number">1</span>表示升序，<span class="hljs-number">-1</span>表示降序<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>limit <span class="hljs-keyword">skip</span> sort 可以以任意的顺序进行调用<br>db.stus.find(&#123;&#125;).sort(&#123;age:<span class="hljs-number">1</span>,name:<span class="hljs-number">-1</span>&#125;)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在查询时，可以在第二个参数的位置来设置查询结果的投影，<span class="hljs-number">1</span>表示显示，<span class="hljs-number">0</span>表示不显示<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>显示name，不显示_id,显示gender<br>db.stus.find(&#123;&#125;,&#123;name:<span class="hljs-number">1</span>,_id:<span class="hljs-number">0</span>,gender:<span class="hljs-number">1</span>&#125;);<br></code></pre></td></tr></table></figure><h4 id="mongoose的使用">mongoose的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.安装Mongoose</span><br><span class="hljs-comment">准备：</span><br><span class="hljs-comment">切换为淘宝镜像命令</span><br><span class="hljs-comment">npm config set registry https://registry.npm.taobao.org</span><br><span class="hljs-comment">查看当前使用的镜像地址命令</span><br><span class="hljs-comment">npm config get registry</span><br><span class="hljs-comment">如果返回 https://registry.npm.taobao.org，说明镜像配置成功。</span><br><span class="hljs-comment">切换回原镜像（安装一些package不容易报错）</span><br><span class="hljs-comment">npm config set registry https://registry.npmjs.org</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">正式安装：</span><br><span class="hljs-comment">    cnpm i mongoose --save</span><br><span class="hljs-comment">2. 在项目中引入mongoose</span><br><span class="hljs-comment">    var mongoose = require(&quot;mongoose&quot;);</span><br><span class="hljs-comment">3. 连接MongoDB数据库</span><br><span class="hljs-comment">    mongoose.connect(&#x27;mongodb://数据库Ip地址:端口号/数据库名称&#x27;,&#123;useMongoClient:true&#125;);</span><br><span class="hljs-comment">    - 如果端口号是默认端口号(27017)则可以省略不写</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4. 断开数据库连接(一般不需要调用)</span><br><span class="hljs-comment">    - MongoDB数据库，一般情况下，只需要连接一次，连接一次后，除非项目停止，服务器关闭，否则连接一般不会断开</span><br><span class="hljs-comment">    mongoose.disconnect()</span><br><span class="hljs-comment">    - 监听MongoDB数据库的连接状态</span><br><span class="hljs-comment">        - 在Mongoose对象中，有一个属性叫做connection,该对象表示的就是数据库连接</span><br><span class="hljs-comment">            通过监视该对象的状态，可以来监听数据库的连接与断开</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        数据库连接成功的事件</span><br><span class="hljs-comment">            mongoose.connection.once(&quot;open&quot;,function()&#123;&#125;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        数据库断开的事件</span><br><span class="hljs-comment">            mongoose.connection.once(&quot;close&quot;,function()&#123;&#125;);</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br><br><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;);<br><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;close&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接已经断开&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">//断开数据库连接</span><br>mongoose.<span class="hljs-title function_">disconnect</span>();<br></code></pre></td></tr></table></figure><h5 id="schema和model">Schema和Model</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//import mongoose from &#x27;mongoose&#x27;;</span><br><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">title</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//通过Schema来创建Model</span><br><span class="hljs-comment">//Model代表的是数据库中的集合，通过Model才能鬼数据库进行操作</span><br><span class="hljs-comment">//mongoose.model(modelName, schema)</span><br><span class="hljs-comment">//modelName:就是要映射的集合名,实际映射的是students集合，mongoose会自动将集合名称变为负数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;student&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">//向数据库中插入一个文档</span><br><span class="hljs-comment">//stuModel.create(doc,function(err)&#123;&#125;);</span><br><span class="hljs-comment">//doc:要插入的文档  function(err)&#123;&#125;:回调函数</span><br><span class="hljs-comment">// StuModel.create(&#123;</span><br><span class="hljs-comment">//     name:&quot;孙悟空&quot;,</span><br><span class="hljs-comment">//     age:18,</span><br><span class="hljs-comment">//     gender:&quot;male&quot;,</span><br><span class="hljs-comment">//     address:&quot;花果山&quot;,</span><br><span class="hljs-comment">// &#125;,function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;插入成功~~~&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//会自动将属性gender设置为female</span><br><span class="hljs-title class_">StuModel</span>.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;白骨精&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">16</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;白骨洞&quot;</span>,<br>&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;插入成功~~~&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="model的方法">Model的方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-comment">//原本这里是title:String,自己怎么插入name都无法插入，改成name就能够插入了</span><br>    <span class="hljs-attr">name</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//通过Schema来创建Model</span><br><span class="hljs-comment">//Model代表的是数据库中的集合，通过Model才能鬼数据库进行操作</span><br><span class="hljs-comment">//mongoose.model(modelName, schema)</span><br><span class="hljs-comment">//modelName:就是要映射的集合名,实际映射的是students集合，mongoose会自动将集合名称变为负数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;students&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * - 有了Model，我们就可以来对数据库进行增删改查的操作</span><br><span class="hljs-comment"> *  添加</span><br><span class="hljs-comment"> *  Model.create(docs,[options],[callback])</span><br><span class="hljs-comment"> *  用来创建一个文档并添加到数据库中</span><br><span class="hljs-comment"> *  参数：</span><br><span class="hljs-comment"> *  docs:可以是一个文档对象，也可以是一个文档对象的数组</span><br><span class="hljs-comment"> *  callback:当操作完成以后调用的回调函数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  查找</span><br><span class="hljs-comment"> *  Model.find(filter,[projection],[options],[callback])</span><br><span class="hljs-comment"> *      查询所有符合条件的文档,总会返回一个数组(即便是空数组)</span><br><span class="hljs-comment"> *      filter:查询的条件</span><br><span class="hljs-comment"> *      project:投影 需要获取到的字段</span><br><span class="hljs-comment"> *          - 两种方式</span><br><span class="hljs-comment"> *              &#123;name:1,_id:0&#125;</span><br><span class="hljs-comment"> *              &quot;name -_id&quot;</span><br><span class="hljs-comment"> *      options:查询选项(skip limit)</span><br><span class="hljs-comment"> *          跳过前三个，只显示后面的一个</span><br><span class="hljs-comment"> *          &#123;skip:3,limit:1&#125;</span><br><span class="hljs-comment"> *      callback:回调函数,查询结果会通过回调函数返回，回调函数必须传，如果不传回调函数,根本不会查询</span><br><span class="hljs-comment"> *  Model.findById(id,[projection],[options],[callback])</span><br><span class="hljs-comment"> *      根据文档的id属性查询文档 总会返回一个具体的文档对象</span><br><span class="hljs-comment"> *  Model.findOne([conditioins],[projection],[options],[callback])</span><br><span class="hljs-comment"> *      查询符合条件的第一个文档 总会返回一个具体的文档对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  修改</span><br><span class="hljs-comment"> *  Model.update(filter,update,[options],[callback])</span><br><span class="hljs-comment"> *  Model.updateMany(filter,update,[options],[callback])</span><br><span class="hljs-comment"> *  Model.updateOne(filter,update,[options],[callback])</span><br><span class="hljs-comment"> *      - 用来修改一个或多个文档</span><br><span class="hljs-comment"> *      - 参数</span><br><span class="hljs-comment"> *          filter 查询条件</span><br><span class="hljs-comment"> *          update 修改后的对象</span><br><span class="hljs-comment"> *          options 配置参数</span><br><span class="hljs-comment"> *          callback 回调函数</span><br><span class="hljs-comment"> *  Model.replaceOne(filter,doc,[options],[callback])</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  删除</span><br><span class="hljs-comment"> *  Model.remove([options],[fn])</span><br><span class="hljs-comment"> *  Model.deleteOne(conditions,[options],[callback])</span><br><span class="hljs-comment"> *  Model.deleteMany(conditions,[options],[callback])</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  统计文档的数量</span><br><span class="hljs-comment"> *  Model.count(filter,[callback])</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// StuModel.create([</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         name:&quot;猪八戒&quot;,</span><br><span class="hljs-comment">//         age:28,</span><br><span class="hljs-comment">//         gender:&quot;male&quot;,</span><br><span class="hljs-comment">//         address:&quot;高老庄&quot;,</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         name:&quot;唐僧&quot;,</span><br><span class="hljs-comment">//         age:16,</span><br><span class="hljs-comment">//         gender:&quot;male&quot;,</span><br><span class="hljs-comment">//         address:&quot;女儿国&quot;,</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">// ],function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;插入成功~~~&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// StuModel.create([</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         name:&quot;沙僧&quot;,</span><br><span class="hljs-comment">//         age:36,</span><br><span class="hljs-comment">//         gender:&quot;male&quot;,</span><br><span class="hljs-comment">//         address:&quot;流沙河&quot;,</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// ],function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(arguments);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// 运行后的输出结果</span><br><span class="hljs-comment">// 0:应该就是err参数</span><br><span class="hljs-comment">// 1:就是我们插入的文档</span><br><span class="hljs-comment">// [Arguments] &#123;</span><br><span class="hljs-comment">//     &#x27;0&#x27;: null,</span><br><span class="hljs-comment">//         &#x27;1&#x27;: [</span><br><span class="hljs-comment">//         &#123;</span><br><span class="hljs-comment">//             age: 36,</span><br><span class="hljs-comment">//             gender: &#x27;male&#x27;,</span><br><span class="hljs-comment">//             address: &#x27;流沙河&#x27;,</span><br><span class="hljs-comment">//             _id: new ObjectId(&quot;6353a555d75ad742ba9e5e3d&quot;),</span><br><span class="hljs-comment">//             __v: 0</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     ]</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 只要name属性，不要_id属性</span><br><span class="hljs-comment">// StuModel.find(&#123;name:&quot;唐僧&quot;&#125;,&#123;name:1,_id:0&#125;,function (err,docs) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(docs);</span><br><span class="hljs-comment">//         console.log(docs[0].name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//-_id指不要_id</span><br><span class="hljs-comment">// skip:1 指跳过第一个，显示后面的</span><br><span class="hljs-comment">// limit:1 指只显示一个</span><br><span class="hljs-comment">// StuModel.find(&#123;&#125;,&#x27;name age -_id&#x27;,&#123;skip:1,limit:1&#125;,function (err,docs) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(docs);</span><br><span class="hljs-comment">//         console.log(docs[0].name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//返回的是具体的对象</span><br><span class="hljs-comment">// StuModel.findOne(&#123;&#125;,function (err,doc) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(doc);</span><br><span class="hljs-comment">//         console.log(doc.name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//返回的是具体的对象</span><br><span class="hljs-comment">// StuModel.findById(&quot;6353ad5d5bd5fcedc0b7658b&quot;,function (err,doc) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         // console.log(doc);</span><br><span class="hljs-comment">//         // 通过find()查询的结果，返回的对象就是Document,文档对象</span><br><span class="hljs-comment">//         // Document对象是Model的实例，就是集合（StuModel）的实例</span><br><span class="hljs-comment">//         // 返回true，表示doc是StuModel的实例</span><br><span class="hljs-comment">//         console.log(doc instanceof StuModel)</span><br><span class="hljs-comment">//         // console.log(doc.name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// 修改唐僧的年龄为20</span><br><span class="hljs-comment">// StuModel.updateOne(&#123;name:&quot;唐僧&quot;&#125;,&#123;$set:&#123;age:20&#125;&#125;,function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;修改成功&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.</span><br><span class="hljs-comment">// StuModel.remove(&#123;name:&quot;唐僧&quot;&#125;,function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;删除成功&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br>统计集合中的文档数量<br><span class="hljs-title class_">StuModel</span>.<span class="hljs-title function_">count</span>(&#123;&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err,count</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="document的方法">Document的方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">name</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//通过Schema来创建Model</span><br><span class="hljs-comment">//Model代表的是数据库中的集合，通过Model才能鬼数据库进行操作</span><br><span class="hljs-comment">//mongoose.model(modelName, schema)</span><br><span class="hljs-comment">//modelName:就是要映射的集合名,实际映射的是students集合，mongoose会自动将集合名称变为负数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;student&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Document 和集合中的文档一一对应，Document是Model的实例</span><br><span class="hljs-comment"> * 通过Model查询到的结果都是Document</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * document的方法</span><br><span class="hljs-comment"> *  Model#save(&#123;options&#125;,[fn])</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> stu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuModel</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;奔波霸&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">48</span>,<br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;碧波谭&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">//会将文档中的信息进行保存</span><br><span class="hljs-comment">// stu.save(function(err)&#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;保存成功&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-title class_">StuModel</span>.<span class="hljs-title function_">findOne</span>(&#123;&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err,doc</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * update(update,[options],[callback])</span><br><span class="hljs-comment">         *  - 修改对象</span><br><span class="hljs-comment">         * remove([callback])</span><br><span class="hljs-comment">         *  - 删除对象</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// console.log(doc);</span><br>        <span class="hljs-comment">//这个doc就是指findOne()找到的那个对象，直接修改该对象</span><br>        <span class="hljs-comment">// doc.update(&#123;$set:&#123;age:38&#125;&#125;,function (err) &#123;</span><br>        <span class="hljs-comment">//     if(!err)&#123;</span><br>        <span class="hljs-comment">//         console.log(&quot;修改成功&quot;);</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// &#125;);</span><br>        <span class="hljs-comment">//也可以直接修改findOne()获得的对象</span><br>        <span class="hljs-comment">// doc.age = 18;</span><br>        <span class="hljs-comment">// doc.save();</span><br>        <span class="hljs-comment">//直接删除findOne()获得的对象</span><br>        <span class="hljs-comment">// doc.remove(function (err) &#123;</span><br>        <span class="hljs-comment">//     if(!err)&#123;</span><br>        <span class="hljs-comment">//         console.log(&quot;二师兄再见&quot;);</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// &#125;);</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * get(name)</span><br><span class="hljs-comment">         *  - 直接获取文档中指定属性值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  set(name,value)</span><br><span class="hljs-comment">         *  - 设置文档的指定的属性值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  id</span><br><span class="hljs-comment">         *      获取文档的_id属性值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  toObject()</span><br><span class="hljs-comment">         *      - 将Document对象转换为一个普通的js对象</span><br><span class="hljs-comment">         *          转换为普通的js对象以后，注意所有的Document对象的方法或属性都不能使用</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 下面两个的效果相同</span><br>        <span class="hljs-comment">// console.log(doc.get(&quot;name&quot;));</span><br>        <span class="hljs-comment">// console.log(doc.name);</span><br><br>        <span class="hljs-comment">// doc.set(&quot;name&quot;,&quot;猪小小&quot;);</span><br>        <span class="hljs-comment">// doc.name = &quot;猪小小&quot;;</span><br>        <span class="hljs-comment">// console.log(doc);</span><br><br>        <span class="hljs-comment">// console.log(doc._id);</span><br>        <span class="hljs-comment">// new ObjectId(&quot;6353ee24148021db079f47db&quot;)</span><br><br>        <span class="hljs-comment">// console.log(doc.id);</span><br>        <span class="hljs-comment">// 6353ee24148021db079f47db</span><br><br>        <span class="hljs-comment">//转换为一个普通的对象</span><br>        <span class="hljs-comment">// var o = doc.toObject();</span><br>        <span class="hljs-comment">// console.log(o);</span><br><br>        <span class="hljs-comment">//转换为普通的Object后能够删除其中的address,否则不能使用delete删除数据</span><br>        doc = doc.<span class="hljs-title function_">toObject</span>();<br>        <span class="hljs-keyword">delete</span> doc.<span class="hljs-property">address</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doc);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doc.<span class="hljs-property">id</span>);<br>        <span class="hljs-comment">//undefined</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doc.<span class="hljs-property">_id</span>);<br>        <span class="hljs-comment">// new ObjectId(&quot;6353ee24148021db079f47db&quot;)</span><br>    &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="mongoose的模块化">mongoose的模块化</h5><p>可以在models包中创建模型，后面可以直接使用该模型，如index.js中的使用，tools包中主要是放连接mongoDB的代码，可以不用每次都重复写</p><p><a href="https://imgse.com/i/xguig1"><img src="https://s1.ax1x.com/2022/10/22/xguig1.png" alt="xguig1.png"></a></p><p>conn_mongo.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个模块，用来连接MongoDB数据库</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>student.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用来定义Student的模型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-comment">//原本这里是title:String,自己怎么插入name都无法插入，改成name就能够插入了</span><br>    <span class="hljs-attr">name</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//定义模型</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;students&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">// exports.model = StuModel;</span><br><span class="hljs-comment">//使用该语句在index.js中就不需要.model了</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">StuModel</span>;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入会直接执行该模块</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./tools/conn_mongo&quot;</span>);<br><span class="hljs-comment">// const Student = require(&quot;./models/student&quot;).model;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Student</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./models/student&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span>);<br><br><span class="hljs-title class_">Student</span>.<span class="hljs-title function_">find</span>(&#123;&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err,docs</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(docs);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="参考博客">参考博客</h4><p><a href="https://blog.csdn.net/weixin_45182409/article/details/117981169" title="csdn博客npm相关使用">npm相关配置</a></p><h4 id="参考视频">参考视频</h4><p><a href="https://www.bilibili.com/video/BV18s411E78K" title="尚硅谷MongoDB学习视频">参考B站视频</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis的基本使用</title>
    <link href="/2024/07/29/Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/07/29/Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="基本命令包含centos命令和redis的命令">基本命令(包含centos命令和redis的命令)</h4><p>后面的是redis的命令</p><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>redis-server</td><td>前台启动redis服务</td></tr><tr><td>redis-server redis.conf目录</td><td>后台启动redis服务</td></tr><tr><td>redis-server /etc/redis.conf</td><td>后台启动redis服务</td></tr><tr><td>&gt;ping</td><td>返回PONG表示redis连接成功</td></tr><tr><td>ps -ef | grep redis</td><td>显示redis的所有进程</td></tr><tr><td>kill -9 ID</td><td>杀死 ID的进程</td></tr><tr><td>redis-cli -p 6379</td><td>用6379端口启动redis,默认使用6379端口可以不用写-p 6379</td></tr><tr><td>redis-cli shutdown</td><td>单实例redis关闭</td></tr><tr><td>&gt;shutdown</td><td>关闭进入的redis实例</td></tr><tr><td>redis-cli -p 6379 shutdown</td><td>多redis实例关闭，指定端口关闭</td></tr></tbody></table><h4 id="常用命令">常用命令</h4><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>set key value</td><td>添加键值对</td></tr><tr><td>get key</td><td>查询对应的键值</td></tr><tr><td>append key value</td><td>将给定的value 追加到原值的末尾</td></tr><tr><td>strlen key</td><td>获得值的长度</td></tr><tr><td>setnx key value</td><td>只有在key不存在时，设置key的值</td></tr><tr><td>incr key</td><td>将key中存储的数字值增加1，只能对数字值操作，如果为空，值设置为1</td></tr><tr><td>decr key</td><td>将key中存储的数字值减少1，只能对数字值操作，如果为空，值设置为-1</td></tr><tr><td>incrby/decrby key&gt; 步长</td><td>将 key 中储存的数字值增减步长值，步长可以为负数</td></tr><tr><td>mset key1 value1 key2 value2 ...</td><td>同时设置一个或多个key-value对</td></tr><tr><td>mget key2 value2 key2 value2</td><td>同时获取一个或多个value</td></tr><tr><td>msetnx key1 value1 key2 value2</td><td>同时设置一个或多个key-value对，当且仅当所有给定key都不存在</td></tr><tr><td>getrange key 起始位置 结束位置</td><td>获得值的范围，类似java中的substring，前包，后包</td></tr><tr><td>setrange key 起始位置 value</td><td>用value 覆写key所存储的字符串值，从起始位置开始(索引从0开始)</td></tr><tr><td>set key 过期时间 value</td><td>设置键值的同时，设置过期时间，单位秒</td></tr><tr><td>getset key value</td><td>依旧换新，设置新值同时输出旧值</td></tr></tbody></table><p>Redis列表(List)</p><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>lpush/rpush key1 value1 key2 value2 ...</td><td>从左边/右边插入一个或多个值</td></tr><tr><td>lpop/rpop key</td><td>从左边/右边吐出一个值。值在键在，值光键亡</td></tr><tr><td>rpop/lpush key1 key2</td><td>从key1列表右边吐出一个值，插到key2列表左边</td></tr><tr><td>lrange key start stop</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>lrange mylist 0 -1</td><td>0左边第一个，-1右边第一个<br>改命令表示获得所有</td></tr><tr><td>lindex key index</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>llen key</td><td>获得列表长度</td></tr><tr><td>linsert key before value newvalue</td><td>在value前面插入newvalue</td></tr><tr><td>lrem key n value</td><td>从左边删除n个value(从左到右)</td></tr><tr><td>lset key index value</td><td>将列表key下标为index的值替换成value</td></tr></tbody></table><p>Redis集合(set)</p><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>sadd key value1 value2</td><td>将一个或多个member元素加入到集合key中，已经存在的member元素将被忽略</td></tr><tr><td>smembers key</td><td>取出该集合的所有值</td></tr><tr><td>sismember key value</td><td>判断集合key是否为含有该value值，有1，没有0</td></tr><tr><td>scard key</td><td>返回该集合的元素个数</td></tr><tr><td>srem key value1 value2 ...</td><td>删除集合中的某个元素</td></tr><tr><td>spop key</td><td>随机从该集合中吐出一个值</td></tr><tr><td>srandmember key n</td><td>随机从该集合中取出n个值，不会从集合中删除</td></tr><tr><td>smove source destination value</td><td>把集合中一个值从一个集合移动到另一个集合</td></tr><tr><td>sinnter key1 key2</td><td>返回两个集合的交集元素</td></tr><tr><td>sunion key1 key2</td><td>返回两个集合的并集元素</td></tr><tr><td>sdiff key1 key2</td><td>返回两个集合的差集元素(key1中的，不包含key2中的)</td></tr></tbody></table><h4 id="redis哈希hash">Redis哈希(Hash)</h4><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>hset key field value</td><td>给key集合中的field键赋值value</td></tr><tr><td>hget key1 field</td><td>从key1集合field取出value</td></tr><tr><td>hmset key1 field1 value1 field2 value2...</td><td>批量设置hash的值</td></tr><tr><td>hexists &lt;key1 field</td><td>查看哈希表key中，给定域field是否存在</td></tr><tr><td>hkeys key</td><td>列出该hash集合的所有field</td></tr><tr><td>hvals key</td><td>列出该hash集合的所有value</td></tr><tr><td>hincrby key field increment</td><td>为哈希表key中的域field的值加上增量increment</td></tr><tr><td>hsetnx key field value</td><td>将哈希表key中的域field的值设置为value，当且仅当域field不存在</td></tr></tbody></table><h4 id="redis有序集合zsetsorted-set">Redis有序集合Zset(sorted set)</h4><p>主要是根据score来排序</p><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>zadd key score1 value1 score2 value2 ...</td><td>将一个或多个member元素及其score值加入到有序key当中</td></tr><tr><td>zrange key start stop [WITHSCORES]</td><td>返回有序集key中，下标在start stop之间的元素<br>带WITHSCORES可以让分数一起和值返回到结果集</td></tr><tr><td>zrangebyscore key minmax [withscores] [limit offset count]</td><td>返回有序集key中，所有score值介于min和max之间(包括等于min或max)的成员，有序集成员按score值递增(从小到大)次序排列</td></tr><tr><td>zrevrangebyscore</td><td>同上，改为从大到小排列</td></tr><tr><td>zincrby key increment value</td><td>为元素的score加上增量</td></tr><tr><td>zrem key value</td><td>删除该集合下指定值的元素</td></tr><tr><td>zcount key min max</td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td>zrank key value</td><td>返回该值在集合中的排名，从0开始</td></tr></tbody></table><h4 id="redis的一些相关配置">Redis的一些相关配置</h4><p>配置只有保存后，并重启查看进程才能生效</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&gt; <span class="hljs-keyword">shutdown</span><br>redis-server <span class="hljs-string">/redis.conf</span>的路径<br></code></pre></td></tr></table></figure><p>注释掉bind 127.0.0.1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">bind</span> 127.0.0.1</span><br></code></pre></td></tr></table></figure><p>将本机的访问保护模式设置no</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">protected-<span class="hljs-keyword">mode</span> <span class="hljs-keyword">no</span><br></code></pre></td></tr></table></figure><p>端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">port</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>设置为后台进程</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">daemonize</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">requirepass</span> foobared <span class="hljs-comment">#将foobared改为自己的密码，去掉注释就行</span><br><span class="hljs-comment"># 之后使用redis-cli登录redis后使用命令：auth 你的密码</span><br><span class="hljs-comment"># 这样就可以密码登录了 或者redis-cli -a 你的密码</span><br></code></pre></td></tr></table></figure><h4 id="redis的发布和订阅">Redis的发布和订阅</h4><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>subscribe channel1</td><td>需要先进入redis，订阅channel1</td></tr><tr><td>publish channel1 hello</td><td>给channel1频道发信息</td></tr></tbody></table><h4 id="新数据类型">新数据类型</h4><h5 id="bitmaps">Bitmaps</h5><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>setbit key offset value</td><td>设置Bitmaps中某个偏移量的值（0或1）</td></tr><tr><td>getbit key offset</td><td>获取Bitmaps中某个偏移量的值</td></tr><tr><td>bitcount key [start end]</td><td>统计字符串从start字节到end字节比特值为1的数量</td></tr><tr><td>bitop and(or/not/xor) destkey [key]</td><td>bitop是一个符合操作，他可以做多个Bitmaps的and(交集)、or(并集)、not(非)、xor(异或)操作并将结果保存在destkey中</td></tr></tbody></table><h5 id="hyperloglog">HyperLogLog</h5><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>pfadd key element [element ...]</td><td>添加指定元素到HyperLogLog中</td></tr><tr><td>pfcount key [key...]</td><td>计算key的近似基数</td></tr><tr><td>pfmerge destkey sourcekey [sourcekey...]</td><td>将一个或多个key合并后的结果存在另一个key中，比如每月活跃用户可以使用每天的活跃用户来合并计算得到</td></tr></tbody></table><h5 id="geospatial">Geospatial</h5><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>geoadd key logitude latitude member [longitude latitude member...]</td><td>添加地理位置(经度，纬度，名称)</td></tr><tr><td>geopos key member [member...]</td><td>获得指定地区的坐标值</td></tr><tr><td>geodis key member1 member2 [m|km|ft|mi]</td><td>获取两个位置之间的直线距离<br>(m:米(默认值),km:千米,mi:英里,ft英尺)</td></tr><tr><td>georadius key longitude latitude radius m|km|ft|mi</td><td>以给定的经纬度为中心， 找出某一半径内的元素（经度 纬度 距离单位）</td></tr></tbody></table><h4 id="java连接redis">Java连接Redis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.137.3&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">pong</span> <span class="hljs-operator">=</span> jedis.ping();<br>System.out.println(<span class="hljs-string">&quot;连接成功：&quot;</span>+pong);<br>jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="redis_事务">Redis_事务</h4><table><thead><tr><th>命令/示例</th><th>作用</th></tr></thead><tbody><tr><td>multi</td><td>从输入 Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec后，Redis 会将之前的命令队列中的命令依次执行。</td></tr><tr><td>exec</td><td>同上</td></tr><tr><td>discard</td><td>组队的过程中可以通过 discard 来放弃组队</td></tr></tbody></table><h4 id="备注">备注</h4><p>后面还有持久化-RDB和AOF，用的时候查一下“尚硅谷的笔记”或者百度吧，暂时没练过，不知道记录啥，本人还是主要想去学一下C#和unity，要不是大数据作业，估计不会看这个[-_-||]</p><p>主从复制</p><p>lua脚本</p><p>集群</p><ul><li>缓存穿透</li><li>缓存击穿</li><li>缓存雪崩</li></ul><h4 id="参考视频">参考视频</h4><p><a href="https://www.bilibili.com/video/BV1Rv41177Af" title="B站尚硅谷Redis学习视频">参考B站视频</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VSCode基本使用和Emmet语法</title>
    <link href="/2024/07/29/VSCode%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(%E5%89%8D%E7%AB%AF)/"/>
    <url>/2024/07/29/VSCode%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(%E5%89%8D%E7%AB%AF)/</url>
    
    <content type="html"><![CDATA[<h3 id="vscode基本使用和emmet语法">VSCode基本使用和Emmet语法</h3><h4 id="emmet语法">Emmet语法</h4><blockquote><p>Emmet用于加快HTML和CSS代码的编写速度。</p><p>能够通过简短的表达式就可以生成HTML或CSS代码片段。</p><p>截至2022年，主流的编辑器工具如Visual StudioCode、WebStorm都已经继承了<code>Emmet</code>工具，无需手动安装即可使用</p><p>文档地址：<a href="https://docs.emmet.io/cheat-sheet/" class="uri">https://docs.emmet.io/cheat-sheet/</a></p></blockquote><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 单个标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- p --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 父子关系标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!--   div&gt;ul&gt;li --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 生成多个标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!--   div&gt;ul&gt;li*5 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 兄弟关系标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- div+p --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dic</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dic</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 属性 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- #box --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- p#box --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- dic.cls .cls --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 同时生成id和类 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- div.title.#header --&gt;</span><br>  <span class="hljs-comment">&lt;!-- div.title#header --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 自动生成内容 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- p&#123;Hello你好！&#125; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--   p&#123;Hello你好$&#125;*5 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- a[href=&quot;https//www.baidu.com&quot;] --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https//www.baidu.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- input[data-content=&#x27;AAAA&#x27;] --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">data-content</span>=<span class="hljs-string">&quot;AAAA&quot;</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- div&gt;p*2+ul&gt;li*2 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- p&gt;span.cls$*6 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="快捷键以及其他命令">快捷键以及其他命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">code #在windows中的命令行输入code会打开vscode软件<br>CRTL + / #单行注释或取消<br>ALT + UP/DOWN # 移动行<br>SHIFT + ALT + UP/DOWN # 复制当前行<br>CTRL + &#x27;+或-&#x27; # 设置IDE整体字体大小<br>CTRL + ALT + UP/DOWN # 多行编辑<br>SHIFT + CTRL + K # 删除当前行<br></code></pre></td></tr></table></figure><h4 id="vscode插件推荐">VSCode插件推荐</h4><ul><li><p>Auto Rename Tag</p><blockquote><p>自动将标签全部修改</p><p></p><p>修改其中的p，另一个p也会修改</p></blockquote></li><li><p>Code Runner</p><blockquote><p>运行多种语言的代码段或代码文件,实际上还要安装其他插件，不知道是不是自带的</p></blockquote></li><li><p>Code Translate</p><blockquote><p>能翻译代码中的英文</p></blockquote></li><li><p>ESLint</p><blockquote><p>vue代码格式化</p></blockquote></li><li><p>JavaScript(ES6) code snippets</p><blockquote><p>js语法报错提示</p></blockquote></li><li><p>Live Server</p><blockquote><p>使用服务器（本地）运行html文件</p></blockquote></li><li><p>Material Icon Theme</p><blockquote><p>修改文件目录的图标</p></blockquote></li><li><p>open in browser</p><blockquote><p>使用浏览器打开html文件</p></blockquote></li><li><p>Prettier Code formatter</p><blockquote><p>代码格式化</p><p>参考<a href="https://huaweicloud.csdn.net/638ee1f6dacf622b8df8d8c0.html" class="uri">https://huaweicloud.csdn.net/638ee1f6dacf622b8df8d8c0.html</a></p></blockquote></li><li><p>Vetur</p><blockquote><p>Vue代码格式化</p></blockquote></li><li><p>Vue Language Feature(Volur)</p><blockquote><p>Vue代码格式化</p></blockquote></li></ul><p><a href="https://imgse.com/i/pSjl7RI"><img src="https://s1.ax1x.com/2023/02/21/pSjl7RI.png" alt="pSjl7RI.png"></a></p><p><a href="https://imgse.com/i/pSjlOL8"><img src="https://s1.ax1x.com/2023/02/21/pSjlOL8.png" alt="pSjlOL8.png"></a></p><h4 id="vscode配置">VSCode配置</h4><p>左下角齿轮-&gt;setting</p><p>过一段时间自动保存</p><p><a href="https://imgse.com/i/pSjlxoQ"><img src="https://s1.ax1x.com/2023/02/21/pSjlxoQ.png" alt="pSjlxoQ.png"></a></p><p>去除右上角的迷你窗口</p><p><a href="https://imgse.com/i/pSj1pJs"><img src="https://s1.ax1x.com/2023/02/21/pSj1pJs.png" alt="pSj1pJs.png"></a></p><p>增加Ctrl+鼠标滑轮缩放代码字体大小</p><p><a href="https://imgse.com/i/pSj19Wn"><img src="https://s1.ax1x.com/2023/02/21/pSj19Wn.png" alt="pSj19Wn.png"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂谈-游戏(一)</title>
    <link href="/2024/07/29/%E6%9D%82%E8%B0%88-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/07/29/%E6%9D%82%E8%B0%88-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="游戏杂谈">游戏杂谈</h3><h4 id="双人成行">双人成行</h4><figure><img src="https://s2.loli.net/2022/07/20/dxheYjZ9R7vU5iw.png" alt="双人成行.png"><figcaption aria-hidden="true">双人成行.png</figcaption></figure><p>游玩：本人也是正经的玩过全流程的，和 Z 同学一点点摸索着玩，但是由于origin平台实在是连接困难，加上网络不好，在线游玩属实是体验不好，总是会掉线，玩着玩着就开始卡顿，掉线，每次重新连接大概五分钟，挺折磨人的耐心。</p><p>另外关于游玩方面，Z同学和我都不是高玩，玩起来其实也挺痛苦的，某些关卡对我们来说还挺需要操作和反应速度的，比如有的关卡自己需要在几秒内就跑到指定的位置，错了就要重来，但好在只要成功一次就能够过关，后面会自动保存。有些Boss 打起来也挺费时间的，例如有个黄蜂的Boss，那个需要科迪先喷糖浆，小梅后面才能够攻击，而 Boss还有一些小兵蜜蜂保护，这是一个需要跨过去的坎，游玩过程自己的鼠标都快费了，虽然是自动瞄准，但也是有判定范围的，最后鼠标都移动困难了。</p><p>关卡在设计方面非常有新意，是我玩过的游戏中不可多得的必玩游戏，可惜需要有一个朋友，配置要求极高。前期的关卡设计挺多，也有剧情，不过都Q掉了，后面几大章节明显不如前几关，而且神庙逃亡太多了，颜色也过于鲜艳，属于虎头蛇尾了，但是质量还是高于大多数同类游戏。音乐方面不评价，没咋注意，游戏难度听说是动态的，在某一关待久了听说会降低难度，方便手残玩家，但耗时间，适合平时时间长放松可以试一下，没时间不适合玩，比如累死晚上十点回家，这个游戏建议别试着玩了。</p><h4 id="影之诗">影之诗</h4><figure><img src="https://s2.loli.net/2022/07/20/jKwHk72dgOFYVmi.jpg" alt="影之诗.jpg"><figcaption aria-hidden="true">影之诗.jpg</figcaption></figure><p>游玩：算是老玩家了，在起焉之光版本入坑，大概一两周后碧蓝骑士版本（在国服，当时国际服应该早就碧蓝骑士版本了），中间退坑过一年的时间，大概就是疫情那段时间，去玩昆特牌了，没碰影之诗，拿过三个版本GM，优点是无聊，缺点也是无聊。国服的福利极好，随便肝一下每日任务就行，基本上每个版本的所有卡都能拿到，还会有剩余的资源。但是为什么退坑，就是太无聊了，稍微娱乐一点点的卡组就不能玩，而且渐渐的很多东西都脱离实际了，很多职业特色都没有了，像暗夜伯爵原本非常好的一张鬼妈（8费用，4 攻击，4生命，虹卡，荣耀再临版本），原来效果是从卡堆里抽到手上时消失，直接无条件复仇，俗称点灯，后来削过后就没意思了，主战者生命上限直接少了一半，对手稍微打一下就输了，而且国服版本特别难玩，稍微有一点不顺就会输，任务有时候打三四个小时都做不好，而且后面设计的卡越来越膨胀，膨胀就算了，还膨胀的特别快，官方削弱卡牌一削弱就不能用，会不会削弱啊，卡牌不会设计就算了，削弱也是一刀切。我最关心的其实是双人模式，可惜一直没出，出不出都不会去玩了，毕竟是二次元游戏，我反而重视游戏性，玩steam 挺好。</p><h4 id="洛克王国">洛克王国</h4><figure><img src="https://s2.loli.net/2022/07/20/lRL6wrIn75jkmyX.png" alt="洛克王国.png"><figcaption aria-hidden="true">洛克王国.png</figcaption></figure><p>游玩：也算是个老玩家，基本前期游玩的样子都知道，疫情的时候也是玩到了高级训练师，系别排位也是圣魔导师。前期洛克王国感觉更像是经营类的游戏，战斗没有任何技巧可言，就是想办法控制对面（催眠粉，以及后面的瓦斯叮当的生命火焰，或者雪影娃娃的冰晶结界和冰龙王的嗜血寒冰冰冻），找一个C位进行强化进行推队，简单得很，看运气。但是现在的战斗很有趣，基本都是会玩的能够碾压不会玩的，已经不是以前的过家家了，从前期的收集、逛街重点倾向于战斗了，我玩过，很有趣，但是也无聊，每场战斗少则二十分钟，多则上小时，每天十把，累死人，而且网络极度不稳定，极度极度不稳定，退坑原因一方面就是这个，战斗我觉得比王者啥的好多了，操作运营一点不输王者那些游戏，另一方面是flash游戏，已经淘汰的技术，网页大多数不支持且有广告。另外前期洛克王国剧情极好，后期就是现在的剧情完全就是白开水，只会玩梗，一点感情没有，看其他大佬分析，游戏封面也敷衍起来了，以前是剧情为主，每周任务也很好，至少挺人性化，现在随便放几个花盆宠，而且每周任务特别恶心人，费时费力，不用辅助手刷我是时间多了没事干啊，游戏已经到了末期了，另外论坛也是很让人头疼的地方。最后提一嘴，氪金吗？也挺氪金的，不过比不上王者一套皮肤的钱，不氪金可以玩，也是大佬，要肝一肝的。最近洛克王国手游也被大众关注，我不看好，不为什么，就是不看好，洛克王国页游都不行，手游也大概率不行，都是刷刷刷的，剧情和所寄托的文化没有，算不上好游戏。原神也火出去了啊？我不玩原神，但那个是手游和PC 端互通啊，手机方便，但其性能现在远远弱于电脑。</p><h4 id="觅长生">觅长生</h4><figure><img src="https://s2.loli.net/2022/07/20/fHcmsZepbixJzMv.png" alt="觅长生.png"><figcaption aria-hidden="true">觅长生.png</figcaption></figure><p>游玩：依然是 steam 游戏，我很早就在 B 站上看见了，当时还没 ea版本呢，可惜当时不看好，卡牌？？金木水火土的牌能做出来什么战斗呢，就没管，最近改成灵气球了，无所谓，玩多了都可以。后来鬼谷八荒火了，当时也不知道怎么回事，对修仙游戏极度渴望，找到了觅长生，当时鬼谷八荒还没出事，就是bug多，更新慢，饼很多。当时看了飞羽仙狂的游玩，会了打劫流，渐渐熟悉了，制作组诚意很足，每周都更新，还有了B 站的wiki，体系完善，就等制作组继续更新了，不过好慢啊，都好多年了，还在 ea阶段，游戏最近的创意工坊也出来了，玩家实力大大增加，难度降低很多，不过觅长生我更喜欢看看剧情了，飞不飞升要等正式版了（虽然我也化神了），喜欢修仙游戏的可以尝试，至少没有坑，也没有饼，缺点就像steam里面说的，可以玩的修仙小说，看剧情和装大佬才是王道啦。另外有一款了不起的修仙模拟器（玩法是修仙门派模拟器）也很好，但学习成本高。有额外资金且对修仙感兴趣可以尝试这两款游戏（觅长生和了不起的休闲模拟器，鬼谷八荒有大坑，别去）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>各种功能测试</title>
    <link href="/2024/07/28/%E5%90%84%E7%A7%8D%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/07/28/%E5%90%84%E7%A7%8D%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h4 id="latex-公式">LaTex 公式</h4><p><span class="math display">\[J_r^{-1}(e_{ij})\approx I +\frac { 1 } { 2 }\begin{bmatrix}\phi_e^ { \wedge } &amp; \rho_e^ { \wedge } \\0 &amp; \phi_e^{\wedge} \\\end{bmatrix}\]</span></p><p><span class="math display">\[E=mc^2\]</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github部署个人博客</title>
    <link href="/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="参考链接">参考链接</h4><p><a href="https://blog.csdn.net/clearloe/article/details/139879493">Hexo博客搭建并部署到 GitHub Pages(2024 最新详细版)</a></p><h4 id="安装-vscode">安装 VsCode</h4><p><a href="https://blog.csdn.net/msdcp/article/details/127033151">VSCode安装配置使用教程（最新版超详细保姆级含插件）一文就够了</a></p><p><a href="https://code.visualstudio.com/Download">VsCode下载链接</a></p><ul><li>如果无法下载，可以选择在电脑的应用商城里面下载，我记得是要挂梯子才能官网下载</li><li>安装就是正常安装，建议别 C 盘</li></ul><h4 id="安装-git">安装 Git</h4><p><a href="https://blog.csdn.net/qq_45730223/article/details/131693287">Git安装详解（写吐了，看完不后悔）</a></p><ul><li>很常用的软件，程序员必装，按照教程装就好了，不过有时候验证有问题，也要梯子</li></ul><h4 id="安装-nodejs">安装 nodejs</h4><p><a href="https://blog.csdn.net/weixin_44893902/article/details/121788104">node.js安装及环境配置超详细教程【Windows 系统安装包方式】</a></p><blockquote><p>搬运上述链接评论 Node.js Express 安装报错总结 express 4.x 版本之前全局安装 express 命令是 npm install express -g express 4.x 版本之后全局安装 express 命令是 npm install -g express-generator</p></blockquote><h4 id="安装-hexo">安装 hexo</h4><p><a href="https://www.cnblogs.com/zhujingxiu/articles/7462025.html" title="发布于 2017-09-01 10:34">Win10 任意目录下默认快速以管理员身份运行CMD</a> <a href="https://blog.csdn.net/clearloe/article/details/139879493">安装hexo 参考博客链接</a> <a href="https://blog.csdn.net/qq_42786011/article/details/123895927">运行npm install 不动时</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">//  配置nmp代理来提高速度，如设置淘宝镜像<br>npm config set registry  https://registry.npmmirror.com/<br><br>// 查看配置是否成功<br>npm config get registry<br><br>// 成功后重新npm install安装<br>// npm install 。。。<br></code></pre></td></tr></table></figure><h4 id="遇上的错误解决方法供参考">遇上的错误，解决方法供参考</h4><h5 id="fatal-detected-dubious-ownership-in-repository">fatal: detecteddubious ownership in repository</h5><p><a href="https://stackoverflow.com/questions/73408170/git-fatal-detected-dubious-ownership">参考博客</a></p><img src="/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/202407281829173.png" class width="202407281829173"><ul><li>解决方法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --add safe.directory *<br></code></pre></td></tr></table></figure><h5 id="安装-pandoc运行-pandoc-有误说找不到命令">安装 Pandoc，运行Pandoc 有误，说找不到命令</h5><blockquote><p>主要问题是我的 360 会自动删除 pandoc.exe,我在 360软件管家中的隔离区恢复了就行</p></blockquote><p><a href="https://github.com/jgm/pandoc/blob/master/INSTALL.md">pandoc安装地址</a></p><p>正常安装是有下面的四个文件，如果少了 exe 需要按照上面的进行恢复</p><img src="/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/202407281832443.png" class width="202407281832443"><h5 id="hexo-使用-markdown-插入图片无法显示解决方法">Hexo 使用 markdown插入图片无法显示解决方法</h5><p><a href="https://www.jianshu.com/p/04814a816caf">参考博客</a></p><ul><li><p>安装插件</p><ul><li><p>先进入自己 blog 的目录 <img src="/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240728203701626.png" class title="image-20240728203701626"></p></li><li><p>用命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install https://github.com/7ym0n/hexo-asset-image --save<br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改 hexo 根目录下的_config.yml 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">post_asset_folder: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br>url: http://yourname.github.io<br></code></pre></td></tr></table></figure></li><li><p>插入图片</p><ul><li>我用的是 typora，直接设置如下，然后复制图片，直接到文件中即可</li></ul><img src="/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240728204034558.png" class title="image-20240728204034558"><img src="/2024/07/28/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20240728204107912.png" class title="image-20240728204107912"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">![xx](xx/xx.png)<br></code></pre></td></tr></table></figure></li></ul><h4 id="其他可能用得上的网址">其他可能用得上的网址</h4><p><a href="https://hexo.io/zh-cn/docs">Hexo 官方中文文档</a> <a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/28/hello-world/"/>
    <url>/2024/07/28/hello-world/</url>
    
    <content type="html"><![CDATA[<h4 id="博客信息">博客信息</h4><p>域名：wing2791.cn</p><ul><li>已经弃用，但是域名尚未过期（20240728 注释）</li></ul><p>博客创建时间：2021 年 11 月</p><ul><li>最初的博客服务器快过期了，也不想续费了，转移到 github上了，后续会慢慢把笔记转移到这里</li></ul><p>网站负责人：wing2791</p><p>联系方式：</p><p>邮箱：wing2791@163.com B 站：<a href="https://space.bilibili.com/384847565">wing2791</a></p><h5 id="博客主要内容">博客主要内容</h5><p>2022 年：打算添加自己平时学习的笔记，包括但不限于代码-杂谈。</p><p>2023 年：</p><ul><li>笔记（包含编程学习等）</li><li>杂谈（某个游戏或者动画自己的看法，小破网站应该没人知道吧，我写的保守点吧）</li></ul><p>2024 年:</p><ul><li>笔记（包含编程学习，论文阅读）</li><li>杂谈（某个游戏或者动画自己的看法，小破网站应该没人知道吧，我写的保守点吧）</li><li>成长</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
