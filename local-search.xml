<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/24/%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80_inline,%20const,%20static/"/>
    <url>/2024/10/24/%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80_inline,%20const,%20static/</url>
    
    <content type="html"><![CDATA[<h1 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h1><p>C++将内联函数的代码组合到程序中，可以提高程序运行的速度。<br>语法：在函数声明和定义前加上关键字 inline。<br><code>通常的做法是将函数声明和定义都写在头文件（当然都写在源文件也行）。目的是为了避免函数重定义的问题</code></p><h3 id="正确的-inline-例子"><a href="#正确的-inline-例子" class="headerlink" title="正确的 inline 例子"></a>正确的 inline 例子</h3><ul><li><p>文件结构如图所示<br><a href="https://imgse.com/i/pAwMuMq"><img src="https://s21.ax1x.com/2024/10/24/pAwMuMq.png" alt="pAwMuMq.png"></a></p></li><li><p>代码示例<br>my_inline.h</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from version 1!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_inline.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">sayHello</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>my_inline.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 空的</span><br></code></pre></td></tr></table></figure><h3 id="错误的-inline-例子"><a href="#错误的-inline-例子" class="headerlink" title="错误的 inline 例子"></a>错误的 inline 例子</h3><blockquote><p>内联函数就是编译器将函数体（{…}之间的内容）在函数调用处展开，其实可以类比于#define 宏定义那种替换，来免去函数调用的开销。如果普通函数定义在头文件中，所有 include 该头文件的编译单元都可以正确找到函数定义。然而，如果内联函数 fun()定义在某个编译单元 A 中，那么其他编译单元中调用 fun()的地方将无法解析该符号，因为在编译单元 A 生成目标文件 A.obj 后，内联函数 fun()已经被替换掉，A.obj 中不再有 fun 这个符号，链接器自然无法解析。<br>上面的意思我的理解为是，下面的 sayHello 在 my_inline.cpp 中编译后，就不叫 sayHello()了，而 main 函数中仍然需要链接这个 sayHello()函数体，找不到，所以报错。具体不管，反正意思就是不能分开写</p></blockquote><p>原文链接：<br>my_inline.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_inline.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">sayHello</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>my_inline.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_inline.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from version 1!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译期间报错<br><a href="https://imgse.com/i/pAwMKs0"><img src="https://s21.ax1x.com/2024/10/24/pAwMKs0.png" alt="pAwMKs0.png"></a></p><h3 id="正确的普通函数例子"><a href="#正确的普通函数例子" class="headerlink" title="正确的普通函数例子"></a>正确的普通函数例子</h3><ul><li>代码示例<br>my_inline.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_inline.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">sayHello</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>my_inline.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;my_inline.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sayHello</span><span class="hljs-params">()</span> </span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Hello from version 1!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>内联函数节省时间，但消耗内存。</li><li>如果函数过大，编译器可能不将其作为内联函数。</li><li>内联函数不能递归。我试了可以写递归，估计被优化成普通函数了</li></ul><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><h3 id="1-修饰普通变量"><a href="#1-修饰普通变量" class="headerlink" title="1. 修饰普通变量"></a>1. <strong>修饰普通变量</strong></h3><ul><li>当<code>const</code>修饰一个变量时，该变量在声明时需要初始化，并且在之后的程序执行过程中，其值不能被改变。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxValue = <span class="hljs-number">100</span>;<br><span class="hljs-comment">// maxValue = 200; // 错误，无法修改const变量的值</span><br></code></pre></td></tr></table></figure><ul><li>使用<code>const</code>修饰变量可以增强代码的安全性，防止在无意中修改不应该更改的值。</li></ul><h3 id="2-修饰指针"><a href="#2-修饰指针" class="headerlink" title="2. 修饰指针"></a>2. <strong>修饰指针</strong></h3><p><code>const</code>在指针声明中可以有多种组合方式，分别用于不同的用途：</p><ul><li><strong>指向常量的指针</strong>（<code>const T*</code> 或 <code>T const*</code>）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* ptr = &amp;maxValue; <span class="hljs-comment">// 或 int const* ptr = &amp;maxValue;</span><br><span class="hljs-comment">// *ptr = 10; // 错误，无法通过ptr修改指向的值</span><br>ptr = &amp;anotherValue; <span class="hljs-comment">// 可以修改指针本身，指向不同地址</span><br></code></pre></td></tr></table></figure><ul><li><strong>常量指针</strong>（<code>T* const</code>）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> ptr = &amp;value;<br>*ptr = <span class="hljs-number">20</span>; <span class="hljs-comment">// 可以修改指向的值</span><br><span class="hljs-comment">// ptr = &amp;anotherValue; // 错误，不能修改指针本身</span><br></code></pre></td></tr></table></figure><ul><li><strong>指向常量的常量指针</strong>（<code>const T* const</code> 或 <code>T const* const</code>）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span>* <span class="hljs-type">const</span> ptr = &amp;maxValue;<br><span class="hljs-comment">// *ptr = 20; // 错误，无法修改指向的值</span><br><span class="hljs-comment">// ptr = &amp;anotherValue; // 错误，无法修改指针本身</span><br></code></pre></td></tr></table></figure><h3 id="3-修饰函数参数"><a href="#3-修饰函数参数" class="headerlink" title="3. 修饰函数参数"></a>3. <strong>修饰函数参数</strong></h3><ul><li>当函数参数是一个指针或引用时，<code>const</code>可以保证在函数内部不修改该参数的值。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; value)</span> </span>&#123;<br>    <span class="hljs-comment">// value = 10; // 错误，无法修改值</span><br>    std::cout &lt;&lt; value &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-修饰函数返回值"><a href="#4-修饰函数返回值" class="headerlink" title="4. 修饰函数返回值"></a>4. <strong>修饰函数返回值</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> value; <span class="hljs-comment">// 返回一个可修改的引用</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; <span class="hljs-title">getConstValue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> value; <span class="hljs-comment">// 返回一个不可修改的引用</span><br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>MyClass obj;<br>obj.<span class="hljs-built_in">getValue</span>() = <span class="hljs-number">20</span>;       <span class="hljs-comment">// 允许，修改了value</span><br>cout &lt;&lt; obj.<span class="hljs-built_in">getValue</span>() &lt;&lt; endl;<br><span class="hljs-comment">//obj.getConstValue() = 30;  // 错误，返回的引用是const，无法修改</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-修饰类的成员函数"><a href="#5-修饰类的成员函数" class="headerlink" title="5. 修饰类的成员函数"></a>5. <strong>修饰类的成员函数</strong></h3><ul><li>当<code>const</code>修饰成员函数时，表示该函数不会修改类的成员变量。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-comment">// value = 190; // 报错，不允许修改，const去掉可以修改</span><br><span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>MyClass obj;<br><span class="hljs-comment">// obj.getValue() = 20;       // 错误，const去掉可以修改，同时需要将上面的int getValue()函数改为int&amp; getValue()</span><br>cout &lt;&lt; obj.<span class="hljs-built_in">getValue</span>() &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-如果引用的数据对象类型不匹配，当引用为-const-时，C-将创建临时变量，让引用指向临时变量"><a href="#6-如果引用的数据对象类型不匹配，当引用为-const-时，C-将创建临时变量，让引用指向临时变量" class="headerlink" title="6. 如果引用的数据对象类型不匹配，当引用为 const 时，C++将创建临时变量，让引用指向临时变量"></a>6. 如果引用的数据对象类型不匹配，当引用为 const 时，C++将创建临时变量，让引用指向临时变量</h3><ul><li>先看最下面的例子</li><li><code>int&amp;</code>定义一个变量 ra，赋值为 8。但是报错。这是因为引用(reference，表现就是&amp;表示引用)必须绑定到一个有效的变量（左值），而不能绑定到右值上。</li><li>在 C++中，引用是一种<strong>别名</strong>，它需要指向一个<strong>已存在的变量</strong>（左值），而不是一个<strong>临时的或字面值的常量</strong>（右值）。像<code>8</code>这样的字面值属于右值，没有实际的内存地址，因此不能为其创建引用【引用本质还就是指针】</li><li>正确的做法<br>引用应该绑定到一个变量，例如：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> x = <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span>&amp; ra = x; <span class="hljs-comment">// 正确，引用ra绑定到变量x</span><br></code></pre></td></tr></table></figure>这样，<code>ra</code>成为<code>x</code>的别名，通过<code>ra</code>可以读取或修改<code>x</code>的值。</li><li>特例：<code>const</code>引用<br>如果需要引用一个字面值（右值），可以使用<code>const</code>引用，因为 C++允许<code>const</code>引用绑定到右值。这样做是安全的，因为<code>const</code>引用不能修改右值。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ra = <span class="hljs-number">8</span>; <span class="hljs-comment">// 正确，const引用可以绑定到字面值</span><br></code></pre></td></tr></table></figure>在这种情况下，编译器会创建一个临时对象来存储字面值<code>8</code>，然后<code>const</code>引用<code>ra</code>绑定到这个临时对象。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// int&amp; ra = 8;// 报错</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ra = <span class="hljs-number">8</span>; <span class="hljs-comment">// 正常</span><br><span class="hljs-comment">// 等价于下面两行</span><br><span class="hljs-type">int</span> tmp = <span class="hljs-number">8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ra = tmp;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>来，升级一下</li><li>原理和上面一样，不过变成了函数的参数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; no)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;no:&quot;</span> &lt;&lt; no &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; no)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;no:&quot;</span> &lt;&lt; no &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">func</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">// func2(1); 报错</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>解释一下 word 中的三句话<br>什么时候将创建临时变量呢？</p><ul><li><ol><li>引用是 const<br>就是上面的例子，不再解释啦</li></ol></li><li><ol start="2"><li>数据对象的类型是正确的，但不是左值。<br>就是上面的例子，不再解释啦<br>解释一下什么叫正确的</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// int&amp; ra = 8;// 报错</span><br><span class="hljs-comment">// const int&amp; ra = &quot;123&quot;; // const char* 类型不能够给const int&amp;赋值</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ra = <span class="hljs-number">1</span>;<span class="hljs-comment">// 可以</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><ol start="3"><li>数据对象的类型不正确，但可以转换为正确的类型</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; ra = <span class="hljs-string">&#x27;X&#x27;</span>; <span class="hljs-comment">// char可以转换为int类型，char可以理解为无符号的1字节整数</span><br>cout &lt;&lt; ra &lt;&lt; endl;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-type">int</span> temp = <span class="hljs-string">&#x27;X&#x27;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> rs = temp;<br>cout &lt;&lt; rs &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul><li>只解释下面两句话，其他的看 word 吧<ul><li>在静态成员函数中，只能访问静态成员，不能访问非静态成员</li><li>静态成员函数中没有 this 指针</li></ul></li></ul><blockquote><p>在 C++中，静态成员函数只能访问静态成员，不能直接访问非静态成员。这是因为静态成员函数属于类本身，而不是类的某个对象。静态成员函数没有 <code>this</code> 指针，因此无法访问特定对象的成员变量或调用非静态成员函数。</p></blockquote><h3 id="解释原因："><a href="#解释原因：" class="headerlink" title="解释原因："></a>解释原因：</h3><ol><li><strong>静态成员函数与类关联，而非对象关联</strong>：<ul><li>静态成员函数是属于类本身的，不需要创建类的对象就可以调用。因为它不属于任何对象实例，所以在静态成员函数中无法访问与对象实例相关的非静态成员。</li></ul></li><li><strong>没有 <code>this</code> 指针</strong>：<ul><li>非静态成员函数隐式地包含了一个指向调用对象的 <code>this</code> 指针，可以用来访问该对象的成员。而静态成员函数没有 <code>this</code> 指针，因为它与具体的对象实例无关，无法获取或操作非静态成员。</li></ul></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">int</span> nonStaticMember; <span class="hljs-comment">// 非静态成员变量</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> staticMember; <span class="hljs-comment">// 静态成员变量</span><br><br><span class="hljs-built_in">MyClass</span>(<span class="hljs-type">int</span> val) : <span class="hljs-built_in">nonStaticMember</span>(val) &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">staticFunction</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// std::cout &lt;&lt; nonStaticMember; // 错误：无法访问非静态成员</span><br><span class="hljs-comment">// this只能用于非静态成员函数内部</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Static member: &quot;</span> &lt;&lt; staticMember &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nonStaticFunction</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 可以访问静态和非静态成员</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Non-static member: &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;nonStaticMember &lt;&lt; std::endl;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;Static member: &quot;</span> &lt;&lt; staticMember &lt;&lt; std::endl;<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">// 初始化静态成员变量</span><br><span class="hljs-type">int</span> MyClass::staticMember = <span class="hljs-number">10</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">MyClass <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">5</span>)</span></span>;<br>MyClass::<span class="hljs-built_in">staticFunction</span>(); <span class="hljs-comment">// 调用静态成员函数</span><br>obj.<span class="hljs-built_in">nonStaticFunction</span>();   <span class="hljs-comment">// 调用非静态成员函数</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Static</span> <span class="hljs-keyword">member</span>: <span class="hljs-number">10</span><br>Non<span class="hljs-operator">-</span><span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span>: <span class="hljs-number">5</span><br><span class="hljs-keyword">Static</span> <span class="hljs-keyword">member</span>: <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>在 <code>staticFunction</code> 中，尝试访问 <code>nonStaticMember</code> 会导致编译错误，因为它是非静态成员。</li><li>在 <code>nonStaticFunction</code> 中，可以同时访问静态成员和非静态成员，因为此函数属于某个对象实例，有 <code>this</code> 指针。<br>静态成员函数的主要用途是与类相关的操作，而非对象的具体状态</li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="1-宏定义的位置"><a href="#1-宏定义的位置" class="headerlink" title="1. 宏定义的位置"></a>1. 宏定义的位置</h3><blockquote><p>宏定义建议写在头文件，源文件也没事，和普通函数一样</p></blockquote><h3 id="2-如何调用不同的重载，const-和非-const"><a href="#2-如何调用不同的重载，const-和非-const" class="headerlink" title="2. 如何调用不同的重载，const 和非 const"></a>2. 如何调用不同的重载，const 和非 const</h3><p>有下面的类，如何调用不同的重载呢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Array</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> index) &#123;<br>        <span class="hljs-keyword">return</span> data[index]; <span class="hljs-comment">// 返回可修改的引用</span><br>    &#125;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> index) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> data[index]; <span class="hljs-comment">// 返回只读引用</span><br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">10</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li><p><strong>调用第一个版本（返回可修改引用）</strong>：</p><ul><li>当对象是<strong>非<code>const</code>类型</strong>时，将调用第一个<code>operator[]</code>，即返回一个可修改的引用。</li><li>这种情况下，调用者可以通过返回的引用来修改数组中的元素。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Array arr;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>; <span class="hljs-comment">// 非const对象，调用第一个operator[]，可以修改元素</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>调用第二个版本（返回只读引用）</strong>：</p><ul><li>当对象是**<code>const</code>类型**时，将调用第二个<code>operator[]</code>，即返回一个只读的引用。</li><li>在这种情况下，调用者只能读取数组中的元素，而不能对其进行修改。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> Array arr;<br><span class="hljs-type">int</span> value = arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// const对象，调用第二个operator[]，只能读取元素</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">20</span>;        <span class="hljs-comment">// 错误，无法修改const对象的元素</span><br></code></pre></td></tr></table></figure><h3 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h3><ul><li><strong>编译器根据对象的类型（是否为<code>const</code>）自动选择合适的<code>operator[]</code>重载</strong>：<ul><li>如果对象是<code>const</code>，则只能调用<code>const</code>成员函数，因此会选择<code>const int&amp; operator[](size_t index) const</code>。</li><li>如果对象是非<code>const</code>，则会优先选择<code>int&amp; operator[](size_t index)</code>，因为它允许修改数据。</li></ul></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>下面是完整的示例代码来展示这两种情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Array</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> index) &#123;<br>        <span class="hljs-keyword">return</span> data[index]; <span class="hljs-comment">// 返回可修改的引用</span><br>    &#125;<br><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-type">size_t</span> index) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> data[index]; <span class="hljs-comment">// 返回只读引用</span><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Array arr;<br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>; <span class="hljs-comment">// 非const对象，调用第一个operator[]，可以修改元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;arr[0] = &quot;</span> &lt;&lt; arr[<span class="hljs-number">0</span>] &lt;&lt; std::endl; <span class="hljs-comment">// 输出：arr[0] = 42</span><br><br>    <span class="hljs-type">const</span> Array constArr;<br>    <span class="hljs-type">int</span> value = constArr[<span class="hljs-number">0</span>]; <span class="hljs-comment">// const对象，调用第二个operator[]，只能读取元素</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;constArr[0] = &quot;</span> &lt;&lt; value &lt;&lt; std::endl; <span class="hljs-comment">// 输出：constArr[0] = 0</span><br><br>    <span class="hljs-comment">// constArr[0] = 100; // 错误，无法修改const对象的元素</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>arr[0] = 42</code>修改了非<code>const</code>对象的元素，而<code>constArr[0]</code>只读取了<code>const</code>对象的元素。</p><h3 id="3-左值和右值"><a href="#3-左值和右值" class="headerlink" title="3. 左值和右值"></a>3. 左值和右值</h3><p>左值是可以被引用的数据对象，可以通过地址访问它们，例如：变量、数组元素、结构体成员、引用和解引用的指针。也就是可以出现在等于号左边，或者可以用&amp;取地址</p><p>非左值(右值)包括字面常量（用双引号包含的字符串除外）和包含多项的表达式。也就是不可以出现在等于号左边，或者不可以用&amp;取地址</p><p><code>字符串常量</code>（例如 <code>&quot;Hello, world!&quot;</code>）在 C++中是一个<strong>右值</strong>。它是存储在只读内存中的字符数组的地址，表示一个不可修改的字符序列。</p><h3 id="4-为什么字符串常量是右值？"><a href="#4-为什么字符串常量是右值？" class="headerlink" title="4. 为什么字符串常量是右值？"></a>4. 为什么<code>字符串常量</code>是右值？</h3><ul><li><strong>右值</strong>通常是指无法在程序中获取其内存地址的值或者在求值过程中生成的临时值，而字符串常量就是这样。它是一个临时的、不可修改的对象，其类型是 <code>const char[N]</code>，其中 <code>N</code> 是字符串的长度加上终止符 <code>\0</code>。</li><li>字符串常量本质上存储在只读内存区域，因此不能被修改，这是右值的典型特征。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br></code></pre></td></tr></table></figure><p>这里，字符串常量 <code>&quot;Hello, world!&quot;</code> 是一个右值，它的地址被赋值给了指针 <code>str</code>。虽然可以通过 <code>str</code> 访问字符串数据，但字符串本身是不可修改的。</p><h4 id="特例"><a href="#特例" class="headerlink" title="特例"></a>特例</h4><p>在某些情况下，字符串常量可以被视为<strong>左值</strong>，例如，当它被作为数组来使用时，字符串常量可以退化为指针（指向它的第一个字符），从而在一些表达式中可以像左值一样使用。但本质上，它仍然是只读的。</p><h5 id="举例子"><a href="#举例子" class="headerlink" title="举例子"></a>举例子</h5><p>字符串常量在某些表达式中可以表现得像左值，这是因为它会<strong>退化为指针</strong>，指向字符串的第一个字符。尽管如此，字符串常量本身仍然是不可修改的（即指针指向的内容是只读的）。下面是一些可以表现得像左值的例子：</p><h6 id="示例-1：作为数组的首地址使用"><a href="#示例-1：作为数组的首地址使用" class="headerlink" title="示例 1：作为数组的首地址使用"></a>示例 1：作为数组的首地址使用</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = <span class="hljs-string">&quot;Hello, world!&quot;</span>; <span class="hljs-comment">// &quot;Hello, world!&quot; 退化为指针，指向字符串的首地址</span><br>    std::cout &lt;&lt; p &lt;&lt; std::endl;     <span class="hljs-comment">// 输出整个字符串</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，字符串常量 <code>&quot;Hello, world!&quot;</code> 退化为指针 <code>const char*</code>，其值是字符串的首地址，因此可以像左值那样使用 <code>p</code>，但字符串的内容是不可修改的。</p><h6 id="示例-2：作为数组元素的首地址"><a href="#示例-2：作为数组元素的首地址" class="headerlink" title="示例 2：作为数组元素的首地址"></a>示例 2：作为数组元素的首地址</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br>    std::cout &lt;&lt; str[<span class="hljs-number">0</span>] &lt;&lt; std::endl; <span class="hljs-comment">// 输出 &#x27;H&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里，<code>str[0]</code> 表达式访问的是字符串常量中第一个字符 <code>&#39;H&#39;</code>，字符串常量退化为指针后表现得像一个数组的首地址，可以使用数组下标访问字符。</p><h6 id="示例-3：传递给函数"><a href="#示例-3：传递给函数" class="headerlink" title="示例 3：传递给函数"></a>示例 3：传递给函数</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printString</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s)</span> </span>&#123;<br>    std::cout &lt;&lt; s &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printString</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span>); <span class="hljs-comment">// 字符串常量退化为指针传递给函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，字符串常量 <code>&quot;Hello, world!&quot;</code> 退化为指针并作为参数传递给函数 <code>printString</code>，在函数内表现得像一个指针的左值。</p><h3 id="5-利用-static-的特性，实现单例"><a href="#5-利用-static-的特性，实现单例" class="headerlink" title="5. 利用 static 的特性，实现单例"></a>5. 利用 static 的特性，实现单例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonStaticLocal</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-built_in">SingletonStaticLocal</span>() &#123;&#125;<br><span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">static</span> SingletonStaticLocal&amp; <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 由于静态局部变量只会在第一次进入其所在的函数时被初始化一次，后续的函数调用会直接返回已经初始化的 `instance`，这就是为什么 `static SingletonStaticLocal instance;` 只会执行一次。这样可以确保类始终只有一个实例，从而实现单例模式。也是延迟加载，因为只会在第一次进入其所在的函数时被初始化一次</span><br><span class="hljs-type">static</span> SingletonStaticLocal instance;  <span class="hljs-comment">// 静态局部变量</span><br><span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">someMethod</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 这里是你想要定义的方法</span><br><span class="hljs-comment">// 执行某些操作</span><br>cout &lt;&lt; value &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setNum</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br><span class="hljs-keyword">this</span>-&gt;value = value;<br>&#125;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 这里要声明为引用</span><br>SingletonStaticLocal&amp; instance = SingletonStaticLocal::<span class="hljs-built_in">getInstance</span>();<br><span class="hljs-comment">// 输出地址，是一样的，表示是同一个实例</span><br>cout &lt;&lt; &amp;SingletonStaticLocal::<span class="hljs-built_in">getInstance</span>() &lt;&lt; endl;<br>cout &lt;&lt; &amp;instance &lt;&lt; endl;<br>instance.<span class="hljs-built_in">someMethod</span>();<br>instance.<span class="hljs-built_in">setNum</span>(<span class="hljs-number">2</span>);<br><br>SingletonStaticLocal&amp; instance2 = SingletonStaticLocal::<span class="hljs-built_in">getInstance</span>();<br>instance<span class="hljs-number">2.</span><span class="hljs-built_in">someMethod</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/tonywearme/article/details/7097910">inline 函数必须在头文件中定义吗？</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSharp知识整理</title>
    <link href="/2024/10/19/CSharp%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/2024/10/19/CSharp%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h1><table><thead><tr><th>数据类型</th><th>占用字节数</th><th>数据范围</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>bool</td><td>1</td><td>true 或 false</td><td>布尔类型，表示真或假</td><td>bool isActive &#x3D; true;</td></tr><tr><td>byte</td><td>1</td><td>0 到 255</td><td>无符号 8 位整数</td><td>byte age &#x3D; 25;</td></tr><tr><td>sbyte</td><td>1</td><td>-128 到 127</td><td>有符号 8 位整数</td><td>sbyte temperature &#x3D; -10;</td></tr><tr><td>char</td><td>2</td><td>‘\u0000’ (0) 到 ‘\uffff’ (65535)</td><td>Unicode 字符（16 位）</td><td>char letter &#x3D; ‘A’;</td></tr><tr><td>short</td><td>2</td><td>-32,768 到 32,767</td><td>有符号 16 位整数</td><td>short distance &#x3D; -32000;</td></tr><tr><td>ushort</td><td>2</td><td>0 到 65,535</td><td>无符号 16 位整数</td><td>ushort width &#x3D; 60000;</td></tr><tr><td>int</td><td>4</td><td>-2,147,483,648 到 2,147,483,647</td><td>有符号 32 位整数</td><td>int score &#x3D; 100;</td></tr><tr><td>uint</td><td>4</td><td>0 到 4,294,967,295</td><td>无符号 32 位整数</td><td>uint population &#x3D; 3000000000;</td></tr><tr><td>long</td><td>8</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td><td>有符号 64 位整数</td><td>long distanceToSun &#x3D; 150000000000L;</td></tr><tr><td>ulong</td><td>8</td><td>0 到 18,446,744,073,709,551,615</td><td>无符号 64 位整数</td><td>ulong starsInGalaxy &#x3D; 1000000000000UL;</td></tr><tr><td>float</td><td>4</td><td>±1.5 × 10^−45 到 ±3.4 × 10^38</td><td>单精度浮点数（32 位）</td><td>float price &#x3D; 19.99F;</td></tr><tr><td>double</td><td>8</td><td>±5.0 × 10^−324 到 ±1.7 × 10^308</td><td>双精度浮点数（64 位）</td><td>double pi &#x3D; 3.14159265359;</td></tr><tr><td>decimal</td><td>16</td><td>±1.0 × 10^−28 到 ±7.9228 × 10^28</td><td>高精度小数（128 位）</td><td>decimal balance &#x3D; 1000.75M;</td></tr><tr><td>string</td><td>不固定</td><td>根据字符数量变化</td><td>一组 Unicode 字符（文本）</td><td>string name &#x3D; “John Doe”;</td></tr></tbody></table><h2 id="char-是-2-字节"><a href="#char-是-2-字节" class="headerlink" title="char 是 2 字节"></a>char 是 2 字节</h2><p>在 C# 中，<code>char</code> 数据类型使用 2 字节（16 位）是因为它表示一个 Unicode 字符。Unicode 字符集比传统的 ASCII 字符集要大得多，能够表示全球范围内的各种字符和符号。为了支持这一广泛的字符集，C# 采用了 UTF-16 编码格式，其中每个 <code>char</code> 类型的字符占用 2 字节。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br><br>        <span class="hljs-built_in">char</span> c = <span class="hljs-string">&#x27;中&#x27;</span>;<br>        Console.WriteLine(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-原始字面量的使用"><a href="#2-原始字面量的使用" class="headerlink" title="2. 原始字面量的使用 @"></a>2. 原始字面量的使用 @</h1><p>在 C# 中，原始字面量的表示方式使用的是 <code>@</code> 符号，而不是 C++ 中的 <code>R</code>。这种方式主要用于字符串字面量，使得字符串中的反斜杠 <code>\</code> 和双引号 <code>&quot;</code> 不会被转义。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br><br>        <span class="hljs-built_in">string</span> path = <span class="hljs-string">@&quot;C:\Program Files\MyApp\config.json&quot;</span>;<br>        Console.WriteLine(path);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3. 枚举"></a>3. 枚举</h1><ul><li>声明位置<ul><li>namespace 语句块中(常用)</li><li>class 语句块中，struct 语句块中</li><li>但不能生命在声明语句块中（Main 函数也不行）</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-built_in">enum</span> E_number<br>    &#123;<br>        one = <span class="hljs-number">1</span>,<span class="hljs-comment">//默认从0开始</span><br>        two = <span class="hljs-number">2</span>,<br>        three,<br>        four,<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br><br>        E_number one = E_number.one;<br>        <span class="hljs-comment">// 枚举-&gt;int</span><br>        <span class="hljs-built_in">int</span> oneNum = (<span class="hljs-built_in">int</span>)one;<br>        Console.WriteLine(oneNum);<br>        <span class="hljs-comment">// int-&gt;枚举</span><br>        E_number two = (E_number)(<span class="hljs-number">2</span>);<br>        Console.WriteLine(two);<br>        <span class="hljs-comment">// 枚举-&gt;string</span><br>        <span class="hljs-built_in">string</span> oneStr = one.ToString();<br>        Console.WriteLine(oneStr);<br>        <span class="hljs-comment">// string-&gt;枚举</span><br>        one = (E_number)Enum.Parse(<span class="hljs-keyword">typeof</span>(E_number), oneStr);<br>        Console.WriteLine(one);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="4-string"><a href="#4-string" class="headerlink" title="4. string"></a>4. string</h1><p>在 C# 中，<code>string</code> 是一个用于表示文本的基本数据类型，属于引用类型。它是 .NET 中的 <code>System.String</code> 类的别名，并且是不可变（immutable）的。这意味着一旦创建了字符串对象，其内容就不能再修改。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><strong>不可变性</strong>：每当对字符串进行操作（如拼接、替换、截取等），都会生成一个新的字符串对象，而不是修改原有的字符串。</li><li><strong>引用类型</strong>：<code>string</code> 是一个引用类型，虽然它在使用上像值类型一样简单。</li><li><strong>支持字符串插值和格式化</strong>：C# 支持字符串插值（<code>$</code>）和格式化操作。</li><li>**可以为 <code>null</code>**：<code>string</code> 可以被赋值为 <code>null</code>，表示没有任何文本。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 定义字符串</span><br>        <span class="hljs-built_in">string</span> greeting = <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br><br>        <span class="hljs-comment">// 字符串拼接</span><br>        <span class="hljs-built_in">string</span> name = <span class="hljs-string">&quot;Alice&quot;</span>;<br>        <span class="hljs-built_in">string</span> message = greeting + <span class="hljs-string">&quot; My name is &quot;</span> + name + <span class="hljs-string">&quot;.&quot;</span>;<br>        Console.WriteLine(message);<br><br>        <span class="hljs-comment">// 使用字符串插值</span><br>        <span class="hljs-built_in">string</span> interpolatedMessage = <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;greeting&#125;</span> My name is <span class="hljs-subst">&#123;name&#125;</span>.&quot;</span>;<br>        Console.WriteLine(interpolatedMessage);<br><br>        <span class="hljs-comment">// 字符串长度</span><br>        <span class="hljs-built_in">int</span> length = greeting.Length;<br>        Console.WriteLine(<span class="hljs-string">$&quot;Length of greeting: <span class="hljs-subst">&#123;length&#125;</span>&quot;</span>);<br><br>        <span class="hljs-comment">// 字符串替换</span><br>        <span class="hljs-built_in">string</span> newGreeting = greeting.Replace(<span class="hljs-string">&quot;World&quot;</span>, <span class="hljs-string">&quot;C#&quot;</span>);<br>        Console.WriteLine(newGreeting);<br><br>        <span class="hljs-comment">// 空字符串和 null</span><br>        <span class="hljs-built_in">string</span> emptyString = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-built_in">string</span>? nullString = <span class="hljs-literal">null</span>;<span class="hljs-comment">//表示可以是null的string类型</span><br>        Console.WriteLine(<span class="hljs-string">$&quot;Is empty string empty? <span class="hljs-subst">&#123;<span class="hljs-built_in">string</span>.IsNullOrEmpty(emptyString)&#125;</span>&quot;</span>);<br>        Console.WriteLine(<span class="hljs-string">$&quot;Is null string null? <span class="hljs-subst">&#123;nullString == <span class="hljs-literal">null</span>&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><strong>定义字符串</strong>：可以使用双引号定义字符串，如 <code>&quot;Hello, World!&quot;</code>。</li><li><strong>拼接字符串</strong>：使用 <code>+</code> 运算符或字符串插值（<code>$</code>）来拼接字符串。</li><li><strong>字符串长度</strong>：通过 <code>Length</code> 属性可以获取字符串的字符数。</li><li><strong>字符串替换</strong>：使用 <code>Replace</code> 方法替换字符串中的某些内容。</li><li>**空字符串和 <code>null</code>**：C# 提供了 <code>string.IsNullOrEmpty</code> 方法来检查字符串是否为空或 <code>null</code>。</li></ul><h3 id="不可变性示例"><a href="#不可变性示例" class="headerlink" title="不可变性示例"></a>不可变性示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> original = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-built_in">string</span> modified = original.Replace(<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>);<br><br>Console.WriteLine(original); <span class="hljs-comment">// 输出: Hello</span><br>Console.WriteLine(modified); <span class="hljs-comment">// 输出: Jello</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Replace</code> 方法不会修改 <code>original</code>，而是创建一个新的字符串 <code>modified</code>。</p><h1 id="5-StringBuilder"><a href="#5-StringBuilder" class="headerlink" title="5. StringBuilder"></a>5. StringBuilder</h1><p><code>StringBuilder</code> 是 C# 中用于处理可变字符串的类。与 <code>string</code> 不同，<code>StringBuilder</code> 允许在不创建新对象的情况下修改字符串内容，从而在频繁拼接、追加或插入操作时提高性能。</p><h3 id="为什么使用-StringBuilder"><a href="#为什么使用-StringBuilder" class="headerlink" title="为什么使用 StringBuilder"></a>为什么使用 <code>StringBuilder</code></h3><p>由于 <code>string</code> 是不可变的，每次修改字符串都会创建一个新的 <code>string</code> 对象。在大量拼接操作时，这种重复的创建和销毁会导致性能下降和内存浪费。而 <code>StringBuilder</code> 可以动态地修改字符串内容，不会创建多个字符串对象，能够显著提升性能。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 创建一个 StringBuilder 对象</span><br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;Hello&quot;</span>);<br><br>        <span class="hljs-comment">// 追加字符串</span><br>        sb.Append(<span class="hljs-string">&quot;, World!&quot;</span>);<br>        Console.WriteLine(sb.ToString()); <span class="hljs-comment">// 输出: Hello, World!</span><br><br>        <span class="hljs-comment">// 插入字符串</span><br>        sb.Insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot; C#&quot;</span>);<br>        Console.WriteLine(sb.ToString()); <span class="hljs-comment">// 输出: Hello C#, World!</span><br><br>        <span class="hljs-comment">// 替换字符串</span><br>        sb.Replace(<span class="hljs-string">&quot;World&quot;</span>, <span class="hljs-string">&quot;StringBuilder&quot;</span>);<br>        Console.WriteLine(sb.ToString()); <span class="hljs-comment">// 输出: Hello C#, StringBuilder!</span><br><br>        <span class="hljs-comment">// 删除字符串</span><br>        sb.Remove(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 删除从索引5开始的3个字符</span><br>        Console.WriteLine(sb.ToString()); <span class="hljs-comment">// 输出: Hello, StringBuilder!</span><br><br>        <span class="hljs-comment">// 清空 StringBuilder</span><br>        sb.Clear();<br>        Console.WriteLine(<span class="hljs-string">$&quot;Length after clearing: <span class="hljs-subst">&#123;sb.Length&#125;</span>&quot;</span>); <span class="hljs-comment">// 输出: Length after clearing: 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li><strong><code>Append(string value)</code></strong>: 追加字符串到当前 <code>StringBuilder</code> 实例的末尾。</li><li><strong><code>Insert(int index, string value)</code></strong>: 在指定索引处插入字符串。</li><li><strong><code>Replace(string oldValue, string newValue)</code></strong>: 将指定的字符串替换为新的字符串。</li><li><strong><code>Remove(int startIndex, int length)</code></strong>: 删除从指定位置开始的指定长度的字符。</li><li><strong><code>Clear()</code></strong>: 清空 <code>StringBuilder</code> 内容。</li><li><strong><code>ToString()</code></strong>: 将 <code>StringBuilder</code> 对象转换为 <code>string</code>。</li></ol><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><ul><li><strong><code>string</code> 拼接</strong>:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">string</span> result = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)<br>&#123;<br>    result += <span class="hljs-string">&quot;Hello &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">每次循环都会创建一个新的 `string`，性能较差。</code></pre><ul><li><strong>使用 <code>StringBuilder</code></strong>:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++)<br>&#123;<br>    sb.Append(<span class="hljs-string">&quot;Hello &quot;</span>);<br>&#125;<br><span class="hljs-built_in">string</span> result = sb.ToString();<br></code></pre></td></tr></table></figure><pre><code class="hljs">这种方式性能更好，因为 `StringBuilder` 可以动态地扩展内存，减少不必要的对象创建。</code></pre><h3 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h3><p>可以通过指定初始容量来提高性能：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-number">100</span>); <span class="hljs-comment">// 预分配100个字符的空间</span><br></code></pre></td></tr></table></figure><h1 id="6-ref-和-out-的使用"><a href="#6-ref-和-out-的使用" class="headerlink" title="6. ref 和 out 的使用"></a>6. ref 和 out 的使用</h1><p>在 C# 中，<code>ref</code> 和 <code>out</code> 是两种用于参数传递的关键字，它们允许方法通过引用传递参数，而不是通过值传递。虽然这两者的作用相似，但在使用和语义上有一些重要的区别。</p><h3 id="1-ref-关键字"><a href="#1-ref-关键字" class="headerlink" title="1. ref 关键字"></a>1. <code>ref</code> 关键字</h3><ul><li><strong>定义</strong>: <code>ref</code> 关键字用于将参数作为引用传递给方法。这样在方法内对参数的任何修改都会影响到原始变量。</li><li><strong>要求</strong>: 在调用方法之前，必须先为参数赋值。</li><li><strong>用法</strong>:<ul><li>在方法定义中需要加上 <code>ref</code>。</li><li>在调用方法时也需要加上 <code>ref</code>。</li></ul></li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ModifyValue</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> number</span>)</span><br>    &#123;<br>        number += <span class="hljs-number">10</span>; <span class="hljs-comment">// 修改原始变量</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> myNumber = <span class="hljs-number">5</span>;<br>        ModifyValue(<span class="hljs-keyword">ref</span> myNumber);<br>        Console.WriteLine(myNumber); <span class="hljs-comment">// 输出 15</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-out-关键字"><a href="#2-out-关键字" class="headerlink" title="2. out 关键字"></a>2. <code>out</code> 关键字</h3><ul><li><strong>定义</strong>: <code>out</code> 关键字也用于将参数作为引用传递，但在方法内部，<code>out</code> 参数必须在方法返回之前进行赋值。</li><li><strong>要求</strong>: 在调用方法之前，无需为参数赋值（即使未赋值，也能正常工作）。但在方法内部，<code>out</code> 参数必须在方法返回之前进行赋值</li><li><strong>用法</strong>:<ul><li>在方法定义中需要加上 <code>out</code>。</li><li>在调用方法时也需要加上 <code>out</code>。</li></ul></li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetValues</span>(<span class="hljs-params"><span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> number</span>)</span><br>    &#123;<br>        number = <span class="hljs-number">42</span>; <span class="hljs-comment">// 必须在返回之前赋值</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> myNumber; <span class="hljs-comment">// 无需初始化</span><br>        GetValues(<span class="hljs-keyword">out</span> myNumber);<br>        Console.WriteLine(myNumber); <span class="hljs-comment">// 输出 42</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h3><table><thead><tr><th>特性</th><th><code>ref</code></th><th><code>out</code></th></tr></thead><tbody><tr><td>初始值要求</td><td>需要在调用前初始化</td><td>不需要初始化</td></tr><tr><td>赋值要求</td><td>可以在方法内修改，也可以不修改</td><td>必须在方法内赋值</td></tr><tr><td>语义</td><td>表示方法可能修改参数值</td><td>表示方法将输出一个值</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用 <code>ref</code> 可以在方法中修改传入的参数，并且调用方法之前需要初始化。</li><li>使用 <code>out</code> 适合用于返回多个值的场景，调用前不需要初始化，但必须在方法中赋值。</li><li>ref 和 out 可以作为重载的条件，但是两个不能同时用<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br></code></pre></td></tr></table></figure></li></ul><p>class Program<br>{<br>static void Main()<br>{<br>&#x2F;&#x2F; 调用带有 params 参数的方法<br>float f &#x3D; 1.0f;<br>CalcSum(ref f, 2);<br>}</p><pre><code class="hljs">static void CalcSum(ref float f, int a)&#123;    Console.WriteLine(f + a);    // 确保显示一位小数    Console.WriteLine((f + a).ToString(&quot;F1&quot;));//3.0&#125;// 两者ref和out不可以同时出现//static void CalcSum(out float f, int a)//&#123;//    Console.WriteLine(f + a);//&#125;</code></pre><p>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>- C++中&amp;可以作为重载的标准，<span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span>&amp; 指的是常数，<span class="hljs-built_in">int</span> 和 <span class="hljs-built_in">int</span>&amp;都可以指变量，用的时候会报错<br><br>`<span class="hljs-keyword">ref</span>` 和 `<span class="hljs-keyword">out</span>` 是两个英文单词的缩写，具体含义如下：<br><br><span class="hljs-number">1.</span> **`<span class="hljs-keyword">ref</span>`**：是 **<span class="hljs-string">&quot;reference&quot;</span>** 的缩写，表示引用。在参数传递中，`<span class="hljs-keyword">ref</span>` 表示该参数是通过引用传递的，这意味着方法内部对参数的修改会影响到原始变量。<br><span class="hljs-number">2.</span> **`<span class="hljs-keyword">out</span>`**：是 **<span class="hljs-string">&quot;output&quot;</span>** 的缩写，表示输出。`<span class="hljs-keyword">out</span>` 参数用于方法输出结果，表示该参数用于返回值，方法内部必须对其进行赋值。<br><br><span class="hljs-meta"># 7. params</span><br><br>在 C<span class="hljs-meta"># 中，`params` 关键字用于允许方法接受可变数量的参数。这使得可以将多个参数作为数组传递给方法，而无需明确地创建一个数组。这在需要处理不确定数量的参数时非常方便。</span><br><br><span class="hljs-meta">### 使用示例</span><br><br>以下是一个使用 `<span class="hljs-keyword">params</span>` 的示例：<br><br>```csharp<br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 调用带有 params 参数的方法</span><br>        PrintNumbers(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>        PrintNumbers(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        PrintNumbers(); <span class="hljs-comment">// 也可以传入零个参数</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrintNumbers</span>(<span class="hljs-params"><span class="hljs-keyword">params</span> <span class="hljs-built_in">int</span>[] numbers</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;Numbers received:&quot;</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> number <span class="hljs-keyword">in</span> numbers)<br>        &#123;<br>            Console.WriteLine(number);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul><li>在这个示例中，<code>PrintNumbers</code> 方法可以接受任意数量的整数作为参数。</li><li><code>params</code> 参数必须是方法参数列表中的最后一个参数。</li><li>你可以在调用 <code>PrintNumbers</code> 方法时传入任意数量的整数，包括零个。</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>使用 <code>params</code> 时，方法可以接收一个数组作为参数，或者可以接收单个值而不需要手动创建数组。</li><li>方法内部会将所有传入的参数封装为一个数组。</li><li>可变参数可以作为重载的条件</li></ul><h1 id="8-C-的结构体和-C-结构体区别"><a href="#8-C-的结构体和-C-结构体区别" class="headerlink" title="8. C++的结构体和 C#结构体区别"></a>8. C++的结构体和 C#结构体区别</h1><p>C++ 中的结构体和 C# 中的结构体有许多相似之处，但也有一些重要的区别。以下是对这两种语言中结构体的比较，涵盖定义、特性、构造函数、继承、访问控制等方面。</p><h3 id="C-中的结构体"><a href="#C-中的结构体" class="headerlink" title="C++ 中的结构体"></a>C++ 中的结构体</h3><ol><li><p><strong>定义</strong>：</p><ul><li>使用 <code>struct</code> 关键字定义结构体，可以包含成员变量和成员函数。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Point(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>访问控制</strong>：</p><ul><li>默认情况下，C++ 中结构体的成员是 <code>public</code>，可以从外部访问。</li></ul></li><li><p><strong>构造函数和析构函数</strong>：</p><ul><li>C++ 结构体可以有构造函数和析构函数，用于初始化和清理资源。</li></ul></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xCoord, <span class="hljs-type">int</span> yCoord) : <span class="hljs-built_in">x</span>(xCoord), <span class="hljs-built_in">y</span>(yCoord) &#123;&#125; <span class="hljs-comment">// 构造函数</span><br>    ~<span class="hljs-built_in">Point</span>() &#123;&#125; <span class="hljs-comment">// 析构函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>继承和多态</strong>：<ul><li>C++ 中的结构体支持继承和多态，结构体可以继承自其他结构体或类。</li></ul></li><li><strong>存储方式</strong>：<ul><li>C++ 中的结构体通常在栈上分配，但也可以通过指针在堆上动态分配。</li></ul></li><li>其他<ul><li>变量的定义不能是自己的结构体</li></ul></li></ol><h3 id="C-中的结构体-1"><a href="#C-中的结构体-1" class="headerlink" title="C# 中的结构体"></a>C# 中的结构体</h3><ol><li><p><strong>定义</strong>：</p><ul><li>使用 <code>struct</code> 关键字定义结构体。结构体是值类型，不能继承自其他结构体或类，但可以实现接口。</li></ul></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">struct</span> Point<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> y;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Point</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> xCoord, <span class="hljs-built_in">int</span> yCoord</span>) <span class="hljs-comment">// 可以有参数化构造函数</span></span><br>    &#123;<br>        x = xCoord;<br>        y = yCoord;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;Point(<span class="hljs-subst">&#123;x&#125;</span>, <span class="hljs-subst">&#123;y&#125;</span>)&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p><strong>访问控制</strong>：</p><ul><li>C# 中结构体的成员默认是 <code>private</code>，需要显式声明为 <code>public</code> 才能从外部访问。</li></ul></li><li><p><strong>构造函数</strong>：</p><ul><li>C# 结构体可以有参数化构造函数，但不能有无参数的构造函数。</li></ul></li><li><p><strong>继承</strong>：</p><ul><li>C# 中的结构体不能继承其他结构体或类，但可以实现接口。</li></ul></li><li><p><strong>存储方式</strong>：</p><ul><li>C# 中的结构体是值类型，存储在栈上，而引用类型（如类）则存储在堆上。</li></ul></li><li><p>其他</p><ul><li>变量的定义不能是自己的结构体</li><li>结构体中的变量不能直接初始化，否则初始化后，调用默认构造函数还是没用</li></ul></li></ol><h3 id="主要区别总结"><a href="#主要区别总结" class="headerlink" title="主要区别总结"></a>主要区别总结</h3><table><thead><tr><th>特性</th><th>C++ 结构体</th><th>C# 结构体</th></tr></thead><tbody><tr><td>定义</td><td>使用 <code>struct</code> 关键字</td><td>使用 <code>struct</code> 关键字</td></tr><tr><td>默认访问修饰符</td><td><code>public</code></td><td><code>private</code></td></tr><tr><td>构造函数</td><td>可以有参数化和无参数构造函数</td><td>可以有参数化构造函数，不能有无参数构造函数</td></tr><tr><td>继承</td><td>支持继承和多态</td><td>不支持继承，但可以实现接口</td></tr><tr><td>存储方式</td><td>通常在栈上，支持动态分配</td><td>是值类型，通常在栈上</td></tr><tr><td>成员函数</td><td>可以有成员函数</td><td>可以有方法</td></tr><tr><td>其他</td><td>变量的定义不能是自己的结构体，最后有一个分号</td><td>变量的定义不能是自己的结构体，结构体中的变量不能直接初始化</td></tr></tbody></table><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="C-结构体示例"><a href="#C-结构体示例" class="headerlink" title="C++ 结构体示例"></a>C++ 结构体示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xCoord, <span class="hljs-type">int</span> yCoord) : <span class="hljs-built_in">x</span>(xCoord), <span class="hljs-built_in">y</span>(yCoord) &#123;&#125; <span class="hljs-comment">// 构造函数</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Point(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span></span>; <span class="hljs-comment">// 创建结构体实例</span><br>    p.<span class="hljs-built_in">display</span>();   <span class="hljs-comment">// 输出: Point(1, 2)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-结构体示例-1"><a href="#C-结构体示例-1" class="headerlink" title="C# 结构体示例"></a>C# 结构体示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">struct</span> Point<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> y;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Point</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> xCoord, <span class="hljs-built_in">int</span> yCoord</span>) <span class="hljs-comment">// 构造函数</span></span><br>    &#123;<br>        x = xCoord;<br>        y = yCoord;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;Point(<span class="hljs-subst">&#123;x&#125;</span>, <span class="hljs-subst">&#123;y&#125;</span>)&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Point p = <span class="hljs-keyword">new</span> Point(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 创建结构体实例</span><br>        p.Display(); <span class="hljs-comment">// 输出: Point(1, 2)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9-默认值"><a href="#9-默认值" class="headerlink" title="9. 默认值"></a>9. 默认值</h1><ul><li>数字类型<ul><li>默认值为 0</li></ul></li><li>bool<ul><li>默认值为 false</li></ul></li><li>引用类型<ul><li>默认值为 null</li></ul></li><li>查看默认值<ul><li>default(数据类型)</li><li>default(int)</li></ul></li></ul><h1 id="10-class"><a href="#10-class" class="headerlink" title="10. class"></a>10. class</h1><p>在 C# 中，类（<code>class</code>）是用于创建对象的模板，它封装了数据和行为。类可以包含字段（成员变量）、属性、方法和事件。以下是对 C# 中类的基本概念、特性和示例的详细介绍：</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><strong>定义</strong>：类是自定义数据类型的蓝图，可以包含状态（字段）和行为（方法）。</li><li><strong>实例化</strong>：通过类创建对象实例，每个实例都可以独立地持有状态。</li></ul><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ol><li><p><strong>封装</strong>：</p><ul><li>类可以将数据和方法组合在一起，通过访问修饰符（如 <code>public</code>、<code>private</code>、<code>protected</code>）来控制对类成员的访问。</li></ul></li><li><p><strong>继承</strong>：</p><ul><li>类可以通过继承从其他类派生，复用代码并创建层次结构。</li><li>子类可以重写父类的方法，实现多态性。</li></ul></li><li><p><strong>多态性</strong>：</p><ul><li>通过虚方法（<code>virtual</code>）和重写方法（<code>override</code>），可以实现不同类对同一方法的不同实现。</li></ul></li><li><p><strong>抽象</strong>：</p><ul><li>抽象类（<code>abstract class</code>）可以定义一组方法，但不能直接实例化。</li></ul></li><li><p><strong>接口</strong>：</p><ul><li>接口（<code>interface</code>）定义了一组方法，但不实现它们。类可以实现多个接口。</li></ul></li></ol><h3 id="类的定义和使用示例"><a href="#类的定义和使用示例" class="headerlink" title="类的定义和使用示例"></a>类的定义和使用示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-comment">// 定义一个简单的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Car</span><br>&#123;<br>    <span class="hljs-comment">// 字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> make;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> model;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> year;<br><br>    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Make<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> make; &#125;<br>        <span class="hljs-keyword">set</span> &#123; make = <span class="hljs-keyword">value</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Model<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> model; &#125;<br>        <span class="hljs-keyword">set</span> &#123; model = <span class="hljs-keyword">value</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Year<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> year; &#125;<br>        <span class="hljs-keyword">set</span> &#123; year = <span class="hljs-keyword">value</span>; &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> make, <span class="hljs-built_in">string</span> model, <span class="hljs-built_in">int</span> year</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.make = make;<br>        <span class="hljs-keyword">this</span>.model = model;<br>        <span class="hljs-keyword">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-comment">// 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DisplayInfo</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;Car Info: <span class="hljs-subst">&#123;Year&#125;</span> <span class="hljs-subst">&#123;Make&#125;</span> <span class="hljs-subst">&#123;Model&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 创建 Car 类的实例</span><br>        Car myCar = <span class="hljs-keyword">new</span> Car(<span class="hljs-string">&quot;Toyota&quot;</span>, <span class="hljs-string">&quot;Camry&quot;</span>, <span class="hljs-number">2021</span>);<br>        myCar.DisplayInfo(); <span class="hljs-comment">// 输出: Car Info: 2021 Toyota Camry</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重要概念说明"><a href="#重要概念说明" class="headerlink" title="重要概念说明"></a>重要概念说明</h3><ul><li><strong>构造函数</strong>：<ul><li>特殊方法，在创建对象时被调用。可以用于初始化对象的状态。</li></ul></li><li><strong>析构函数</strong>：<ul><li>用于清理资源，类在不再需要时被销毁时调用（在 C# 中，通常使用 <code>IDisposable</code> 接口和 <code>using</code> 语句进行资源管理）。</li></ul></li><li><strong>静态成员</strong>：<ul><li>使用 <code>static</code> 修饰符定义的成员属于类本身，而不是类的实例。</li></ul></li></ul><h3 id="静态成员示例"><a href="#静态成员示例" class="headerlink" title="静态成员示例"></a>静态成员示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MathUtility</span><br>&#123;<br>    <span class="hljs-comment">// 静态方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a, <span class="hljs-built_in">int</span> b</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 调用静态方法</span><br>        <span class="hljs-built_in">int</span> result = MathUtility.Add(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>        Console.WriteLine(<span class="hljs-string">$&quot;Result: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>); <span class="hljs-comment">// 输出: Result: 15</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造函数，析构函数示例"><a href="#构造函数，析构函数示例" class="headerlink" title="构造函数，析构函数示例"></a>构造函数，析构函数示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><br>&#123;<br>    <span class="hljs-comment">// 字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br><br>    <span class="hljs-comment">// 无参构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span>()</span><br>    &#123;<br>        name = <span class="hljs-string">&quot;Default Name&quot;</span>;<br>        Console.WriteLine(<span class="hljs-string">&quot;无参构造函数被调用: &quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-comment">// 带参数的构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> newName</span>)</span><br>    &#123;<br>        name = newName;<br>        Console.WriteLine(<span class="hljs-string">&quot;带参数的构造函数被调用: &quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-comment">// 析构函数</span><br>    ~MyClass()<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;析构函数被调用，清理资源...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 使用无参构造函数创建对象</span><br>        MyClass obj1 = <span class="hljs-keyword">new</span> MyClass();<br><br>        <span class="hljs-comment">// 使用带参数的构造函数创建对象</span><br>        MyClass obj2 = <span class="hljs-keyword">new</span> MyClass(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br><br>        <span class="hljs-comment">// 程序结束时，析构函数会自动被调用</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 无参构造函数被调用: Default Name</span><br><span class="hljs-comment">// 带参数的构造函数被调用: Hello, World!</span><br><span class="hljs-comment">// 析构函数被调用，清理资源...</span><br><span class="hljs-comment">// 析构函数被调用，清理资源...</span><br></code></pre></td></tr></table></figure><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><table><thead><tr><th>访问修饰符</th><th>访问范围</th></tr></thead><tbody><tr><td><code>public</code></td><td>可以在任何地方访问</td></tr><tr><td><code>private</code></td><td>只能在定义它的类内部访问(默认)</td></tr><tr><td><code>protected</code></td><td>可以在定义它的类及其派生类中访问</td></tr><tr><td><code>internal</code></td><td>可以在同一程序集内访问</td></tr><tr><td><code>protected internal</code></td><td>可以在同一程序集或派生类中访问</td></tr></tbody></table><h3 id="C-构造函数特殊写法，通过-this-重用构造函数代码"><a href="#C-构造函数特殊写法，通过-this-重用构造函数代码" class="headerlink" title="C#构造函数特殊写法，通过 this 重用构造函数代码"></a>C#构造函数特殊写法，通过 this 重用构造函数代码</h3><p>在 C# 中，可以通过使用 <code>this</code> 关键字在一个构造函数内部调用另一个构造函数，以重用构造函数的代码。这种写法被称为构造函数重载或构造函数链。它允许你在不同的构造函数中共享初始化逻辑，从而减少代码重复。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><p>以下是一个示例，展示了如何通过 <code>this</code> 关键字在 C# 中重用构造函数代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment">// 主构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> age</span>)</span><br>    &#123;<br>        Name = name;<br>        Age = age;<br>    &#125;<br><br>    <span class="hljs-comment">// 另一个构造函数，通过 this 关键字调用主构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>) : <span class="hljs-title">this</span>(<span class="hljs-params">name, <span class="hljs-number">0</span></span>) <span class="hljs-comment">// 默认年龄设为 0</span></span><br>    &#123;<br>        <span class="hljs-comment">// 这里可以添加其他初始化逻辑</span><br>    &#125;<br><br>    <span class="hljs-comment">// 另一个构造函数，通过 this 关键字调用主构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>() : <span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-string">&quot;Unknown&quot;</span>, <span class="hljs-number">0</span></span>) <span class="hljs-comment">// 默认姓名设为 &quot;Unknown&quot;，年龄为 0</span></span><br>    &#123;<br>        <span class="hljs-comment">// 这里可以添加其他初始化逻辑</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Person p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>);<br>        Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;p1.Name&#125;</span>, <span class="hljs-subst">&#123;p1.Age&#125;</span>&quot;</span>); <span class="hljs-comment">// 输出: Alice, 30</span><br><br>        Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>);<br>        Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;p2.Name&#125;</span>, <span class="hljs-subst">&#123;p2.Age&#125;</span>&quot;</span>); <span class="hljs-comment">// 输出: Bob, 0</span><br><br>        Person p3 = <span class="hljs-keyword">new</span> Person();<br>        Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;p3.Name&#125;</span>, <span class="hljs-subst">&#123;p3.Age&#125;</span>&quot;</span>); <span class="hljs-comment">// 输出: Unknown, 0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><p><strong>主构造函数</strong>：<code>Person(string name, int age)</code> 是主要的构造函数，用于初始化 <code>Name</code> 和 <code>Age</code> 属性。</p></li><li><p><strong>重载构造函数</strong>：</p><ul><li><code>Person(string name)</code> 通过 <code>: this(name, 0)</code> 调用主构造函数，设定默认的 <code>Age</code> 为 <code>0</code>。</li><li><code>Person()</code> 通过 <code>: this(&quot;Unknown&quot;, 0)</code> 调用主构造函数，设定默认的 <code>Name</code> 为 <code>&quot;Unknown&quot;</code>，<code>Age</code> 为 <code>0</code>。</li></ul></li><li><p><strong>使用</strong>：在 <code>Main</code> 方法中创建了不同的 <code>Person</code> 对象，展示了如何使用不同的构造函数。</p></li></ol><h1 id="11-类与结构体区别（C-）"><a href="#11-类与结构体区别（C-）" class="headerlink" title="11. 类与结构体区别（C#）"></a>11. 类与结构体区别（C#）</h1><p>在 C# 中，类（<code>class</code>）和结构体（<code>struct</code>）都是用于封装数据和行为的复合数据类型，但它们在多个方面存在显著的区别。以下是它们的主要区别：</p><h3 id="主要区别-1"><a href="#主要区别-1" class="headerlink" title="主要区别"></a>主要区别</h3><table><thead><tr><th>特性</th><th>类 (Class)</th><th>结构体 (Struct)</th></tr></thead><tbody><tr><td><strong>类型</strong></td><td>引用类型</td><td>值类型</td></tr><tr><td><strong>存储方式</strong></td><td>存储在堆上</td><td>存储在栈上</td></tr><tr><td><strong>继承</strong></td><td>支持继承</td><td>不支持继承</td></tr><tr><td><strong>构造函数</strong></td><td>可以有无参数和有参数构造函数</td><td>只能有参数构造函数，不能有无参数构造函数</td></tr><tr><td><strong>默认构造函数</strong></td><td>有默认构造函数</td><td>没有默认构造函数，编译器自动提供一个隐式的默认构造函数，该构造函数会将结构体的所有字段初始化为其类型的默认值（如 <code>0</code>、<code>false</code>、<code>null</code> 等）</td></tr><tr><td><strong>访问修饰符</strong></td><td>默认是 <code>private</code></td><td>默认是 <code>private</code></td></tr><tr><td><strong>接口实现</strong></td><td>可以实现接口</td><td>可以实现接口</td></tr><tr><td><strong>实例化</strong></td><td>通过 <code>new</code> 创建</td><td>通过 <code>new</code> 创建</td></tr><tr><td><strong>赋值行为</strong></td><td>赋值时复制引用</td><td>赋值时复制值</td></tr><tr><td><strong>内存管理</strong></td><td>垃圾回收（GC）管理</td><td>垃圾回收（GC）管理</td></tr><tr><td><strong>性能</strong></td><td>对于小对象，性能开销较大</td><td>对于小对象，性能开销较小</td></tr></tbody></table><h3 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h3><ol><li><strong>类型</strong>：<ul><li><strong>类</strong>是引用类型，意味着它们的实例在内存中是通过引用来访问的。</li><li><strong>结构体</strong>是值类型，意味着它们的实例直接包含数据。</li></ul></li><li><strong>存储方式</strong>：<ul><li>类的对象存储在堆上，结构体的实例通常存储在栈上（如果是局部变量），因此结构体在内存分配和释放上更加高效。</li></ul></li><li><strong>继承</strong>：<ul><li>类支持继承，可以派生出子类。结构体不支持继承，因此不能从其他结构体或类继承。</li></ul></li><li><strong>构造函数</strong>：<ul><li>类可以有无参数构造函数和有参数构造函数，而结构体只能有有参数构造函数，不能有无参数构造函数。结构体会自动提供一个默认构造函数，该构造函数将所有字段设置为其默认值。</li></ul></li><li><strong>赋值行为</strong>：<ul><li>当类的对象被赋值给另一个变量时，实际上是复制了引用，而不是对象本身。因此，修改一个对象会影响所有引用它的变量。</li><li>结构体的赋值操作会复制整个数据，因此修改一个结构体不会影响另一个结构体的值。</li></ul></li></ol><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><h4 id="类的示例"><a href="#类的示例" class="headerlink" title="类的示例"></a>类的示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> age</span>) <span class="hljs-comment">// 构造函数</span></span><br>    &#123;<br>        Name = name;<br>        Age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Person person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>);<br>        Person person2 = person1; <span class="hljs-comment">// 复制引用</span><br>        person2.Name = <span class="hljs-string">&quot;Bob&quot;</span>; <span class="hljs-comment">// 修改 person2 的 Name</span><br><br>        Console.WriteLine(person1.Name); <span class="hljs-comment">// 输出: Bob</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结构体的示例"><a href="#结构体的示例" class="headerlink" title="结构体的示例"></a>结构体的示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> age</span>) <span class="hljs-comment">// 构造函数</span></span><br>    &#123;<br>        Name = name;<br>        Age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Person person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>);<br>        Person person2 = person1; <span class="hljs-comment">// 复制引用</span><br>        person2.Name = <span class="hljs-string">&quot;Bob&quot;</span>; <span class="hljs-comment">// 修改 person2 的 Name</span><br><br>        Console.WriteLine(person1.Name); <span class="hljs-comment">// 输出: Bob</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="12-C-垃圾回收机制"><a href="#12-C-垃圾回收机制" class="headerlink" title="12. C#垃圾回收机制"></a>12. C#垃圾回收机制</h1><p>C#的垃圾回收机制（Garbage Collection，简称 GC）是一种自动内存管理机制，用于释放不再使用的对象和回收内存资源，从而避免手动管理内存。它在.NET 框架中由 CLR（Common Language Runtime）负责执行，确保应用程序在运行期间高效地使用内存。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ol><li><strong>自动内存管理</strong>：不需要开发人员手动释放对象的内存，GC 会自动检测并释放不再使用的对象。</li><li><strong>内存压缩</strong>：GC 不仅会回收无用的对象，还会对内存进行压缩，把存活的对象移动到内存的开头，减少碎片。</li><li><strong>分代回收</strong>：采用分代（Generational）回收机制，根据对象的生命周期将内存划分为不同的代。</li></ol><h3 id="分代回收机制"><a href="#分代回收机制" class="headerlink" title="分代回收机制"></a>分代回收机制</h3><p>GC 将托管堆中的对象分为三代：</p><ul><li><strong>第 0 代（Gen 0）</strong>：短期对象，如临时变量。GC 最频繁地回收这部分对象。</li><li><strong>第 1 代（Gen 1）</strong>：较长时间的对象或从 Gen 0 晋升的对象。适用于中等寿命的对象。</li><li><strong>第 2 代（Gen 2）</strong>：长期对象或从 Gen 1 晋升的对象，如全局静态变量。GC 最不频繁地回收这部分对象。</li></ul><p>在进行垃圾回收时，GC 会优先处理 Gen 0，如果清理不够再继续回收 Gen 1 和 Gen 2。这样可以减少不必要的回收操作，提升性能。</p><h3 id="晋升的规则"><a href="#晋升的规则" class="headerlink" title="晋升的规则"></a>晋升的规则</h3><p>对象的晋升主要发生在垃圾回收的过程中，规则如下：</p><ol><li><p><strong>第 0 代（Gen 0）到第 1 代（Gen 1）的晋升</strong>：</p><ul><li>当第 0 代进行垃圾回收时，如果某个对象存活（即仍被引用），则这个对象将晋升到第 1 代。</li><li>如果一个对象在 Gen 0 的垃圾回收后依然存活，它通常被认为是一个较为持久的对象，因此被晋升到 Gen 1，减少它在以后的垃圾回收中被频繁扫描的次数。</li></ul></li><li><p><strong>第 1 代（Gen 1）到第 2 代（Gen 2）的晋升</strong>：</p><ul><li>当第 1 代进行垃圾回收时，仍然存活的 Gen 1 对象将被晋升到 Gen 2。</li><li>Gen 2 被认为是“老年代”，也就是说，这些对象的生命周期较长，可能会存活很长时间。因此，GC 会对 Gen 2 对象进行更少的回收操作，以减少垃圾回收的开销。</li></ul></li><li><p><strong>第 2 代（Gen 2）对象的处理</strong>：</p><ul><li>Gen 2 的对象在垃圾回收后仍然存活，不会再晋升，因为 Gen 2 已经是最高代。</li></ul></li></ol><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li><strong>标记阶段</strong>：GC 扫描所有的对象，标记出哪些是存活的，哪些是不再使用的。</li><li><strong>回收阶段</strong>：对不再使用的对象进行回收，释放它们的内存。</li><li><strong>压缩阶段</strong>：把存活的对象移动到内存的开头，减少内存碎片，并更新对象引用。</li></ol><h3 id="什么时候进行垃圾回收？"><a href="#什么时候进行垃圾回收？" class="headerlink" title="什么时候进行垃圾回收？"></a>什么时候进行垃圾回收？</h3><ul><li>内存不足时。</li><li>分配了大量对象，Gen 0 空间不足。</li><li>显式调用<code>GC.Collect()</code>方法（不建议频繁使用）。</li></ul><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 创建大量对象，强制触发GC</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++)<br>        &#123;<br>            <span class="hljs-built_in">string</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1000</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 手动调用GC（不推荐）</span><br>        GC.Collect();<br>        Console.WriteLine(<span class="hljs-string">&quot;手动垃圾回收完成&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需要注意的事项"><a href="#需要注意的事项" class="headerlink" title="需要注意的事项"></a>需要注意的事项</h3><ol><li><strong>GC.Collect()的使用</strong>：尽量避免手动调用 GC，因为 GC 会自动管理内存。手动调用会导致性能下降。</li><li><strong>非托管资源的清理</strong>：对于非托管资源（如文件句柄、数据库连接等），需要实现<code>IDisposable</code>接口，并在<code>Dispose</code>方法中释放资源。</li><li><strong>Finalize 和 Dispose</strong>：实现<code>Dispose</code>方法或使用<code>using</code>语句来清理资源，避免依赖 GC 进行非托管资源的回收。</li></ol><h3 id="实现IDisposable接口来清理非托管资源的示例"><a href="#实现IDisposable接口来清理非托管资源的示例" class="headerlink" title="实现IDisposable接口来清理非托管资源的示例"></a>实现<code>IDisposable</code>接口来清理非托管资源的示例</h3><p>示例将展示如何使用<code>Dispose</code>方法和析构函数（<code>Finalize</code>）来处理非托管资源的清理</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceHolder</span> : <span class="hljs-title">IDisposable</span><br>&#123;<br>    <span class="hljs-comment">// 模拟的非托管资源</span><br>    <span class="hljs-keyword">private</span> IntPtr unmanagedResource;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> disposed = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 用来跟踪对象是否已被释放</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ResourceHolder</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 分配非托管资源</span><br>        unmanagedResource = <span class="hljs-keyword">new</span> IntPtr(<span class="hljs-number">123</span>);<br>        Console.WriteLine(<span class="hljs-string">&quot;ResourceHolder: 非托管资源已分配.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 实现IDisposable接口的Dispose方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>()</span><br>    &#123;<br>        Dispose(<span class="hljs-literal">true</span>);<br>        GC.SuppressFinalize(<span class="hljs-keyword">this</span>); <span class="hljs-comment">// 防止析构函数重复释放资源</span><br>    &#125;<br><br>    <span class="hljs-comment">// 受保护的Dispose方法，真正的资源释放逻辑在这里执行</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> disposing</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!disposed)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (disposing)<br>            &#123;<br>                <span class="hljs-comment">// 释放托管资源（如果有）</span><br>                Console.WriteLine(<span class="hljs-string">&quot;ResourceHolder: 释放托管资源.&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 释放非托管资源</span><br>            <span class="hljs-keyword">if</span> (unmanagedResource != IntPtr.Zero)<br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">&quot;ResourceHolder: 释放非托管资源.&quot;</span>);<br>                unmanagedResource = IntPtr.Zero;<br>            &#125;<br><br>            disposed = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 析构函数（Finalize），在Dispose没有被调用时释放资源</span><br>    ~ResourceHolder()<br>    &#123;<br>        Dispose(<span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">using</span> (ResourceHolder resource = <span class="hljs-keyword">new</span> ResourceHolder())<br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;使用ResourceHolder对象.&quot;</span>);<br>        &#125; <span class="hljs-comment">// using语句结束后自动调用Dispose方法</span><br><br>        Console.WriteLine(<span class="hljs-string">&quot;程序结束.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// ResourceHolder: 非托管资源已分配.</span><br><span class="hljs-comment">// 使用ResourceHolder对象.</span><br><span class="hljs-comment">// ResourceHolder: 释放托管资源.</span><br><span class="hljs-comment">// ResourceHolder: 释放非托管资源.</span><br><span class="hljs-comment">// 程序结束.</span><br></code></pre></td></tr></table></figure><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ol><li><strong><code>IDisposable</code>接口</strong>：<code>ResourceHolder</code>类实现了<code>IDisposable</code>接口，提供<code>Dispose</code>方法来释放资源。</li><li><strong><code>Dispose</code>方法</strong>：实现<code>Dispose</code>方法，用于释放托管和非托管资源。调用<code>GC.SuppressFinalize(this)</code>避免在垃圾回收时调用析构函数。</li><li><strong>析构函数（<code>Finalize</code>）</strong>：析构函数用于在<code>Dispose</code>方法未被显式调用时释放非托管资源。</li><li><strong><code>using</code>语句</strong>：<code>using</code>语句会在代码块结束时自动调用<code>Dispose</code>方法，确保资源被及时释放。</li></ol><h1 id="13-代码解析-using-ResourceHolder-resource-new-ResourceHolder-Console-WriteLine-“使用-ResourceHolder-对象-”"><a href="#13-代码解析-using-ResourceHolder-resource-new-ResourceHolder-Console-WriteLine-“使用-ResourceHolder-对象-”" class="headerlink" title="13. 代码解析 using (ResourceHolder resource &#x3D; new ResourceHolder()) { Console.WriteLine(“使用 ResourceHolder 对象.”); }"></a>13. 代码解析 using (ResourceHolder resource &#x3D; new ResourceHolder()) { Console.WriteLine(“使用 ResourceHolder 对象.”); }</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> (ResourceHolder resource = <span class="hljs-keyword">new</span> ResourceHolder())<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;使用ResourceHolder对象.&quot;</span>);<br>&#125; <span class="hljs-comment">// using语句结束后自动调用Dispose方法</span><br></code></pre></td></tr></table></figure><h4 id="1-ResourceHolder-类"><a href="#1-ResourceHolder-类" class="headerlink" title="1. ResourceHolder 类"></a>1. <code>ResourceHolder</code> 类</h4><p>假设 <code>ResourceHolder</code> 是一个实现了 <code>IDisposable</code> 接口的类。<code>IDisposable</code> 接口定义了一个 <code>Dispose</code> 方法，用于显式地释放非托管资源。实现 <code>IDisposable</code> 是处理非托管资源或需要手动释放的资源（如文件句柄、数据库连接等）的一种常见做法。</p><h4 id="2-using-语句的作用"><a href="#2-using-语句的作用" class="headerlink" title="2. using 语句的作用"></a>2. <code>using</code> 语句的作用</h4><ul><li><code>using</code> 语句可以自动管理实现了 <code>IDisposable</code> 接口的对象的生命周期。</li><li>在进入 <code>using</code> 块时，会创建一个 <code>ResourceHolder</code> 对象并将其分配给 <code>resource</code> 变量。</li><li>当 <code>using</code> 语句结束时，无论是否发生异常，都会自动调用 <code>resource.Dispose()</code> 方法，以确保资源被正确释放。</li></ul><h4 id="3-代码的执行流程"><a href="#3-代码的执行流程" class="headerlink" title="3. 代码的执行流程"></a>3. 代码的执行流程</h4><ul><li>创建 <code>ResourceHolder</code> 对象，并分配给 <code>resource</code>。</li><li>执行 <code>using</code> 块内的代码，输出 “使用 ResourceHolder 对象.”</li><li>当 <code>using</code> 块结束时，<code>Dispose</code> 方法被自动调用，释放资源。</li></ul><p>等价于下面的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ResourceHolder resource = <span class="hljs-keyword">new</span> ResourceHolder();<br><span class="hljs-keyword">try</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;使用ResourceHolder对象.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">finally</span><br>&#123;<br>    <span class="hljs-comment">// 确保 Dispose 方法在 using 块结束时被调用</span><br>    <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span>)<br>    &#123;<br>        resource.Dispose();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IDisposable-接口和-Dispose-方法的作用"><a href="#IDisposable-接口和-Dispose-方法的作用" class="headerlink" title="IDisposable 接口和 Dispose 方法的作用"></a><code>IDisposable</code> 接口和 <code>Dispose</code> 方法的作用</h3><p><code>IDisposable</code> 接口定义了一个 <code>Dispose</code> 方法，用于释放资源。典型的实现方式如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ResourceHolder</span> : <span class="hljs-title">IDisposable</span><br>&#123;<br>    <span class="hljs-comment">// 实现 Dispose 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 释放资源的代码，如关闭文件句柄或断开数据库连接</span><br>        Console.WriteLine(<span class="hljs-string">&quot;ResourceHolder 的 Dispose 方法被调用.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Dispose</code> 方法释放资源，而 <code>using</code> 语句确保在使用完对象后自动调用 <code>Dispose</code>。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><code>using</code> 语句用于自动管理实现了 <code>IDisposable</code> 接口的对象的生命周期，确保资源在使用后被正确释放。</li><li>在 <code>using</code> 块结束时，会自动调用 <code>Dispose</code> 方法，释放资源，避免内存泄漏或资源占用。</li></ul><h1 id="14-IntPtr-解释"><a href="#14-IntPtr-解释" class="headerlink" title="14. IntPtr 解释"></a>14. IntPtr 解释</h1><p><code>IntPtr</code> 是 C# 中表示指针或句柄的平台相关类型。它的主要用途是处理非托管资源、与操作系统交互时的指针或句柄、以及在托管代码和非托管代码之间传递指针。以下是 <code>IntPtr</code> 的几个关键点：</p><ol><li><strong>平台相关大小</strong>：<code>IntPtr</code> 的大小取决于当前运行的平台。在 32 位平台上，<code>IntPtr</code> 是 4 字节（32 位），而在 64 位平台上，它是 8 字节（64 位）。这使得它非常适合用来表示指针或句柄的大小。</li><li><strong>表示指针或句柄</strong>：<code>IntPtr</code> 通常用于存储指针（如内存地址）或操作系统资源的句柄（如窗口句柄、文件句柄）。它可以存储一个整数值，表示内存地址或某种非托管资源的标识符。</li><li><strong>用于非托管代码交互</strong>：在与非托管代码交互时（例如，通过 P&#x2F;Invoke 调用 Win32 API），<code>IntPtr</code> 常被用来表示指针参数。它可以与 C&#x2F;C++ 中的 <code>void*</code> 类型类似，适合用来传递内存地址。</li><li><strong>转换和比较</strong>：<code>IntPtr</code> 支持从整数类型（<code>int</code> 或 <code>long</code>）进行隐式或显式转换，也可以与整数进行比较或相互赋值。</li></ol><h3 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h3><p>下面是一个使用 <code>IntPtr</code> 来表示一个非托管资源句柄的示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 模拟一个非托管资源的句柄（假设资源的句柄值为123）</span><br>        IntPtr unmanagedResource = <span class="hljs-keyword">new</span> IntPtr(<span class="hljs-number">123</span>);<br><br>        <span class="hljs-comment">// 打印 IntPtr 的值</span><br>        Console.WriteLine(<span class="hljs-string">&quot;非托管资源句柄: &quot;</span> + unmanagedResource);<br><br>        <span class="hljs-comment">// 检查 IntPtr 是否为零</span><br>        <span class="hljs-keyword">if</span> (unmanagedResource != IntPtr.Zero)<br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;资源已分配.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;资源未分配.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 将 IntPtr 转换为 long 类型</span><br>        <span class="hljs-built_in">long</span> handleValue = unmanagedResource.ToInt64();<br>        Console.WriteLine(<span class="hljs-string">&quot;句柄的长整型值: &quot;</span> + handleValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">非托管资源句柄: 123</span><br>资源已分配.<br><span class="hljs-section">句柄的长整型值: 123</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>IntPtr</code> 被用来模拟表示一个非托管资源的句柄值，并可以进行检查和转换。通过使用 <code>IntPtr</code>，代码可以适应不同的平台（32 位或 64 位），确保指针或句柄的大小能够正确匹配。</p><h3 id="IntPtr-Zero-的解释"><a href="#IntPtr-Zero-的解释" class="headerlink" title="IntPtr.Zero 的解释"></a>IntPtr.Zero 的解释</h3><p><code>IntPtr.Zero</code> 是 .NET 中 <code>IntPtr</code> 结构的一个静态只读字段，表示一个空指针或指针值为零的情况。它的作用类似于 C&#x2F;C++ 中的 <code>NULL</code> 或 <code>nullptr</code>，用于表示一个未分配的指针或句柄。<code>IntPtr</code> 是一种平台相关的类型，用于存储指针或句柄的值。</p><h3 id="IntPtr-结构"><a href="#IntPtr-结构" class="headerlink" title="IntPtr 结构"></a><code>IntPtr</code> 结构</h3><ul><li><code>IntPtr</code> 是一个可以存储内存地址（指针）或操作系统句柄的平台无关类型。</li><li>它的大小是平台相关的：在 32 位系统上是 4 字节，在 64 位系统上是 8 字节。</li></ul><h3 id="IntPtr-Zero-的用途"><a href="#IntPtr-Zero-的用途" class="headerlink" title="IntPtr.Zero 的用途"></a><code>IntPtr.Zero</code> 的用途</h3><ul><li><code>IntPtr.Zero</code> 可以用来检查指针或句柄是否为空，例如在调用非托管代码或处理操作系统资源时，判断一个指针是否已经被分配。</li><li>作为默认值，表示未初始化的指针或句柄。</li></ul><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><p>在使用 P&#x2F;Invoke 或与非托管代码交互时，可以用 <code>IntPtr.Zero</code> 来表示空指针：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp">IntPtr handle = IntPtr.Zero; <span class="hljs-comment">// 初始化为一个空指针</span><br><br><span class="hljs-comment">// 检查指针是否为空</span><br><span class="hljs-keyword">if</span> (handle == IntPtr.Zero)<br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Handle 未被初始化.&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;Handle 已初始化.&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>IntPtr.Zero</code> 用来判断 <code>handle</code> 是否为未分配的空指针。</p><h3 id="句柄的解释"><a href="#句柄的解释" class="headerlink" title="句柄的解释"></a>句柄的解释</h3><p>在计算机编程中，<strong>句柄</strong>（Handle）是用于引用系统资源的一个抽象标识符。它可以看作是一个间接指向资源的指针，通过句柄可以对资源进行操作，而不需要直接访问资源的内存地址。句柄通常用于操作系统提供的资源管理，例如文件、内存、窗口、线程、数据库连接等。</p><h3 id="句柄的作用"><a href="#句柄的作用" class="headerlink" title="句柄的作用"></a>句柄的作用</h3><ul><li><strong>间接引用</strong>：句柄为资源提供了一个间接的访问方式，使得程序不需要知道资源的具体内存地址，只需使用句柄进行操作。</li><li><strong>资源管理</strong>：操作系统或库使用句柄来管理资源的分配和释放。句柄由操作系统分配，当资源不再需要时，程序员可以释放句柄来回收资源。</li><li><strong>类型安全</strong>：通过句柄访问资源可以防止程序直接操作资源的内存地址，提高了系统的安全性和稳定性。</li></ul><h3 id="常见的句柄类型"><a href="#常见的句柄类型" class="headerlink" title="常见的句柄类型"></a>常见的句柄类型</h3><ul><li><strong>文件句柄</strong>：用于打开和操作文件，如读取或写入文件数据。</li><li><strong>窗口句柄（HWND）</strong>：在图形用户界面编程中，用于标识窗口。</li><li><strong>进程或线程句柄</strong>：用于操作系统中标识进程或线程的标识符。</li><li><strong>数据库句柄</strong>：用于连接到数据库或执行查询。</li></ul><h3 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h3><p>在 C# 中，使用句柄来操作系统资源，如文件句柄：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> (FileStream fileStream = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">&quot;example.txt&quot;</span>, FileMode.Open))<br>&#123;<br>    <span class="hljs-comment">// fileStream.SafeFileHandle 是一个文件句柄</span><br>    <span class="hljs-keyword">if</span> (!fileStream.SafeFileHandle.IsInvalid)<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;文件句柄有效.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>fileStream.SafeFileHandle</code> 是文件句柄，用于管理文件资源。句柄让操作系统跟踪文件的状态，并在使用完毕后释放资源。</p><h1 id="15-类中的属性"><a href="#15-类中的属性" class="headerlink" title="15. 类中的属性"></a>15. 类中的属性</h1><p>在 C# 中，类的属性是用于封装字段（成员变量）并提供对这些字段的访问的机制。属性使得对类内部数据的访问更加安全和灵活，可以控制对字段的读取和写入。</p><h3 id="属性的基本定义"><a href="#属性的基本定义" class="headerlink" title="属性的基本定义"></a>属性的基本定义</h3><p>属性通常由两个部分组成：</p><ol><li><strong>get 访问器</strong>：用于获取属性的值。get 必须有返回值</li><li><strong>set 访问器</strong>：用于设置属性的值。set 可以不设置赋值</li></ol><p>以下是一个简单的示例，展示了如何在类中定义属性：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-comment">// 私有字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br><br>    <span class="hljs-comment">// 公共属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> name; &#125;   <span class="hljs-comment">// 获取name字段的值</span><br>        <span class="hljs-keyword">set</span> &#123; name = <span class="hljs-keyword">value</span>; &#125;  <span class="hljs-comment">// 设置name字段的值</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> age; &#125;    <span class="hljs-comment">// 获取age字段的值</span><br>        <span class="hljs-keyword">set</span><br>        &#123;<br>            <span class="hljs-comment">// 可以添加逻辑，例如确保年龄不能为负数</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> &lt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArgumentException(<span class="hljs-string">&quot;年龄不能为负数&quot;</span>);<br>            &#125;<br>            age = <span class="hljs-keyword">value</span>;         <span class="hljs-comment">// 设置age字段的值</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用属性"><a href="#使用属性" class="headerlink" title="使用属性"></a>使用属性</h3><p>可以通过实例化类并直接访问属性来使用它们：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.Name = <span class="hljs-string">&quot;Alice&quot;</span>; <span class="hljs-comment">// 设置属性值</span><br>        person.Age = <span class="hljs-number">30</span>;       <span class="hljs-comment">// 设置属性值</span><br><br>        Console.WriteLine(<span class="hljs-string">$&quot;Name: <span class="hljs-subst">&#123;person.Name&#125;</span>, Age: <span class="hljs-subst">&#123;person.Age&#125;</span>&quot;</span>); <span class="hljs-comment">// 获取属性值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动属性"><a href="#自动属性" class="headerlink" title="自动属性"></a>自动属性</h3><p>C# 还提供了自动属性的功能，可以简化属性的定义，编译器会为这些属性创建一个私有的匿名字段。我们只需要使用 Name 或者 Age 获取或者修改值即可。下面是一个使用自动属性的例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    <span class="hljs-comment">// 自动属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="只读和只写属性"><a href="#只读和只写属性" class="headerlink" title="只读和只写属性"></a>只读和只写属性</h3><p>属性也可以设置为只读或只写：</p><ul><li><strong>只读属性</strong>：只有 <code>get</code> 访问器，没有 <code>set</code> 访问器，不能直接修改。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ReadOnlyPerson</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReadOnlyPerson</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> name; &#125; <span class="hljs-comment">// 只读属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>只写属性</strong>：只有 <code>set</code> 访问器，没有 <code>get</code> 访问器，不能直接读取。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WriteOnlyPerson</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age<br>    &#123;<br>        <span class="hljs-keyword">set</span> &#123; age = <span class="hljs-keyword">value</span>; &#125; <span class="hljs-comment">// 只写属性</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get，set-的访问修饰符的规定"><a href="#get，set-的访问修饰符的规定" class="headerlink" title="get，set 的访问修饰符的规定"></a>get，set 的访问修饰符的规定</h3><p>在 C# 中，属性的 <code>get</code> 和 <code>set</code> 访问修饰符可以单独定义，允许你对属性的读取和写入操作分别控制访问权限。这种灵活性使得你能够根据需要来限制对类成员的访问。</p><h3 id="访问修饰符-1"><a href="#访问修饰符-1" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>C# 提供了以下几种常用的访问修饰符：</p><ol><li><strong>public</strong>：可以被任何其他代码访问。</li><li><strong>private</strong>：只能在定义该成员的类内部访问。</li><li><strong>protected</strong>：只能在定义该成员的类及其子类中访问。</li><li><strong>internal</strong>：只能在同一程序集（项目）中访问。</li><li><strong>protected internal</strong>：可以在同一程序集或从其子类中访问。</li></ol><h3 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h3><p>以下是一些示例，展示了如何为 <code>get</code> 和 <code>set</code> 分别指定不同的访问修饰符：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name; <span class="hljs-comment">// 私有字段</span><br><br>    <span class="hljs-comment">// 只读属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> name; &#125;  <span class="hljs-comment">// 公开的get方法</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span> &#123; name = <span class="hljs-keyword">value</span>; &#125;  <span class="hljs-comment">// 仅在类内部可设置</span><br>    &#125;<br><br>    <span class="hljs-comment">// 只写属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Age<br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> age; &#125; <span class="hljs-comment">// 仅在类内部可读取</span><br>        <span class="hljs-keyword">set</span> &#123; age = <span class="hljs-keyword">value</span>; &#125;  <span class="hljs-comment">// 公开的set方法</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">int</span> age</span>)</span><br>    &#123;<br>        Name = name;  <span class="hljs-comment">// 通过公共set方法设置</span><br>        Age = age;    <span class="hljs-comment">// 通过公共set方法设置</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>()</span><br>    &#123;<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>);<br><br>        <span class="hljs-comment">// 访问Name属性</span><br>        Console.WriteLine(person.Name); <span class="hljs-comment">// 公开的get方法可以访问</span><br><br>        <span class="hljs-comment">// 不能直接设置Name属性，因为set是私有的</span><br>        <span class="hljs-comment">// person.Name = &quot;Bob&quot;; // 这行代码会产生编译错误</span><br><br>        <span class="hljs-comment">// 访问和修改Age属性</span><br>        <span class="hljs-comment">// Console.WriteLine(person.Age); // 编译错误，因为get是私有的</span><br>        person.Age = <span class="hljs-number">35</span>; <span class="hljs-comment">// 公开的set方法可以访问</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问修饰符的规则"><a href="#访问修饰符的规则" class="headerlink" title="访问修饰符的规则"></a>访问修饰符的规则</h3><ul><li><strong>访问修饰符可以单独定义</strong>：<code>get</code> 和 <code>set</code> 访问修饰符可以不同。例如，<code>get</code> 可以是 <code>public</code>，而 <code>set</code> 可以是 <code>private</code>。</li><li><strong>当未指定访问修饰符时</strong>：如果没有明确指定 <code>get</code> 和 <code>set</code> 的访问修饰符，则默认情况下：<ul><li><code>get</code> 默认为 属性声明时的访问权限。</li><li><code>set</code> 默认为 属性声明时的访问权限（如果是自动属性，或类内部没有定义）。</li></ul></li><li><strong>构造函数和方法</strong>：构造函数和其他方法可以访问私有属性的 <code>set</code> 访问器，从而在对象创建时初始化值。</li><li>仅当属性或索引器同时具有  <code>set</code>  和  <code>get</code>  访问器时，才能使用访问器修饰符。 这种情况下，只允许对其中一个访问器使用修饰符。</li><li>访问器的可访问性级别必须比属性或索引器本身的可访问性级别具有更严格的限制。如果属性本身就是 private，get 和 set 均不可以使用访问修饰符。如果是 public 的属性，不可以对 get 或者 set 使用 public，只能更严格</li></ul><h1 id="16-索引器"><a href="#16-索引器" class="headerlink" title="16. 索引器"></a>16. 索引器</h1><h1 id="占坑，后面再进行填充，主要是笔记，因为还在学，会持续更新"><a href="#占坑，后面再进行填充，主要是笔记，因为还在学，会持续更新" class="headerlink" title="占坑，后面再进行填充，主要是笔记，因为还在学，会持续更新"></a>占坑，后面再进行填充，主要是笔记，因为还在学，会持续更新</h1><p><a href="https://learn.microsoft.com/zh-cn/">MS-Learning</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【算法】约瑟夫环问题</title>
    <link href="/2024/09/12/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <url>/2024/09/12/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="占坑，后面再进行填充"><a href="#占坑，后面再进行填充" class="headerlink" title="占坑，后面再进行填充"></a>占坑，后面再进行填充</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂谈-游戏（二）</title>
    <link href="/2024/09/10/%E6%9D%82%E8%B0%88-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2024/09/10/%E6%9D%82%E8%B0%88-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>往电脑游戏上靠吧，尽量还是自己能够慢慢玩的游戏，不是类似每几个月就更新的游戏<br>自己确实没时间玩<br>多分析，可以写攻略啥的，至少比第一篇详细</p></blockquote><h3 id="游戏杂谈"><a href="#游戏杂谈" class="headerlink" title="游戏杂谈"></a>游戏杂谈</h3><h4 id="大江湖之苍龙与白鸟"><a href="#大江湖之苍龙与白鸟" class="headerlink" title="大江湖之苍龙与白鸟"></a>大江湖之苍龙与白鸟</h4><!-- ![双人成行.png](https://s2.loli.net/2022/07/20/dxheYjZ9R7vU5iw.png) --><p>占坑</p><h4 id="骰子浪游者"><a href="#骰子浪游者" class="headerlink" title="骰子浪游者"></a>骰子浪游者</h4><p>占坑</p><h4 id="深岩银河"><a href="#深岩银河" class="headerlink" title="深岩银河"></a>深岩银河</h4><p>占坑</p><h4 id="土豆兄弟"><a href="#土豆兄弟" class="headerlink" title="土豆兄弟"></a>土豆兄弟</h4><p>占坑</p><h4 id="学生时代"><a href="#学生时代" class="headerlink" title="学生时代"></a>学生时代</h4><p>占坑</p><h4 id="墨境"><a href="#墨境" class="headerlink" title="墨境"></a>墨境</h4><p>占坑</p><h4 id="暖雪"><a href="#暖雪" class="headerlink" title="暖雪"></a>暖雪</h4><p>占坑</p><h4 id="沉默的蟋蟀"><a href="#沉默的蟋蟀" class="headerlink" title="沉默的蟋蟀"></a>沉默的蟋蟀</h4><p>占坑</p><h4 id="太吾绘卷"><a href="#太吾绘卷" class="headerlink" title="太吾绘卷"></a>太吾绘卷</h4><p>占坑</p><h4 id="孤星猎人"><a href="#孤星猎人" class="headerlink" title="孤星猎人"></a>孤星猎人</h4><p>占坑</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VSCode基本使用和Emmet语法</title>
    <link href="/2024/09/10/VSCode%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8CEmmet%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/09/10/VSCode%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%92%8CEmmet%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="VSCode基本使用和Emmet语法"><a href="#VSCode基本使用和Emmet语法" class="headerlink" title="VSCode基本使用和Emmet语法"></a>VSCode基本使用和Emmet语法</h3><h4 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h4><blockquote><p>Emmet用于加快HTML和CSS代码的编写速度。</p><p>能够通过简短的表达式就可以生成HTML或CSS代码片段。</p><p>截至2022年，主流的编辑器工具如Visual Studio Code、WebStorm都已经继承了<code>Emmet</code>工具，无需手动安装即可使用</p><p>文档地址：<a href="https://docs.emmet.io/cheat-sheet/">https://docs.emmet.io/cheat-sheet/</a></p></blockquote><p>test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 单个标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- p --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 父子关系标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!--   div&gt;ul&gt;li --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 生成多个标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!--   div&gt;ul&gt;li*5 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 兄弟关系标签 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- div+p --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dic</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dic</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 属性 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- #box --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- p#box --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- dic.cls .cls --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 同时生成id和类 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- div.title.#header --&gt;</span><br>  <span class="hljs-comment">&lt;!-- div.title#header --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 自动生成内容 --&gt;</span><br>  <span class="hljs-comment">&lt;!-- p&#123;Hello你好！&#125; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--   p&#123;Hello你好$&#125;*5 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello你好5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- a[href=&quot;https//www.baidu.com&quot;] --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https//www.baidu.com&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- input[data-content=&#x27;AAAA&#x27;] --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">data-content</span>=<span class="hljs-string">&quot;AAAA&quot;</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- div&gt;p*2+ul&gt;li*2 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- p&gt;span.cls$*6 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls6&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="快捷键以及其他命令"><a href="#快捷键以及其他命令" class="headerlink" title="快捷键以及其他命令"></a>快捷键以及其他命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">code #在windows中的命令行输入code会打开vscode软件<br>CRTL + / #单行注释或取消<br>ALT + UP/DOWN # 移动行<br>SHIFT + ALT + UP/DOWN # 复制当前行<br>CTRL + &#x27;+或-&#x27; # 设置IDE整体字体大小<br>CTRL + ALT + UP/DOWN # 多行编辑<br>SHIFT + CTRL + K # 删除当前行<br></code></pre></td></tr></table></figure><h4 id="VSCode插件推荐"><a href="#VSCode插件推荐" class="headerlink" title="VSCode插件推荐"></a>VSCode插件推荐</h4><ul><li><p>Auto Rename Tag</p><blockquote><p>自动将标签全部修改</p><p></p> 修改其中的p，另一个p也会修改</blockquote></li><li><p>Code Runner</p><blockquote><p>运行多种语言的代码段或代码文件,实际上还要安装其他插件，不知道是不是自带的</p></blockquote></li><li><p>Code Translate</p><blockquote><p>能翻译代码中的英文</p></blockquote></li><li><p>ESLint</p><blockquote><p>vue代码格式化</p></blockquote></li><li><p>JavaScript(ES6) code snippets</p><blockquote><p>js语法报错提示</p></blockquote></li><li><p>Live Server</p><blockquote><p>使用服务器（本地）运行html文件</p></blockquote></li><li><p>Material Icon Theme</p><blockquote><p>修改文件目录的图标</p></blockquote></li><li><p>open in browser</p><blockquote><p>使用浏览器打开html文件</p></blockquote></li><li><p>Prettier Code formatter</p><blockquote><p>代码格式化</p><p>参考<a href="https://huaweicloud.csdn.net/638ee1f6dacf622b8df8d8c0.html">https://huaweicloud.csdn.net/638ee1f6dacf622b8df8d8c0.html</a></p></blockquote></li><li><p>Vetur </p><blockquote><p>Vue代码格式化</p></blockquote></li><li><p>Vue Language Feature(Volur)</p><blockquote><p>Vue代码格式化</p></blockquote></li></ul><p><a href="https://imgse.com/i/pSjl7RI"><img src="https://s1.ax1x.com/2023/02/21/pSjl7RI.png" alt="pSjl7RI.png"></a></p><p><a href="https://imgse.com/i/pSjlOL8"><img src="https://s1.ax1x.com/2023/02/21/pSjlOL8.png" alt="pSjlOL8.png"></a></p><h4 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h4><p>左下角齿轮-&gt;setting</p><p>过一段时间自动保存</p><p><a href="https://imgse.com/i/pSjlxoQ"><img src="https://s1.ax1x.com/2023/02/21/pSjlxoQ.png" alt="pSjlxoQ.png"></a></p><p>去除右上角的迷你窗口</p><p><a href="https://imgse.com/i/pSj1pJs"><img src="https://s1.ax1x.com/2023/02/21/pSj1pJs.png" alt="pSj1pJs.png"></a></p><p>增加Ctrl+鼠标滑轮缩放代码字体大小</p><p><a href="https://imgse.com/i/pSj19Wn"><img src="https://s1.ax1x.com/2023/02/21/pSj19Wn.png" alt="pSj19Wn.png"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>本地双人塔防游戏Demo</title>
    <link href="/2024/09/10/%E6%9C%AC%E5%9C%B0%E5%8F%8C%E4%BA%BA%E5%A1%94%E9%98%B2%E6%B8%B8%E6%88%8FDemo/"/>
    <url>/2024/09/10/%E6%9C%AC%E5%9C%B0%E5%8F%8C%E4%BA%BA%E5%A1%94%E9%98%B2%E6%B8%B8%E6%88%8FDemo/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本 Demo 来自 B 站课程学习的改进</p><p>作为自己的整理和找工作的项目 Demo</p><p>添加了自己的想法，记录在做这个 Demo 过程中比较重要的内容，可能会贴出部分源码</p></blockquote><h1 id="导入-SDL-相关的包"><a href="#导入-SDL-相关的包" class="headerlink" title="导入 SDL 相关的包"></a>导入 SDL 相关的包</h1><p><a href="https://wiki.libsdl.org/SDL2/CategoryAPI">SDL2 API 文档总览</a></p><p><a href="https://github.com/DaveGamble/cJSON">cJSON 仓库链接</a><br><a href="https://github.com/libsdl-org/SDL">SDL2 仓库链接</a><br><a href="https://github.com/libsdl-org/SDL_ttf">SDL_ttf 仓库链接</a><br><a href="https://github.com/libsdl-org/SDL_mixer">SDL_mixer 仓库链接</a><br><a href="https://github.com/libsdl-org/SDL_image">SDL_image 仓库链接</a><br><a href="https://www.ferzkopp.net/wordpress/2016/01/02/sdl_gfx-sdl2_gfx/">SDL2_gfx 官网链接</a></p><h2 id="下载-SDL2-的时候的-release-版本的信息解读"><a href="#下载-SDL2-的时候的-release-版本的信息解读" class="headerlink" title="下载 SDL2 的时候的 release 版本的信息解读"></a>下载 SDL2 的时候的 release 版本的信息解读</h2><p><img src="/BlogImg/image-20240909230926905.png" alt="image-20240909230926905"></p><p>文件名 <code>SDL2-devel-2.30.7-VC.zip</code> 中的各个部分通常遵循一定的命名规则，以下是对其命名含义的解释：</p><ol><li><p><strong><code>SDL2</code></strong>:</p><ul><li>代表 Simple DirectMedia Layer 2.0，即 SDL2，这是一个跨平台的多媒体开发库，广泛用于游戏开发、图形渲染和音频处理等领域。</li></ul></li><li><p><strong><code>devel</code></strong>:</p><ul><li><code>devel</code> 是 <code>development</code> 的缩写，表示这是一个开发版本的文件包，通常包含开发库、头文件和相关的工具，用于软件开发而不是仅仅用于运行时。这意味着你可以使用它来编译和开发依赖于 SDL2 的应用程序。</li></ul></li><li><p><strong><code>2.30.2</code></strong>:</p><ul><li><p>这是 SDL2 的版本号，表示这是 2.30.7 版本。版本号通常以</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">主版本号.次版本号.修订号<br></code></pre></td></tr></table></figure><p>的形式表示，例如在此例中：</p><ul><li><code>2</code> 是主版本号，表示这是 SDL2 的第二个大版本。</li><li><code>30</code> 是次版本号，表示自主版本 2 以来进行了 30 次功能更新或改进。</li><li><code>7</code> 是修订号，表示这个版本在 <code>2.30</code> 基础上进行了七次小的修复或改进。</li></ul></li></ul></li><li><p><strong><code>VC</code></strong>:</p><ul><li><code>VC</code> 代表 Visual C++，表示这个文件包是为 Microsoft Visual C++ 编译器和开发环境准备的。这通常意味着它包含了适用于 Visual Studio 的动态链接库（DLLs）、静态库（LIBs）、头文件（headers）等。</li></ul></li><li><p><strong><code>.zip</code></strong>:</p><ul><li>这是文件的扩展名，表示该文件是一个压缩包，使用 ZIP 压缩格式。你需要解压缩它以访问其中的内容。</li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>文件名 <code>SDL2-devel-2.30.2-VC.zip</code> 可以理解为：</p><ul><li>这是 SDL2 库的开发版（包含开发所需的文件），</li><li>版本号是 2.30.2，</li><li>专门为 Visual C++ 编译器准备，</li><li>文件被打包为 ZIP 格式的压缩包。</li></ul><h2 id="VS-Studio-的一些设置"><a href="#VS-Studio-的一些设置" class="headerlink" title="VS Studio 的一些设置"></a>VS Studio 的一些设置</h2><h3 id="运行库设置"><a href="#运行库设置" class="headerlink" title="运行库设置"></a>运行库设置</h3><p><img src="/BlogImg/image-20240909233156816.png" alt="属性页操作"></p><p><img src="/BlogImg/image-20240909233309479.png" alt="右键项目最下面能看到属性"></p><p><img src="/BlogImg/image-20240909233333704.png" alt="找到属性中的运行库"></p><h3 id="不同选项的解释，来自-chatgpt-4o"><a href="#不同选项的解释，来自-chatgpt-4o" class="headerlink" title="不同选项的解释，来自 chatgpt-4o"></a>不同选项的解释，来自 chatgpt-4o</h3><p>在 Visual Studio 中，当你编译一个 C&#x2F;C++ 程序时，可以选择不同的运行库（Runtime Library）选项。每个选项都有不同的特性，主要影响程序在运行时如何链接到 C&#x2F;C++ 标准库以及线程安全性。以下是常见的运行库选项及其区别：</p><h3 id="1-多线程-单线程"><a href="#1-多线程-单线程" class="headerlink" title="1. 多线程&#x2F;单线程"></a>1. <strong>多线程&#x2F;单线程</strong></h3><ul><li><strong>&#x2F;MT</strong> (Multithreaded): 编译器使用多线程的、静态链接的运行库。这意味着标准库的代码将被编译进生成的二进制文件中，不依赖外部的 DLL 文件。此选项适用于编译需要多线程支持的独立可执行文件。</li><li><strong>&#x2F;MTd</strong> (Multithreaded Debug): 和 <code>/MT</code> 类似，但用于调试版本，包含调试信息。</li><li><strong>&#x2F;MD</strong> (Multithreaded DLL): 编译器使用多线程的、动态链接的运行库。这意味着标准库的代码不会被编译进生成的二进制文件中，而是依赖外部的 <code>msvcrt.dll</code>（或调试版本的 <code>msvcrtd.dll</code>）。这是默认的运行库选项，适用于需要分发较小的可执行文件并且使用了动态链接库的项目。</li><li><strong>&#x2F;MDd</strong> (Multithreaded DLL Debug): 和 <code>/MD</code> 类似，但用于调试版本，包含调试信息。</li></ul><h3 id="2-静态链接-vs-动态链接"><a href="#2-静态链接-vs-动态链接" class="headerlink" title="2. 静态链接 vs 动态链接"></a>2. <strong>静态链接 vs 动态链接</strong></h3><ul><li><strong>静态链接</strong> (<code>/MT</code>, <code>/MTd</code>):<ul><li>所有的运行时库代码都被嵌入到最终的可执行文件或库文件中。</li><li>不依赖任何外部 DLL 文件。</li><li>生成的文件较大，但在部署时不需要依赖额外的库文件。</li></ul></li><li><strong>动态链接</strong> (<code>/MD</code>, <code>/MDd</code>):<ul><li>运行时库代码保存在外部的 DLL 文件中，最终的可执行文件中只包含对这些 DLL 的引用。</li><li>生成的可执行文件较小，但在运行时必须确保相关的 DLL 文件可用。</li><li>如果不同的模块使用不同的运行时库（比如一个模块用 <code>/MD</code>，另一个用 <code>/MT</code>），可能会导致内存管理问题（如内存分配与释放的不一致）。</li></ul></li></ul><h3 id="3-调试版-vs-发布版"><a href="#3-调试版-vs-发布版" class="headerlink" title="3. 调试版 vs 发布版"></a>3. <strong>调试版 vs 发布版</strong></h3><ul><li><strong>调试版</strong> (<code>/MTd</code>, <code>/MDd</code>):<ul><li>包含调试信息，便于在调试器中运行程序。</li><li>使用了调试版本的运行库，运行时性能可能较低，但提供了更多的错误检查机制。</li></ul></li><li><strong>发布版</strong> (<code>/MT</code>, <code>/MD</code>):<ul><li>不包含调试信息，优化后的代码适用于发布版本。</li><li>使用了非调试版本的运行库，运行时性能更好。</li></ul></li></ul><h3 id="选择哪个运行库？"><a href="#选择哪个运行库？" class="headerlink" title="选择哪个运行库？"></a>选择哪个运行库？</h3><ul><li><strong>单独的可执行文件</strong>: <font color="red">如果你需要一个不依赖外部 DLL 的独立可执行文件，可以选择 <code>/MT</code> 或 <code>/MTd</code>。</font></li><li><strong>使用动态链接库</strong>: 如果你希望通过动态链接库减小可执行文件的大小并共享库代码，使用 <code>/MD</code> 或 <code>/MDd</code> 是更好的选择。</li><li><strong>调试 vs 发布</strong>: 在开发和调试阶段，选择调试版运行库（如 <code>/MDd</code>），在发布时切换到发布版运行库（如 <code>/MD</code>）。</li></ul><h2 id="第三方库的导入"><a href="#第三方库的导入" class="headerlink" title="第三方库的导入"></a>第三方库的导入</h2><ul><li>导入头文件(include 文件夹)和静态(lib)或者动态链接库(dll)</li></ul><p><img src="/BlogImg/image-20240909233954841.png" alt="导入头文件和库文件"></p><ul><li>导入头文件(include 文件夹)和源文件</li></ul><p><img src="/BlogImg/image-20240909234021144.png" alt="导入头文件和源文件"></p><h2 id="头文件目录设置"><a href="#头文件目录设置" class="headerlink" title="头文件目录设置"></a>头文件目录设置</h2><p><img src="/BlogImg/image-20240909234813783.png" alt="附加包含目录"></p><p>在 Visual Studio 中，“附加包含目录”（Additional Include Directories）是一个项目属性设置项，用于指定编译器在编译项目时需要查找的头文件目录。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>当你在代码中使用 <code>#include</code> 指令引用头文件时，编译器需要知道这些头文件的位置。编译器默认会在以下地方查找头文件：</p><ol><li><strong>当前源文件所在的目录</strong>。</li><li><strong>系统默认的包含目录</strong>（如 C++ 标准库的头文件目录）。</li></ol><p>如果你的项目中使用了自定义的头文件，或者你依赖于外部库的头文件，这些头文件可能位于编译器默认查找路径之外。此时，你需要通过“附加包含目录”将这些头文件所在的路径告诉编译器。</p><h3 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h3><p>在 Visual Studio 中，你可以通过以下步骤设置“附加包含目录”：</p><ol><li>右键点击你的项目，选择“属性”（Properties）。</li><li>在项目属性窗口中，导航到“配置属性”（Configuration Properties） -&gt; “C&#x2F;C++” -&gt; “常规”（General）。</li><li>在右侧的“附加包含目录”一栏中，添加需要包含的头文件目录路径。可以手动输入路径，或点击旁边的按钮选择目录。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设你正在编译一个 C++ 项目，并且你使用了一个外部库 <code>MyLibrary</code>，它的头文件存放在 <code>C:\Libraries\MyLibrary\include</code> 目录下。在你的代码中，你可能会有这样的包含语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;MyLibrary.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>为了让编译器找到 <code>MyLibrary.h</code> 文件，你需要将 <code>C:\Libraries\MyLibrary\include</code> 路径添加到“附加包含目录”中。</p><h2 id="库文件目录设置"><a href="#库文件目录设置" class="headerlink" title="库文件目录设置"></a>库文件目录设置</h2><p><img src="/BlogImg/image-20240909235154768.png" alt="库文件目录设置"></p><p>在 Visual Studio 中，“附加库目录”（Additional Library Directories）是项目属性设置中的一项，用于指定链接器在链接阶段需要查找库文件（如 <code>.lib</code> 文件）的目录。</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>当你编写的程序需要链接到外部库（如第三方库或自己编写的库）时，链接器需要知道这些库文件的位置。库文件通常包含了程序中使用的函数、类等的预编译代码，而链接器的任务就是将这些库与您的代码结合，生成最终的可执行文件。</p><p>默认情况下，链接器会在以下地方查找库文件：</p><ol><li><strong>系统默认的库目录</strong>（例如，Windows SDK 中的库目录）。</li><li><strong>项目文件所在的目录</strong>。</li></ol><p>如果你的项目使用的库文件不在这些默认目录中，你就需要通过“附加库目录”告诉链接器这些库文件所在的位置。</p><h3 id="如何设置-1"><a href="#如何设置-1" class="headerlink" title="如何设置"></a>如何设置</h3><p>在 Visual Studio 中，你可以通过以下步骤设置“附加库目录”：</p><ol><li>右键点击你的项目，选择“属性”（Properties）。</li><li>在项目属性窗口中，导航到“配置属性”（Configuration Properties） -&gt; “链接器”（Linker） -&gt; “常规”（General）。</li><li>在右侧的“附加库目录”一栏中，添加需要包含的库文件目录路径。你可以手动输入路径，也可以点击旁边的按钮来选择目录。</li></ol><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>假设你正在编译一个 C++ 项目，并且使用了一个外部库 <code>MyLibrary</code>，其库文件存放在 <code>C:\Libraries\MyLibrary\lib</code> 目录下。在你的代码中，你可能需要链接到这个库的 <code>.lib</code> 文件。</p><p>为了让链接器找到这些库文件，你需要将 <code>C:\Libraries\MyLibrary\lib</code> 路径添加到“附加库目录”中。</p><h3 id="关联设置：附加依赖项"><a href="#关联设置：附加依赖项" class="headerlink" title="关联设置：附加依赖项"></a>关联设置：附加依赖项</h3><p>在设置了“附加库目录”后，你还需要在“附加依赖项”（Additional Dependencies）中指定要链接的具体库文件名（如 <code>MyLibrary.lib</code>），这个选项也位于链接器的属性设置中。设置路径后，链接器会在指定的“附加库目录”中查找这些库文件。</p><h3 id="lib-和-dll-的区别"><a href="#lib-和-dll-的区别" class="headerlink" title="lib 和 dll 的区别"></a>lib 和 dll 的区别</h3><h4 id="1-lib-文件"><a href="#1-lib-文件" class="headerlink" title="1. lib 文件"></a>1. <strong><code>lib</code> 文件</strong></h4><p><code>lib</code> 文件通常有两种形式，分别用于不同的目的：</p><ul><li><strong>静态库（Static Library）</strong>:<ul><li><strong>作用</strong>: 在编译时将库代码直接嵌入到可执行文件中。</li><li><strong>链接</strong>: 编译器将静态库中的代码与应用程序的代码结合，生成一个包含所有必要代码的独立可执行文件。</li><li><strong>部署</strong>: 生成的可执行文件不依赖外部库，体积会比较大，但运行时不需要额外的库文件。</li><li><strong>扩展名</strong>: <code>.lib</code></li></ul></li><li><strong>导入库（Import Library）</strong>:<ul><li><strong>作用</strong>: 为动态链接库（DLL）提供链接信息。</li><li><strong>链接</strong>: 导入库不包含实际的代码，只包含 DLL 中函数和变量的符号信息。在编译时使用导入库，告诉链接器将来需要使用特定的 DLL 文件。</li><li><strong>部署</strong>: 可执行文件在运行时依赖 DLL 文件，导入库仅在编译和链接阶段使用。</li><li><strong>扩展名</strong>: <code>.lib</code></li></ul></li></ul><h4 id="2-dll-文件"><a href="#2-dll-文件" class="headerlink" title="2. dll 文件"></a>2. <strong><code>dll</code> 文件</strong></h4><ul><li><p>动态链接库（Dynamic Link Library）:</p><ul><li><strong>作用</strong>: 提供可在运行时加载并使用的库函数和数据。DLL 文件可以被多个程序同时使用，从而节省内存和减少重复代码。</li><li><strong>链接</strong>: 在运行时加载 DLL 文件，应用程序通过动态链接来调用其中的函数。编译时，程序通过导入库（<code>.lib</code> 文件）或使用 <code>LoadLibrary</code> 等 API 函数来引用 DLL 中的函数。</li><li><strong>部署</strong>: DLL 文件需要与可执行文件一起部署。当应用程序运行时，系统会在特定目录中查找并加载 DLL 文件。</li><li><strong>扩展名</strong>: <code>.dll</code></li></ul></li></ul><h4 id="3-主要区别"><a href="#3-主要区别" class="headerlink" title="3. 主要区别"></a>3. <strong>主要区别</strong></h4><ul><li><strong>链接方式</strong>:<ul><li><strong>静态库</strong>: 在编译时链接，生成的可执行文件不需要依赖外部库。</li><li><strong>动态库</strong>: 在运行时链接，可执行文件在运行时需要加载对应的 DLL。</li></ul></li><li><strong>文件扩展名</strong>:<ul><li><strong>静态库&#x2F;导入库</strong>: <code>.lib</code></li><li><strong>动态库</strong>: <code>.dll</code></li></ul></li><li><strong>内存占用</strong>:<ul><li><strong>静态库</strong>: 由于库代码被嵌入到可执行文件中，多个应用程序会各自占用内存。</li><li><strong>动态库</strong>: DLL 可以被多个程序同时加载，节省内存。</li></ul></li><li><strong>更新与维护</strong>:<ul><li><strong>静态库</strong>: 如果库代码需要更新，必须重新编译所有使用该库的程序。</li><li><strong>动态库</strong>: 更新 DLL 文件后，所有使用该 DLL 的程序都能立即受益于更新，无需重新编译。</li></ul></li></ul><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li><strong>静态库（.lib）</strong>: 编译时链接，库代码直接嵌入到可执行文件中。</li><li><strong>动态链接库（.dll）</strong>: 运行时链接，可执行文件依赖于外部的 DLL 文件。</li><li><strong>导入库（.lib）</strong>: 用于编译时链接到 DLL，提供符号信息，但不包含实际代码。</li></ul><h2 id="链接库文件"><a href="#链接库文件" class="headerlink" title="链接库文件"></a>链接库文件</h2><p><img src="/BlogImg/image-20240909235827283.png" alt="链接库文件"></p><p>在 Visual Studio 中，“附加依赖项”（Additional Dependencies）是一个链接器设置项，用于指定在编译和链接过程中，程序需要链接的库文件（通常是 <code>.lib</code> 文件）。</p><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>“附加依赖项”告诉链接器，除了默认的系统库外，还需要链接哪些特定的库文件。库文件包含预编译的代码或数据，程序在编译和链接时将这些库中的内容整合到最终生成的可执行文件或动态链接库中。</p><h3 id="如何设置-2"><a href="#如何设置-2" class="headerlink" title="如何设置"></a>如何设置</h3><p>你可以通过以下步骤在 Visual Studio 中设置“附加依赖项”：</p><ol><li>右键点击你的项目，选择“属性”（Properties）。</li><li>在项目属性窗口中，导航到“配置属性”（Configuration Properties） -&gt; “链接器”（Linker） -&gt; “输入”（Input）。</li><li>在右侧的“附加依赖项”一栏中，输入需要链接的库文件名，文件名之间用分号隔开。例如：<code>MyLibrary.lib;AnotherLibrary.lib</code>。</li></ol><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>假设你正在编译一个项目，该项目依赖于两个外部库 <code>MyLibrary.lib</code> 和 <code>AnotherLibrary.lib</code>。你需要将这两个库的名称添加到“附加依赖项”中，如下所示：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">MyLibrary.<span class="hljs-keyword">lib</span>;AnotherLibrary.<span class="hljs-keyword">lib</span><br></code></pre></td></tr></table></figure><h3 id="与“附加库目录”的关系"><a href="#与“附加库目录”的关系" class="headerlink" title="与“附加库目录”的关系"></a>与“附加库目录”的关系</h3><p>“附加依赖项”指定了需要链接的库文件名，而“附加库目录”指定了这些库文件所在的路径。链接器会在“附加库目录”中查找“附加依赖项”中列出的库文件。如果库文件不在默认路径中，你需要在“附加库目录”中指定正确的路径，否则链接器将无法找到并链接这些库文件。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul><li><strong>附加依赖项</strong>: 指定在链接阶段需要链接的库文件名（通常是 <code>.lib</code> 文件）。</li><li><strong>附加库目录</strong>: 指定这些库文件所在的路径。</li></ul><h2 id="DLL-的文件设置"><a href="#DLL-的文件设置" class="headerlink" title="DLL 的文件设置"></a>DLL 的文件设置</h2><blockquote><p>就放在 main.cpp 同级目录下，具体怎么加载还不知道</p></blockquote><p><img src="/BlogImg/image-20240910000249147.png" alt="dll文件缩放位置的参考"></p><h2 id="其他源文件的导入"><a href="#其他源文件的导入" class="headerlink" title="其他源文件的导入"></a>其他源文件的导入</h2><p><img src="/BlogImg/image-20240910000425931.png" alt="新建筛选器"></p><ul><li>源文件拖拽到新建筛选器下方，导入的时候会自己找到这个源文件的，不是复制</li></ul><p><img src="/BlogImg/image-20240910000502340.png" alt="源文件拖拽到新建筛选器下方"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>各种功能测试</title>
    <link href="/2024/09/10/%E5%90%84%E7%A7%8D%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/09/10/%E5%90%84%E7%A7%8D%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h4 id="LaTex-公式"><a href="#LaTex-公式" class="headerlink" title="LaTex 公式"></a>LaTex 公式</h4><p>$$<br>J_r^{-1}(e_{ij})\approx I +\frac { 1 } { 2 }<br>\begin{bmatrix}<br>\phi_e^ { \wedge } &amp; \rho_e^ { \wedge } \<br>0 &amp; \phi_e^{\wedge} \<br>\end{bmatrix}<br>$$</p><p>$$<br>E&#x3D;mc^2<br>$$</p><h4 id="提交并更新博客"><a href="#提交并更新博客" class="headerlink" title="提交并更新博客"></a>提交并更新博客</h4><ul><li>提交仓库并更新</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo c &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><ul><li>本地更新</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo c &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis的基本使用</title>
    <link href="/2024/09/10/Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/10/Redis%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="基本命令-包含centos命令和redis的命令"><a href="#基本命令-包含centos命令和redis的命令" class="headerlink" title="基本命令(包含centos命令和redis的命令)"></a>基本命令(包含centos命令和redis的命令)</h4><p>后面的是redis的命令</p><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>redis-server</td><td>前台启动redis服务</td></tr><tr><td>redis-server redis.conf目录</td><td>后台启动redis服务</td></tr><tr><td>redis-server &#x2F;etc&#x2F;redis.conf</td><td>后台启动redis服务</td></tr><tr><td>&gt;ping</td><td>返回PONG表示redis连接成功</td></tr><tr><td>ps -ef | grep redis</td><td>显示redis的所有进程</td></tr><tr><td>kill -9 ID</td><td>杀死 ID的进程</td></tr><tr><td>redis-cli -p 6379</td><td>用6379端口启动redis,默认使用6379端口可以不用写-p 6379</td></tr><tr><td>redis-cli shutdown</td><td>单实例redis关闭</td></tr><tr><td>&gt;shutdown</td><td>关闭进入的redis实例</td></tr><tr><td>redis-cli -p 6379 shutdown</td><td>多redis实例关闭，指定端口关闭</td></tr></tbody></table><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>set key value</td><td>添加键值对</td></tr><tr><td>get key</td><td>查询对应的键值</td></tr><tr><td>append key value</td><td>将给定的value 追加到原值的末尾</td></tr><tr><td>strlen key</td><td>获得值的长度</td></tr><tr><td>setnx key value</td><td>只有在key不存在时，设置key的值</td></tr><tr><td>incr key</td><td>将key中存储的数字值增加1，只能对数字值操作，如果为空，值设置为1</td></tr><tr><td>decr key</td><td>将key中存储的数字值减少1，只能对数字值操作，如果为空，值设置为-1</td></tr><tr><td>incrby&#x2F;decrby key&gt; 步长</td><td>将 key 中储存的数字值增减步长值，步长可以为负数</td></tr><tr><td>mset key1 value1 key2 value2 …</td><td>同时设置一个或多个key-value对</td></tr><tr><td>mget key2 value2 key2 value2</td><td>同时获取一个或多个value</td></tr><tr><td>msetnx key1 value1 key2 value2</td><td>同时设置一个或多个key-value对，当且仅当所有给定key都不存在</td></tr><tr><td>getrange key 起始位置 结束位置</td><td>获得值的范围，类似java中的substring，前包，后包</td></tr><tr><td>setrange key 起始位置 value</td><td>用value 覆写key所存储的字符串值，从起始位置开始(索引从0开始)</td></tr><tr><td>set key 过期时间 value</td><td>设置键值的同时，设置过期时间，单位秒</td></tr><tr><td>getset key value</td><td>依旧换新，设置新值同时输出旧值</td></tr></tbody></table><p>Redis列表(List)</p><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>lpush&#x2F;rpush  key1 value1 key2 value2  …</td><td>从左边&#x2F;右边插入一个或多个值</td></tr><tr><td>lpop&#x2F;rpop key</td><td>从左边&#x2F;右边吐出一个值。值在键在，值光键亡</td></tr><tr><td>rpop&#x2F;lpush key1 key2</td><td>从key1列表右边吐出一个值，插到key2列表左边</td></tr><tr><td>lrange key start stop</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>lrange mylist 0 -1</td><td>0左边第一个，-1右边第一个<br />改命令表示获得所有</td></tr><tr><td>lindex key index</td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>llen key</td><td>获得列表长度</td></tr><tr><td>linsert key before value newvalue</td><td>在value前面插入newvalue</td></tr><tr><td>lrem key n value</td><td>从左边删除n个value(从左到右)</td></tr><tr><td>lset key index value</td><td>将列表key下标为index的值替换成value</td></tr></tbody></table><p>Redis集合(set)</p><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>sadd key value1 value2</td><td>将一个或多个member元素加入到集合key中，已经存在的member元素将被忽略</td></tr><tr><td>smembers key</td><td>取出该集合的所有值</td></tr><tr><td>sismember key value</td><td>判断集合key是否为含有该value值，有1，没有0</td></tr><tr><td>scard key</td><td>返回该集合的元素个数</td></tr><tr><td>srem key value1 value2 …</td><td>删除集合中的某个元素</td></tr><tr><td>spop key</td><td>随机从该集合中吐出一个值</td></tr><tr><td>srandmember key n</td><td>随机从该集合中取出n个值，不会从集合中删除</td></tr><tr><td>smove source destination value</td><td>把集合中一个值从一个集合移动到另一个集合</td></tr><tr><td>sinnter key1 key2</td><td>返回两个集合的交集元素</td></tr><tr><td>sunion key1 key2</td><td>返回两个集合的并集元素</td></tr><tr><td>sdiff key1 key2</td><td>返回两个集合的差集元素(key1中的，不包含key2中的)</td></tr></tbody></table><h4 id="Redis哈希-Hash"><a href="#Redis哈希-Hash" class="headerlink" title="Redis哈希(Hash)"></a>Redis哈希(Hash)</h4><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>hset key field value</td><td>给key集合中的field键赋值value</td></tr><tr><td>hget key1 field</td><td>从key1集合field取出value</td></tr><tr><td>hmset key1 field1 value1 field2 value2…</td><td>批量设置hash的值</td></tr><tr><td>hexists &lt;key1 field</td><td>查看哈希表key中，给定域field是否存在</td></tr><tr><td>hkeys key</td><td>列出该hash集合的所有field</td></tr><tr><td>hvals key</td><td>列出该hash集合的所有value</td></tr><tr><td>hincrby key field increment</td><td>为哈希表key中的域field的值加上增量increment</td></tr><tr><td>hsetnx key field value</td><td>将哈希表key中的域field的值设置为value，当且仅当域field不存在</td></tr></tbody></table><h4 id="Redis有序集合Zset-sorted-set"><a href="#Redis有序集合Zset-sorted-set" class="headerlink" title="Redis有序集合Zset(sorted set)"></a>Redis有序集合Zset(sorted set)</h4><p>主要是根据score来排序</p><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>zadd key score1 value1 score2 value2 …</td><td>将一个或多个member元素及其score值加入到有序key当中</td></tr><tr><td>zrange key start stop [WITHSCORES]</td><td>返回有序集key中，下标在start stop 之间的元素<br />带WITHSCORES可以让分数一起和值返回到结果集</td></tr><tr><td>zrangebyscore key minmax [withscores] [limit offset count]</td><td>返回有序集key中，所有score值介于min和max之间(包括等于min或max)的成员，有序集成员按score值递增(从小到大)次序排列</td></tr><tr><td>zrevrangebyscore</td><td>同上，改为从大到小排列</td></tr><tr><td>zincrby key increment value</td><td>为元素的score加上增量</td></tr><tr><td>zrem key value</td><td>删除该集合下指定值的元素</td></tr><tr><td>zcount key min max</td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td>zrank key value</td><td>返回该值在集合中的排名，从0开始</td></tr></tbody></table><h4 id="Redis的一些相关配置"><a href="#Redis的一些相关配置" class="headerlink" title="Redis的一些相关配置"></a>Redis的一些相关配置</h4><p>配置只有保存后，并重启查看进程才能生效</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&gt; <span class="hljs-keyword">shutdown</span><br>redis-server <span class="hljs-string">/redis.conf</span>的路径<br></code></pre></td></tr></table></figure><p>注释掉bind 127.0.0.1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">bind</span> 127.0.0.1</span><br></code></pre></td></tr></table></figure><p>将本机的访问保护模式设置no</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">protected-<span class="hljs-keyword">mode</span> <span class="hljs-keyword">no</span><br></code></pre></td></tr></table></figure><p>端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">port</span> <span class="hljs-number">6379</span><br></code></pre></td></tr></table></figure><p>设置为后台进程</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">daemonize</span> <span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">requirepass</span> foobared <span class="hljs-comment">#将foobared改为自己的密码，去掉注释就行</span><br><span class="hljs-comment"># 之后使用redis-cli登录redis后使用命令：auth 你的密码</span><br><span class="hljs-comment"># 这样就可以密码登录了 或者redis-cli -a 你的密码</span><br></code></pre></td></tr></table></figure><h4 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h4><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>subscribe channel1</td><td>需要先进入redis，订阅channel1</td></tr><tr><td>publish channel1 hello</td><td>给channel1频道发信息</td></tr></tbody></table><h4 id="新数据类型"><a href="#新数据类型" class="headerlink" title="新数据类型"></a>新数据类型</h4><h5 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h5><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>setbit key offset value</td><td>设置Bitmaps中某个偏移量的值（0或1）</td></tr><tr><td>getbit key offset</td><td>获取Bitmaps中某个偏移量的值</td></tr><tr><td>bitcount key [start end]</td><td>统计字符串从start字节到end字节比特值为1的数量</td></tr><tr><td>bitop and(or&#x2F;not&#x2F;xor) destkey [key]</td><td>bitop是一个符合操作，他可以做多个Bitmaps的and(交集)、or(并集)、not(非)、xor(异或)操作并将结果保存在destkey中</td></tr></tbody></table><h5 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h5><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>pfadd key element [element …]</td><td>添加指定元素到HyperLogLog中</td></tr><tr><td>pfcount key [key…]</td><td>计算key的近似基数</td></tr><tr><td>pfmerge destkey sourcekey [sourcekey…]</td><td>将一个或多个key合并后的结果存在另一个key中，比如每月活跃用户可以使用每天的活跃用户来合并计算得到</td></tr></tbody></table><h5 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h5><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>geoadd key logitude latitude member [longitude latitude member …]</td><td>添加地理位置(经度，纬度，名称)</td></tr><tr><td>geopos key member [member…]</td><td>获得指定地区的坐标值</td></tr><tr><td>geodis key member1 member2 [m|km|ft|mi]</td><td>获取两个位置之间的直线距离<br />(m:米(默认值),km:千米,mi:英里,ft英尺)</td></tr><tr><td>georadius key longitude latitude radius m|km|ft|mi</td><td>以给定的经纬度为中心， 找出某一半径内的元素（经度 纬度 距离 单位）</td></tr></tbody></table><h4 id="Java连接Redis"><a href="#Java连接Redis" class="headerlink" title="Java连接Redis"></a>Java连接Redis</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">jedis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.137.3&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">pong</span> <span class="hljs-operator">=</span> jedis.ping();<br>System.out.println(<span class="hljs-string">&quot;连接成功：&quot;</span>+pong);<br>jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis_事务"></a>Redis_事务</h4><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>multi</td><td>从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行。</td></tr><tr><td>exec</td><td>同上</td></tr><tr><td>discard</td><td>组队的过程中可以通过 discard 来放弃组队</td></tr></tbody></table><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>后面还有持久化-RDB和AOF，用的时候查一下“尚硅谷的笔记”或者百度吧，暂时没练过，不知道记录啥，本人还是主要想去学一下C#和unity，要不是大数据作业，估计不会看这个[-_-||]</p><p>主从复制</p><p>lua脚本</p><p>集群</p><ul><li>缓存穿透</li><li>缓存击穿</li><li>缓存雪崩</li></ul><h4 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h4><p><a href="https://www.bilibili.com/video/BV1Rv41177Af" title="B站尚硅谷Redis学习视频">参考B站视频</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB的简单使用</title>
    <link href="/2024/09/10/MongoDB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/10/MongoDB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>show databases</td><td>显示当前数据库</td></tr><tr><td>show dbs</td><td>显示当前数据库</td></tr><tr><td>use 数据库名</td><td>进入指定数据库</td></tr><tr><td>db</td><td>显示当前所处数据库</td></tr><tr><td>show collections</td><td>显示数据库中所有的集合</td></tr></tbody></table><h4 id="CRUD操作（create-read-update-delete）"><a href="#CRUD操作（create-read-update-delete）" class="headerlink" title="CRUD操作（create read update delete）"></a>CRUD操作（create read update delete）</h4><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>db.&lt;collection&gt;.insert(doc)</td><td>向集合中插入一个文档</td></tr><tr><td>db.stus.insert({name:”孙悟空”,age:18,gender:”男”})</td><td>向当前的数据库中的stus集合中插入一个学生对象{name:”孙悟空”,age:18,gender:”男”}</td></tr><tr><td>db.stus.insert([{name:”孙悟空”,age:18,gender:”男”},{name:”沙和尚”,age:22,gender:”男”},{name:”猪八戒”,age:24,gender:”男”}])</td><td>一次性插入多个</td></tr><tr><td>db.stus.insert([{_id:”hello”,name:”孙悟空”,age:18,gender:”男”},])</td><td>会自定义id</td></tr><tr><td>db.stus.insertOne({name:”孙悟空”,age:18,gender:”男”},)<br />db.stus.insertMany([{name:”孙悟空”,age:18,gender:”男”},{name:”孙悟空”,age:18,gender:”男”}])</td><td>insertOne()和insertMany()分别是用来插入一个和多个数据</td></tr><tr><td>db.&lt;collection&gt;.find()<br />-find()用来查看集合中所有符合条件的文档<br />-find()可以接收一个对象作为条件参数<br />{}表示查询集合中所有的文档<br />{属性：值}查询属性是指定值的文档</td><td>查询当前集合中的所有文档</td></tr><tr><td>db.stus.find({_id:”hello”})<br />db.stus.find({age:28,name:”白骨精”})</td><td>查询id为hello的文档<br />查询年龄为28，name为白骨精的文档</td></tr><tr><td>db.stus.find()<br />db.stus.find()[0]<br />db.stus.find()[0].name<br />db.stus.find({}).count()<br />db.stus.find().length()</td><td>查询stus中所有文档<br />查询第一个文档<br />查询第一个文档的name属性<br />查询stus集合中文档的数量，find()中有{}效果是一样的<br />作用同count()</td></tr><tr><td>db.&lt;collectioin&gt;.findOne()<br />db.&lt;collection&gt;.findOne().name</td><td>用来查询集合中符合条件的第一个<br />查询集合中第一个的name属性</td></tr><tr><td>db.&lt;collection&gt;.findOne()</td><td>查询集合中符合条件的第一个文档</td></tr></tbody></table><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>db.collection.update(查询条件，新对象)</td><td>修改查询到的对象为新对象<br />update()默认情况下会使用新对象替换旧的对象，默认替换修改一个符合条件的</td></tr><tr><td>db.stus.update({“_id”:”hello”},{$set:{name:”沙和尚”}})<br />db.stus.update({“_id”:”hello”},{$set:{gender:”女”,address:”流沙河”}})</td><td>$set: 用来修改文档中的指定属性<br />修改_id为hello的对象中name为沙和尚<br />修改_id为hello的对象中的gender为女，添加address属性</td></tr><tr><td>db.stus.update({“name”:”孙悟空”},{$set:{address:”花果山2”}},{multi:true})</td><td>添加一个{multi:true}</td></tr><tr><td>db.stus.update({“_id”:”hello”},{$unset:{address:{}}})</td><td>$unset:用来删除文档中的指定属性<br />删除_id为hello的对象中address属性，删除是根据属性删除，属性后面的值不管，可以用{}或””或者随便什么值（1也可以，简单就行）代替</td></tr><tr><td>db.&lt;collection&gt;.updateMany()</td><td>同时修改多个符合条件的文档</td></tr><tr><td>db.stus.updateMany({“name”:”孙悟空”},{$set:{address:”花果山”}})</td><td>同时将name属性为孙悟空的对象中添加一个address属性</td></tr><tr><td>db.&lt;collection&gt;.updateOne()</td><td>修改一个符合条件的文档</td></tr><tr><td>db.&lt;collection&gt;.replaceOne()</td><td>替换一个文档</td></tr></tbody></table><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>db.&lt;collection&gt;.remove()</td><td>可以根据条件来删除文档，传递的条件和find()一样，默认情况下删除符合条件的所有文档</td></tr><tr><td>db.stus.remove({age:28},true)</td><td>可以根据条件来删除stus集合中的文档,只删除一个</td></tr><tr><td>db.stus.remove({})</td><td>删除stus中的所有文档（性能略差），stus集合还在</td></tr><tr><td>db.stus.drop()</td><td>删除stus集合,如果stus集合是数据库中的最后一个，那么数据库也会被删除</td></tr><tr><td>db.dropDatabase()</td><td>删除所在的数据库</td></tr><tr><td>db.&lt;collection&gt;.deleteOne()</td><td>删除集合中的一个对象</td></tr><tr><td>db.&lt;collection&gt;.deleteMany()</td><td>删除集合中的多个对象</td></tr></tbody></table><ul><li><p>文档之间的关系</p><ul><li><p>一对一(one to one)</p><ul><li><p>夫妻（一个丈夫 对应 一个妻子）</p></li><li><p>在MongoDB可以通过内嵌文档的形式来体现出一对一的关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql">use wifeAndHusband;<br>db.wifeAndHusband.insert([<br>&#123;<br>name:&quot;黄蓉&quot;,<br>husband:<br>&#123;<br>name:&quot;郭靖&quot;,<br>&#125;<br>&#125;,<br>&#123;<br>name:&quot;&quot;,<br>husband:<br>&#123;<br>name:&quot;武大郎&quot;,<br>&#125;<br>&#125;<br>]);<br><br>db.wifeAndHusband.find();<br></code></pre></td></tr></table></figure></li></ul></li><li><p>一对多(one to many)&#x2F;多对一(many to one)</p><ul><li><p>也可以通过内嵌文档来映射一对多的关系</p></li><li><p>父母 – 孩子</p></li><li><p>用户 – 订单</p></li><li><p>文章 – 评论</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.users.insert(<br>[<br>&#123;<br>username:&quot;swk&quot;,<br>&#125;,<br>&#123;<br>username:&quot;zbj&quot;,<br>&#125;<br><br>]<br>);<br>db.users.find();<br><br>db.order.insert(<br>&#123;<br>list:[&quot;苹果&quot;,&quot;香蕉&quot;,&quot;大鸭梨&quot;],<br>user_id:ObjectId(&quot;6352bdd40a470000750024d8&quot;),<br>&#125;<br><br>);<br>db.order.find();<br><br>db.order.insert(<br>&#123;<br>list:[&quot;西瓜&quot;,&quot;葡萄&quot;,&quot;桃子&quot;],<br>user_id:ObjectId(&quot;6352bdd40a470000750024d9&quot;),<br>&#125;<br><br>);<br>db.order.find();<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查找用户swk的订单<br>var user_id <span class="hljs-operator">=</span> db.users.findOne(&#123;username:&quot;swk&quot;&#125;)._id;<br>db.order.find(&#123;user_id:user_id&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>多对多(many to many)</p><ul><li><p>分类 – 商品</p></li><li><p>老师 – 学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>多对多<br>db.teachers.insert(<br>[<br>&#123;name:&quot;洪七公&quot;&#125;,<br>&#123;name:&quot;黄药师&quot;&#125;,<br>&#123;name:&quot;龟仙人&quot;&#125;,<br>]<br><br>);<br>db.teachers.find()<br><br><br>db.stus.insert(<br>[<br>&#123;<br>name:&quot;郭靖&quot;,<br>tech_isd:<br>[<br>ObjectId(&quot;6352c0260a470000750024dc&quot;),<br>ObjectId(&quot;6352c0260a470000750024dd&quot;),<br>]<br>&#125;,<br>&#123;<br>name:&quot;孙悟空&quot;,<br>tech_isd:<br>[<br>ObjectId(&quot;6352c0260a470000750024dc&quot;),<br>ObjectId(&quot;6352c0260a470000750024dd&quot;),<br>ObjectId(&quot;6352c0260a470000750024de&quot;),<br>]<br>&#125;,<br>]<br>);<br>db.stus.find()<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="排序和投影"><a href="#排序和投影" class="headerlink" title="排序和投影"></a>排序和投影</h4><table><thead><tr><th>命令&#x2F;示例</th><th>作用</th></tr></thead><tbody><tr><td>db.&lt;collection&gt;.find({}).sort([属性:1&#x2F;-1])</td><td>对集合中的数据进行排序<br />1表示升序，-1表示降序</td></tr><tr><td>db.stus.find({}).sort({age:1,name:-1})</td><td>对stus集合中所有的数据按照年龄升序，name降序进行排序</td></tr><tr><td>db.&lt;collection&gt;.find({},{属性:1&#x2F;0})</td><td>对集合中的数据字段进行筛选<br />1表示显示，0表示不显示</td></tr><tr><td>db.stus.find({},{name:1,_id:0,gender:1});</td><td>对stus集合中的数据，显示name和gender字段，不显示_id字段，默认显示_id字段</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询文档时，默认情况是按照创建的时间进行排序（升序），视频上说是按照_id，实际上我测试不是的，是根据创建时间进行排序<br>db.stus.find(&#123;&#125;);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>sort()可以用来指定文档的排序规则，sort()需要传递一个对象来指定排序规则，<span class="hljs-number">1</span>表示升序，<span class="hljs-number">-1</span>表示降序<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>limit <span class="hljs-keyword">skip</span> sort 可以以任意的顺序进行调用<br>db.stus.find(&#123;&#125;).sort(&#123;age:<span class="hljs-number">1</span>,name:<span class="hljs-number">-1</span>&#125;)<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>在查询时，可以在第二个参数的位置来设置查询结果的投影，<span class="hljs-number">1</span>表示显示，<span class="hljs-number">0</span>表示不显示<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>显示name，不显示_id,显示gender<br>db.stus.find(&#123;&#125;,&#123;name:<span class="hljs-number">1</span>,_id:<span class="hljs-number">0</span>,gender:<span class="hljs-number">1</span>&#125;);<br></code></pre></td></tr></table></figure><h4 id="mongoose的使用"><a href="#mongoose的使用" class="headerlink" title="mongoose的使用"></a>mongoose的使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.安装Mongoose</span><br><span class="hljs-comment">准备：</span><br><span class="hljs-comment">切换为淘宝镜像命令</span><br><span class="hljs-comment">npm config set registry https://registry.npm.taobao.org</span><br><span class="hljs-comment">查看当前使用的镜像地址命令</span><br><span class="hljs-comment">npm config get registry</span><br><span class="hljs-comment">如果返回 https://registry.npm.taobao.org，说明镜像配置成功。</span><br><span class="hljs-comment">切换回原镜像（安装一些package不容易报错）</span><br><span class="hljs-comment">npm config set registry https://registry.npmjs.org</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">正式安装：</span><br><span class="hljs-comment">    cnpm i mongoose --save</span><br><span class="hljs-comment">2. 在项目中引入mongoose</span><br><span class="hljs-comment">    var mongoose = require(&quot;mongoose&quot;);</span><br><span class="hljs-comment">3. 连接MongoDB数据库</span><br><span class="hljs-comment">    mongoose.connect(&#x27;mongodb://数据库Ip地址:端口号/数据库名称&#x27;,&#123;useMongoClient:true&#125;);</span><br><span class="hljs-comment">    - 如果端口号是默认端口号(27017)则可以省略不写</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4. 断开数据库连接(一般不需要调用)</span><br><span class="hljs-comment">    - MongoDB数据库，一般情况下，只需要连接一次，连接一次后，除非项目停止，服务器关闭，否则连接一般不会断开</span><br><span class="hljs-comment">    mongoose.disconnect()</span><br><span class="hljs-comment">    - 监听MongoDB数据库的连接状态</span><br><span class="hljs-comment">        - 在Mongoose对象中，有一个属性叫做connection,该对象表示的就是数据库连接</span><br><span class="hljs-comment">            通过监视该对象的状态，可以来监听数据库的连接与断开</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        数据库连接成功的事件</span><br><span class="hljs-comment">            mongoose.connection.once(&quot;open&quot;,function()&#123;&#125;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        数据库断开的事件</span><br><span class="hljs-comment">            mongoose.connection.once(&quot;close&quot;,function()&#123;&#125;);</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br><br><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;);<br><br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;close&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接已经断开&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">//断开数据库连接</span><br>mongoose.<span class="hljs-title function_">disconnect</span>();<br></code></pre></td></tr></table></figure><h5 id="Schema和Model"><a href="#Schema和Model" class="headerlink" title="Schema和Model"></a>Schema和Model</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//import mongoose from &#x27;mongoose&#x27;;</span><br><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">title</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//通过Schema来创建Model</span><br><span class="hljs-comment">//Model代表的是数据库中的集合，通过Model才能鬼数据库进行操作</span><br><span class="hljs-comment">//mongoose.model(modelName, schema)</span><br><span class="hljs-comment">//modelName:就是要映射的集合名,实际映射的是students集合，mongoose会自动将集合名称变为负数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;student&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">//向数据库中插入一个文档</span><br><span class="hljs-comment">//stuModel.create(doc,function(err)&#123;&#125;);</span><br><span class="hljs-comment">//doc:要插入的文档  function(err)&#123;&#125;:回调函数</span><br><span class="hljs-comment">// StuModel.create(&#123;</span><br><span class="hljs-comment">//     name:&quot;孙悟空&quot;,</span><br><span class="hljs-comment">//     age:18,</span><br><span class="hljs-comment">//     gender:&quot;male&quot;,</span><br><span class="hljs-comment">//     address:&quot;花果山&quot;,</span><br><span class="hljs-comment">// &#125;,function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;插入成功~~~&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//会自动将属性gender设置为female</span><br><span class="hljs-title class_">StuModel</span>.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;白骨精&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">16</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;白骨洞&quot;</span>,<br>&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;插入成功~~~&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="Model的方法"><a href="#Model的方法" class="headerlink" title="Model的方法"></a>Model的方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-comment">//原本这里是title:String,自己怎么插入name都无法插入，改成name就能够插入了</span><br>    <span class="hljs-attr">name</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//通过Schema来创建Model</span><br><span class="hljs-comment">//Model代表的是数据库中的集合，通过Model才能鬼数据库进行操作</span><br><span class="hljs-comment">//mongoose.model(modelName, schema)</span><br><span class="hljs-comment">//modelName:就是要映射的集合名,实际映射的是students集合，mongoose会自动将集合名称变为负数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;students&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * - 有了Model，我们就可以来对数据库进行增删改查的操作</span><br><span class="hljs-comment"> *  添加</span><br><span class="hljs-comment"> *  Model.create(docs,[options],[callback])</span><br><span class="hljs-comment"> *  用来创建一个文档并添加到数据库中</span><br><span class="hljs-comment"> *  参数：</span><br><span class="hljs-comment"> *  docs:可以是一个文档对象，也可以是一个文档对象的数组</span><br><span class="hljs-comment"> *  callback:当操作完成以后调用的回调函数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  查找</span><br><span class="hljs-comment"> *  Model.find(filter,[projection],[options],[callback])</span><br><span class="hljs-comment"> *      查询所有符合条件的文档,总会返回一个数组(即便是空数组)</span><br><span class="hljs-comment"> *      filter:查询的条件</span><br><span class="hljs-comment"> *      project:投影 需要获取到的字段</span><br><span class="hljs-comment"> *          - 两种方式</span><br><span class="hljs-comment"> *              &#123;name:1,_id:0&#125;</span><br><span class="hljs-comment"> *              &quot;name -_id&quot;</span><br><span class="hljs-comment"> *      options:查询选项(skip limit)</span><br><span class="hljs-comment"> *          跳过前三个，只显示后面的一个</span><br><span class="hljs-comment"> *          &#123;skip:3,limit:1&#125;</span><br><span class="hljs-comment"> *      callback:回调函数,查询结果会通过回调函数返回，回调函数必须传，如果不传回调函数,根本不会查询</span><br><span class="hljs-comment"> *  Model.findById(id,[projection],[options],[callback])</span><br><span class="hljs-comment"> *      根据文档的id属性查询文档 总会返回一个具体的文档对象</span><br><span class="hljs-comment"> *  Model.findOne([conditioins],[projection],[options],[callback])</span><br><span class="hljs-comment"> *      查询符合条件的第一个文档 总会返回一个具体的文档对象</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  修改</span><br><span class="hljs-comment"> *  Model.update(filter,update,[options],[callback])</span><br><span class="hljs-comment"> *  Model.updateMany(filter,update,[options],[callback])</span><br><span class="hljs-comment"> *  Model.updateOne(filter,update,[options],[callback])</span><br><span class="hljs-comment"> *      - 用来修改一个或多个文档</span><br><span class="hljs-comment"> *      - 参数</span><br><span class="hljs-comment"> *          filter 查询条件</span><br><span class="hljs-comment"> *          update 修改后的对象</span><br><span class="hljs-comment"> *          options 配置参数</span><br><span class="hljs-comment"> *          callback 回调函数</span><br><span class="hljs-comment"> *  Model.replaceOne(filter,doc,[options],[callback])</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  删除</span><br><span class="hljs-comment"> *  Model.remove([options],[fn])</span><br><span class="hljs-comment"> *  Model.deleteOne(conditions,[options],[callback])</span><br><span class="hljs-comment"> *  Model.deleteMany(conditions,[options],[callback])</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  统计文档的数量</span><br><span class="hljs-comment"> *  Model.count(filter,[callback])</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// StuModel.create([</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         name:&quot;猪八戒&quot;,</span><br><span class="hljs-comment">//         age:28,</span><br><span class="hljs-comment">//         gender:&quot;male&quot;,</span><br><span class="hljs-comment">//         address:&quot;高老庄&quot;,</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         name:&quot;唐僧&quot;,</span><br><span class="hljs-comment">//         age:16,</span><br><span class="hljs-comment">//         gender:&quot;male&quot;,</span><br><span class="hljs-comment">//         address:&quot;女儿国&quot;,</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">// ],function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;插入成功~~~&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// StuModel.create([</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         name:&quot;沙僧&quot;,</span><br><span class="hljs-comment">//         age:36,</span><br><span class="hljs-comment">//         gender:&quot;male&quot;,</span><br><span class="hljs-comment">//         address:&quot;流沙河&quot;,</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// ],function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(arguments);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// 运行后的输出结果</span><br><span class="hljs-comment">// 0:应该就是err参数</span><br><span class="hljs-comment">// 1:就是我们插入的文档</span><br><span class="hljs-comment">// [Arguments] &#123;</span><br><span class="hljs-comment">//     &#x27;0&#x27;: null,</span><br><span class="hljs-comment">//         &#x27;1&#x27;: [</span><br><span class="hljs-comment">//         &#123;</span><br><span class="hljs-comment">//             age: 36,</span><br><span class="hljs-comment">//             gender: &#x27;male&#x27;,</span><br><span class="hljs-comment">//             address: &#x27;流沙河&#x27;,</span><br><span class="hljs-comment">//             _id: new ObjectId(&quot;6353a555d75ad742ba9e5e3d&quot;),</span><br><span class="hljs-comment">//             __v: 0</span><br><span class="hljs-comment">//         &#125;</span><br><span class="hljs-comment">//     ]</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 只要name属性，不要_id属性</span><br><span class="hljs-comment">// StuModel.find(&#123;name:&quot;唐僧&quot;&#125;,&#123;name:1,_id:0&#125;,function (err,docs) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(docs);</span><br><span class="hljs-comment">//         console.log(docs[0].name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//-_id指不要_id</span><br><span class="hljs-comment">// skip:1 指跳过第一个，显示后面的</span><br><span class="hljs-comment">// limit:1 指只显示一个</span><br><span class="hljs-comment">// StuModel.find(&#123;&#125;,&#x27;name age -_id&#x27;,&#123;skip:1,limit:1&#125;,function (err,docs) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(docs);</span><br><span class="hljs-comment">//         console.log(docs[0].name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//返回的是具体的对象</span><br><span class="hljs-comment">// StuModel.findOne(&#123;&#125;,function (err,doc) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(doc);</span><br><span class="hljs-comment">//         console.log(doc.name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">//返回的是具体的对象</span><br><span class="hljs-comment">// StuModel.findById(&quot;6353ad5d5bd5fcedc0b7658b&quot;,function (err,doc) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         // console.log(doc);</span><br><span class="hljs-comment">//         // 通过find()查询的结果，返回的对象就是Document,文档对象</span><br><span class="hljs-comment">//         // Document对象是Model的实例，就是集合（StuModel）的实例</span><br><span class="hljs-comment">//         // 返回true，表示doc是StuModel的实例</span><br><span class="hljs-comment">//         console.log(doc instanceof StuModel)</span><br><span class="hljs-comment">//         // console.log(doc.name);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// 修改唐僧的年龄为20</span><br><span class="hljs-comment">// StuModel.updateOne(&#123;name:&quot;唐僧&quot;&#125;,&#123;$set:&#123;age:20&#125;&#125;,function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;修改成功&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.</span><br><span class="hljs-comment">// StuModel.remove(&#123;name:&quot;唐僧&quot;&#125;,function (err) &#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;删除成功&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br>统计集合中的文档数量<br><span class="hljs-title class_">StuModel</span>.<span class="hljs-title function_">count</span>(&#123;&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err,count</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="Document的方法"><a href="#Document的方法" class="headerlink" title="Document的方法"></a>Document的方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-attr">name</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//通过Schema来创建Model</span><br><span class="hljs-comment">//Model代表的是数据库中的集合，通过Model才能鬼数据库进行操作</span><br><span class="hljs-comment">//mongoose.model(modelName, schema)</span><br><span class="hljs-comment">//modelName:就是要映射的集合名,实际映射的是students集合，mongoose会自动将集合名称变为负数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;student&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Document 和集合中的文档一一对应，Document是Model的实例</span><br><span class="hljs-comment"> * 通过Model查询到的结果都是Document</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * document的方法</span><br><span class="hljs-comment"> *  Model#save(&#123;options&#125;,[fn])</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> stu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StuModel</span>(&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;奔波霸&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">48</span>,<br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;碧波谭&quot;</span>,<br>&#125;);<br><br><span class="hljs-comment">//会将文档中的信息进行保存</span><br><span class="hljs-comment">// stu.save(function(err)&#123;</span><br><span class="hljs-comment">//     if(!err)&#123;</span><br><span class="hljs-comment">//         console.log(&quot;保存成功&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-title class_">StuModel</span>.<span class="hljs-title function_">findOne</span>(&#123;&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err,doc</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * update(update,[options],[callback])</span><br><span class="hljs-comment">         *  - 修改对象</span><br><span class="hljs-comment">         * remove([callback])</span><br><span class="hljs-comment">         *  - 删除对象</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// console.log(doc);</span><br>        <span class="hljs-comment">//这个doc就是指findOne()找到的那个对象，直接修改该对象</span><br>        <span class="hljs-comment">// doc.update(&#123;$set:&#123;age:38&#125;&#125;,function (err) &#123;</span><br>        <span class="hljs-comment">//     if(!err)&#123;</span><br>        <span class="hljs-comment">//         console.log(&quot;修改成功&quot;);</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// &#125;);</span><br>        <span class="hljs-comment">//也可以直接修改findOne()获得的对象</span><br>        <span class="hljs-comment">// doc.age = 18;</span><br>        <span class="hljs-comment">// doc.save();</span><br>        <span class="hljs-comment">//直接删除findOne()获得的对象</span><br>        <span class="hljs-comment">// doc.remove(function (err) &#123;</span><br>        <span class="hljs-comment">//     if(!err)&#123;</span><br>        <span class="hljs-comment">//         console.log(&quot;二师兄再见&quot;);</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// &#125;);</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * get(name)</span><br><span class="hljs-comment">         *  - 直接获取文档中指定属性值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  set(name,value)</span><br><span class="hljs-comment">         *  - 设置文档的指定的属性值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  id</span><br><span class="hljs-comment">         *      获取文档的_id属性值</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *  toObject()</span><br><span class="hljs-comment">         *      - 将Document对象转换为一个普通的js对象</span><br><span class="hljs-comment">         *          转换为普通的js对象以后，注意所有的Document对象的方法或属性都不能使用</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">// 下面两个的效果相同</span><br>        <span class="hljs-comment">// console.log(doc.get(&quot;name&quot;));</span><br>        <span class="hljs-comment">// console.log(doc.name);</span><br><br>        <span class="hljs-comment">// doc.set(&quot;name&quot;,&quot;猪小小&quot;);</span><br>        <span class="hljs-comment">// doc.name = &quot;猪小小&quot;;</span><br>        <span class="hljs-comment">// console.log(doc);</span><br><br>        <span class="hljs-comment">// console.log(doc._id);</span><br>        <span class="hljs-comment">// new ObjectId(&quot;6353ee24148021db079f47db&quot;)</span><br><br>        <span class="hljs-comment">// console.log(doc.id);</span><br>        <span class="hljs-comment">// 6353ee24148021db079f47db</span><br><br>        <span class="hljs-comment">//转换为一个普通的对象</span><br>        <span class="hljs-comment">// var o = doc.toObject();</span><br>        <span class="hljs-comment">// console.log(o);</span><br><br>        <span class="hljs-comment">//转换为普通的Object后能够删除其中的address,否则不能使用delete删除数据</span><br>        doc = doc.<span class="hljs-title function_">toObject</span>();<br>        <span class="hljs-keyword">delete</span> doc.<span class="hljs-property">address</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doc);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doc.<span class="hljs-property">id</span>);<br>        <span class="hljs-comment">//undefined</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doc.<span class="hljs-property">_id</span>);<br>        <span class="hljs-comment">// new ObjectId(&quot;6353ee24148021db079f47db&quot;)</span><br>    &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="mongoose的模块化"><a href="#mongoose的模块化" class="headerlink" title="mongoose的模块化"></a>mongoose的模块化</h5><p>可以在models包中创建模型，后面可以直接使用该模型，如index.js中的使用，tools包中主要是放连接mongoDB的代码，可以不用每次都重复写</p><p><a href="https://imgse.com/i/xguig1"><img src="https://s1.ax1x.com/2022/10/22/xguig1.png" alt="xguig1.png"></a></p><p>conn_mongo.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个模块，用来连接MongoDB数据库</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>student.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用来定义Student的模型</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongoose&quot;</span>);<br><span class="hljs-comment">//连接数据库</span><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/test&#x27;</span>);<br>mongoose.<span class="hljs-property">connection</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据库连接成功&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Schema</span> &#125; = mongoose;<br><br><span class="hljs-comment">//创建Schema(模式)对象</span><br><span class="hljs-keyword">const</span> stuSchema = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schema</span>(&#123;<br>    <span class="hljs-comment">//原本这里是title:String,自己怎么插入name都无法插入，改成name就能够插入了</span><br>    <span class="hljs-attr">name</span>:  <span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-attr">gender</span>:&#123;<br>        <span class="hljs-comment">//gender是个对象，类型是String,默认值是female</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>        <span class="hljs-attr">default</span>:<span class="hljs-string">&quot;female&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-title class_">String</span>,<br>&#125;);<br><br><span class="hljs-comment">//定义模型</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">StuModel</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;students&#x27;</span>, stuSchema);<br><br><span class="hljs-comment">// exports.model = StuModel;</span><br><span class="hljs-comment">//使用该语句在index.js中就不需要.model了</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">StuModel</span>;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入会直接执行该模块</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./tools/conn_mongo&quot;</span>);<br><span class="hljs-comment">// const Student = require(&quot;./models/student&quot;).model;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Student</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./models/student&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Student</span>);<br><br><span class="hljs-title class_">Student</span>.<span class="hljs-title function_">find</span>(&#123;&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params">err,docs</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(docs);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><p><a href="https://blog.csdn.net/weixin_45182409/article/details/117981169" title="csdn博客npm相关使用">npm相关配置</a></p><h4 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h4><p><a href="https://www.bilibili.com/video/BV18s411E78K" title="尚硅谷MongoDB学习视频">参考B站视频</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LaTex表示数学符号</title>
    <link href="/2024/09/10/LaTex%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"/>
    <url>/2024/09/10/LaTex%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h4 id="长期更新-慢慢添加"><a href="#长期更新-慢慢添加" class="headerlink" title="长期更新,慢慢添加"></a>长期更新,慢慢添加</h4><ul><li>因为自己有时候会学一些数学相关的东西,会用公式表示,用 LaTex 的好看啊</li><li>目录在右边,可以导航用</li></ul><h4 id="上标-下标"><a href="#上标-下标" class="headerlink" title="上标,下标"></a>上标,下标</h4><p>$$<br>a^b<br>$$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">a^b<br></code></pre></td></tr></table></figure><p>$$<br>a_b<br>$$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">a_b<br></code></pre></td></tr></table></figure><p>$$<br>a^{ab}<br>$$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">a^&#123;ab&#125;<br></code></pre></td></tr></table></figure><p>$$<br>a_{ab}<br>$$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">a_&#123;ab&#125;<br></code></pre></td></tr></table></figure><p>$$<br>\overset{B}{\rightarrow}<br>$$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">\overset&#123;B&#125;&#123;\rightarrow&#125;<br></code></pre></td></tr></table></figure><p>$$<br>\underset{B}{\rightarrow}<br>$$</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">\underset&#123;B&#125;&#123;\rightarrow&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/10/hello-world/"/>
    <url>/2024/09/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hello World</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git的使用记录</title>
    <link href="/2024/09/10/git%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/10/git%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="Git-干嘛的"><a href="#Git-干嘛的" class="headerlink" title="Git 干嘛的"></a>Git 干嘛的</h4><ul><li>分布式版本控制系统</li></ul><h4 id="命令汇总"><a href="#命令汇总" class="headerlink" title="命令汇总"></a>命令汇总</h4><h5 id="查看-git-版本"><a href="#查看-git-版本" class="headerlink" title="查看 git 版本"></a>查看 git 版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git -v<br></code></pre></td></tr></table></figure><h5 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置用户名</span><br>git config --global user.name &quot;wing2791&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">上述的用户名可以省略双引号,如果用户名有空格，则无法省略</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">省略(<span class="hljs-built_in">local</span>):本地配置,只对本地仓库有效</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--global: 全局配置,所有仓库生效</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--system: 系统配置,对所有用户生效</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置邮箱</span><br>git config --global user.email wing2791@163.com<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存用户名和密码，这样就不用每次都输入了</span><br>git config --global credential.helper store<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置信息</span><br>git config --global --list<br></code></pre></td></tr></table></figure><h5 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir learn-git<br>cd learn-git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化空仓库,会以learn-git为仓库</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">会在learn-git文件夹下创建一个my-repo文件夹,以my-repo文件夹为仓库</span><br>git init my-repo<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加仓库地址，克隆仓库到本地</span><br>git clone https//....git<br></code></pre></td></tr></table></figure><h5 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>git status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态的简略模式,??表示为跟踪，M表示修改</span><br>git status -s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将文件添加到暂存区</span><br>git add filename.suffix<br><span class="hljs-meta prompt_"># </span><span class="language-bash">git add 支持使用通配符,只添加.txt结尾的文件</span><br>git add *.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以提交文件夹，提交当前文件夹</span><br>git add .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交文件,-m表示提交时对文件信息的描述,只提交暂存区中的文件</span><br>git commit -m &quot;the first commit&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看提交记录</span><br>git log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看简洁信息</span><br>git log --oneline<br></code></pre></td></tr></table></figure><h5 id="git-reset-回退版本"><a href="#git-reset-回退版本" class="headerlink" title="git reset 回退版本"></a>git reset 回退版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git reset --soft # 回退到某个版本,并且保留工作区和暂存区中的所有修改内容<br>git reset --hard # 回退到某个版本,并且丢弃工作区和暂存区的所有修改内容<br>git reset --mixed # 回退到某个版本,并且只保留工作区的修改内容，而丢弃暂存区中的内容（reset默认参数）<br>git reset --soft ID # 需要添加回退版本ID,这个需要用git log查看<br>git ls-files # 查看暂存区内容<br>git reset HEAD^ # 使用--mixed模式，HEAD^指当前 HEAD 的前一个提交<br>git reflog # 查看操作历史记录，可以查看操作的ID号，用于回退<br></code></pre></td></tr></table></figure><h5 id="git-diff-查看差异"><a href="#git-diff-查看差异" class="headerlink" title="git diff 查看差异"></a>git diff 查看差异</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git diff # 可以查看修改的内容具体是什么，默认比较工作区和暂存区的区别<br>git diff HEAD # 查看工作区和版本库的区别,HEAD指的是最新提交节点<br>git diff --cached # 查看暂存库和版本库的区别<br>git diff ID1 ID2 # 比较两个特定版本库的差异，HEAD~表示上一个版本，HEAD~2表示之前的两个版本<br>git diff ID1 ID2 file1.txt # 只查看file1.txt的修改内容<br></code></pre></td></tr></table></figure><h5 id="版本库中删除文件"><a href="#版本库中删除文件" class="headerlink" title="版本库中删除文件"></a>版本库中删除文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm file1.txt # 删除工作区中文件file1.txt<br>git add . # 更新暂存区，删除暂存区中的file1.txt<br>git rm file2.txt # 会在工作区和暂存区中都删除file2.txt<br>git commit -m &quot;information&quot;<br></code></pre></td></tr></table></figure><h5 id="gitignore-忽略文件"><a href="#gitignore-忽略文件" class="headerlink" title=".gitignore 忽略文件"></a>.gitignore 忽略文件</h5><ul><li>.gitignore 中的内容就是指所有忽略的文件名，也可以是文件夹名，文件夹名是相对于 <code>.gitignore</code> ,例如<code>temp/</code></li><li>如果文件夹是空文件夹，不会被版本管理</li><li><a href="https://git-scm.com/docs/gitignore">git 官网匹配规则</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">*.log # 就是忽略所有的.log文件<br>!a.log # 表示在*.log忽略的规则下，不忽略a.log文件<br>/TODO # 表示只忽略当前目录下的TODO文件，不忽略subdir/TODO<br>build/ # 忽略任何目录下名为build的文件夹<br>doc/*.txt # 只忽略doc文件夹下的所有.txt文件,但是不忽略doc/subdir/*.txt的文件，即不忽略子文件夹下的文件<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果某个文件已经被添加到仓库中,如忽略*.<span class="hljs-built_in">log</span>，但是仓库中有other.log，更新other.log文件的时候，也会一起更新other.log文件</span><br>doc/**/*.pdf # 葫芦doc/目录及其所有子目录下的.pdf文件<br>git rm --cached other.log # 从暂存区中移除文件 other.log<br></code></pre></td></tr></table></figure><h5 id="github-的使用和远程仓库操作"><a href="#github-的使用和远程仓库操作" class="headerlink" title="github 的使用和远程仓库操作"></a>github 的使用和远程仓库操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git@github.com:wing2791/wing2791.github.io.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git开头的仓库使用的是SSH协议,在push的时候不需要验证用户名和密码,但是需要在github上添加ssh公钥的配置，添加密钥的时候如果修改了名称，需要额外配置，这里不赘述</span><br>git push &lt;remote&gt; &lt;branch&gt; # 本地仓库的指定分支推送到远程仓库，这里配置好一般直接git push，配置在后面<br>git pull &lt;remote&gt; # 远程仓库拉取到本地<br></code></pre></td></tr></table></figure><h5 id="关联本地仓库和远程仓库"><a href="#关联本地仓库和远程仓库" class="headerlink" title="关联本地仓库和远程仓库"></a>关联本地仓库和远程仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add &lt;shortname&gt; &lt;url&gt; # 关联一个远程仓库<br><span class="hljs-meta prompt_"># </span><span class="language-bash">git remote add roigin git@....git</span><br>git remote -v # 查看当前仓库对应的远程仓库的别名和地址<br>git branch -M main # 指定分支名为main<br>git push -u origin main:main # u是upstream的缩写,把本地仓库和别名为origin仓库的远程仓库关联起来，把本地仓库的main分支推送给远程仓库的main分支，如果本地分支和远程仓库分支名称一样,可以main:main改为main，第一个main本地分支,第二个main远程分支<br><br>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; # 拉去远程仓库修改内容，起其中仓库名和分支名都可以省略，默认为拉取仓库别名为orgin的main分支<br>git fetch # 只会获取远程仓库的修改，但是并不合并到本地仓库中，需要手动合并<br></code></pre></td></tr></table></figure><h5 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch 分支名 # 创建一个新的分支<br>git checkout 分支1 # 切换到分支1，checkout也可以用来恢复文件，会产生歧义，故换一个切换分支的命令切换到分支1<br>git switch 分支1 # 切换到分支1<br>git merge 分支1 # 假如现在处在main分支，运行该命令可以将分支1中的内容合并到main中<br>git log --graph --oneline --decorate --all # 查看分支图<br>git branch -d branch-name # 当branch-name被合并后，可以用-d进行删除<br>git branch -D branch-name # 强制删除分支branch-name<br></code></pre></td></tr></table></figure><h5 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -a -m &quot;commit content&quot; # -a参数会直接添加到暂存区，然后提交到仓库，完成两个步骤，这个只对已经添加过的文件生效，新文件无法使用，-a -m 可以写成-am<br>git status # 可以查看冲突文件的列表<br>git diff # 可以查看冲突的具体内容<br><span class="hljs-meta prompt_"># </span><span class="language-bash">然后直接查看原文件，可以手动修改冲突内容，重新添加，提交即可</span><br>git add .<br>git commit -m &quot;commit cotent&quot;<br>git merge --abort # 中止合并<br></code></pre></td></tr></table></figure><h5 id="回退和-rebase"><a href="#回退和-rebase" class="headerlink" title="回退和 rebase"></a>回退和 rebase</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git rebase branch-name<br>git checkout -b dev ID # 恢复到dev分支的ID的时刻，看来checkout很多功能啊<br>alias graph=&quot;git log --graph --oneline --decorate --all&quot; # 可以把查看图形化的提交记录命令改为graph<br></code></pre></td></tr></table></figure><p>merge</p><ul><li>优点<ul><li>不会破坏原分支的提交历史，方便回溯和查看</li></ul></li><li>缺点<ul><li>会产生额外的提交节点，分支图比较复杂</li></ul></li></ul><p>rebase</p><ul><li>优点<ul><li>不会新增额外的提交记录，形成线性历史，比较直观和干净</li></ul></li><li>缺点<ul><li>会改变提交历史，改变了当前分支 branch out 的节点，避免在共享分支使用</li></ul></li></ul><h5 id="分支管理和工作流模型"><a href="#分支管理和工作流模型" class="headerlink" title="分支管理和工作流模型"></a>分支管理和工作流模型</h5><p><img src="https://s21.ax1x.com/2024/09/10/pAm8EYd.png" alt="202408070024207"></p><p><img src="https://s21.ax1x.com/2024/09/10/pAm8n6P.png" alt="202408070026443"></p><p><img src="https://s21.ax1x.com/2024/09/10/pAm8mlt.png" alt="202408070026771"></p><h4 id="其他待补充"><a href="#其他待补充" class="headerlink" title="其他待补充"></a>其他待补充</h4><ul><li>git 的权限管理</li><li>在不同编辑器上的使用</li><li>可视化 git 管理工具</li><li>实际使用的例子</li></ul><h4 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h4><p><a href="https://www.bilibili.com/video/BV1HM411377j">【GeekHour】一小时 Git 教程</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github部署个人博客</title>
    <link href="/2024/09/10/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/09/10/github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/clearloe/article/details/139879493">Hexo 博客搭建并部署到 GitHub Pages(2024 最新详细版)</a></p><h4 id="安装-VsCode"><a href="#安装-VsCode" class="headerlink" title="安装 VsCode"></a>安装 VsCode</h4><p><a href="https://blog.csdn.net/msdcp/article/details/127033151">VSCode 安装配置使用教程（最新版超详细保姆级含插件）一文就够了</a></p><p><a href="https://code.visualstudio.com/Download">VsCode 下载链接</a></p><ul><li>如果无法下载，可以选择在电脑的应用商城里面下载，我记得是要挂梯子才能官网下载</li><li>安装就是正常安装，建议别 C 盘</li></ul><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><p><a href="https://blog.csdn.net/qq_45730223/article/details/131693287">Git 安装详解（写吐了，看完不后悔）</a></p><ul><li>很常用的软件，程序员必装，按照教程装就好了，不过有时候验证有问题，也要梯子</li></ul><h4 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h4><p><a href="https://blog.csdn.net/weixin_44893902/article/details/121788104">node.js 安装及环境配置超详细教程【Windows 系统安装包方式】</a></p><blockquote><p>搬运上述链接评论<br>Node.js Express 安装报错总结<br>express 4.x 版本之前 全局安装 express 命令是 npm install express -g<br>express 4.x 版本之后 全局安装 express 命令是 npm install -g express-generator</p></blockquote><h4 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h4><p><a href="https://www.cnblogs.com/zhujingxiu/articles/7462025.html" title="发布于 2017-09-01 10:34">Win10 任意目录下默认快速以管理员身份运行 CMD</a><br><a href="https://blog.csdn.net/clearloe/article/details/139879493">安装 hexo 参考博客链接</a><br><a href="https://blog.csdn.net/qq_42786011/article/details/123895927">运行 npm install 不动时</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">//  配置nmp代理来提高速度，如设置淘宝镜像<br>npm config set registry  https://registry.npmmirror.com/<br><br>// 查看配置是否成功<br>npm config get registry<br><br>// 成功后重新npm install安装<br>// npm install 。。。<br></code></pre></td></tr></table></figure><h4 id="更新文章"><a href="#更新文章" class="headerlink" title="更新文章"></a>更新文章</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo c &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo c &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><h4 id="遇上的错误，解决方法供参考"><a href="#遇上的错误，解决方法供参考" class="headerlink" title="遇上的错误，解决方法供参考"></a>遇上的错误，解决方法供参考</h4><h5 id="fatal-detected-dubious-ownership-in-repository"><a href="#fatal-detected-dubious-ownership-in-repository" class="headerlink" title="fatal: detected dubious ownership in repository"></a>fatal: detected dubious ownership in repository</h5><p><a href="https://stackoverflow.com/questions/73408170/git-fatal-detected-dubious-ownership">参考博客</a></p><p><img src="https://s21.ax1x.com/2024/09/10/pAm8py6.png" alt="202407281829173"></p><ul><li>解决方法</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global --add safe.directory *<br></code></pre></td></tr></table></figure><h5 id="安装-Pandoc，运行-Pandoc-有误，说找不到命令"><a href="#安装-Pandoc，运行-Pandoc-有误，说找不到命令" class="headerlink" title="安装 Pandoc，运行 Pandoc 有误，说找不到命令"></a>安装 Pandoc，运行 Pandoc 有误，说找不到命令</h5><blockquote><p>主要问题是我的 360 会自动删除 pandoc.exe,我在 360 软件管家中的隔离区恢复了就行</p></blockquote><p><a href="https://github.com/jgm/pandoc/blob/master/INSTALL.md">pandoc 安装地址</a></p><p>正常安装是有下面的四个文件，如果少了 exe 需要按照上面的进行恢复</p><p><img src="https://s21.ax1x.com/2024/09/10/pAm8iwD.png" alt="202407281832443"></p><h5 id="Hexo-使用-markdown-插入图片无法显示解决方法（废弃，直接找网络图床，https-的）"><a href="#Hexo-使用-markdown-插入图片无法显示解决方法（废弃，直接找网络图床，https-的）" class="headerlink" title="Hexo 使用 markdown 插入图片无法显示解决方法（废弃，直接找网络图床，https 的）"></a>Hexo 使用 markdown 插入图片无法显示解决方法（废弃，直接找网络图床，https 的）</h5><blockquote><p>免费图床：<a href="https://imgse.com/">https://imgse.com/</a><br>每天八张</p></blockquote><p><a href="https://www.jianshu.com/p/04814a816caf">参考博客</a></p><ul><li><p>安装插件</p><ul><li><p>先进入自己 blog 的目录<br><img src="https://s21.ax1x.com/2024/09/10/pAm8PeO.png" alt="image-20240728203701626"></p></li><li><p>用命令安装（如果第二次使用还是失效，重新运行下列命令，会重新安装一遍，再弄就是可以了，具体的解决方案没找到）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># npm install https://github.com/7ym0n/hexo-asset-image --save # 已经失效，换一个</span><br>npm install hexo-asset-img --save<br></code></pre></td></tr></table></figure></li><li><p>运行下列命令，提交本地查看结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s # 本地查看<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d # 上传到github<br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改 hexo 根目录下的_config.yml 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">post_asset_folder: <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span><br>url: http://yourname.github.io<br></code></pre></td></tr></table></figure></li><li><p>插入图片</p><ul><li>我用的是 typora，直接设置如下，然后复制图片，直接到文件中即可</li></ul><p><img src="https://s21.ax1x.com/2024/09/10/pAm8FTe.png" alt="image-20240728204034558"></p><p><img src="https://s21.ax1x.com/2024/09/10/pAm8AFH.png" alt="image-20240728204107912"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">![xx](xx/xx.png)<br></code></pre></td></tr></table></figure></li></ul><h4 id="其他可能用得上的网址"><a href="#其他可能用得上的网址" class="headerlink" title="其他可能用得上的网址"></a>其他可能用得上的网址</h4><p><a href="https://hexo.io/zh-cn/docs">Hexo 官方中文文档</a><br><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂谈-游戏(一)</title>
    <link href="/2024/09/10/%E6%9D%82%E8%B0%88-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/09/10/%E6%9D%82%E8%B0%88-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="游戏杂谈"><a href="#游戏杂谈" class="headerlink" title="游戏杂谈"></a>游戏杂谈</h3><h4 id="双人成行"><a href="#双人成行" class="headerlink" title="双人成行"></a>双人成行</h4><p><img src="https://s2.loli.net/2022/07/20/dxheYjZ9R7vU5iw.png" alt="双人成行.png"></p><p>游玩：本人也是正经的玩过全流程的，和 Z 同学一点点摸索着玩，但是由于 origin 平台实在是连接困难，加上网络不好，在线游玩属实是体验不好，总是会掉线，玩着玩着就开始卡顿，掉线，每次重新连接大概五分钟，挺折磨人的耐心。</p><p>另外关于游玩方面，Z 同学和我都不是高玩，玩起来其实也挺痛苦的，某些关卡对我们来说还挺需要操作和反应速度的，比如有的关卡自己需要在几秒内就跑到指定的位置，错了就要重来，但好在只要成功一次就能够过关，后面会自动保存。有些 Boss 打起来也挺费时间的，例如有个黄蜂的 Boss，那个需要科迪先喷糖浆，小梅后面才能够攻击，而 Boss 还有一些小兵蜜蜂保护，这是一个需要跨过去的坎，游玩过程自己的鼠标都快费了，虽然是自动瞄准，但也是有判定范围的，最后鼠标都移动困难了。</p><p>关卡在设计方面非常有新意，是我玩过的游戏中不可多得的必玩游戏，可惜需要有一个朋友，配置要求极高。前期的关卡设计挺多，也有剧情，不过都 Q 掉了，后面几大章节明显不如前几关，而且神庙逃亡太多了，颜色也过于鲜艳，属于虎头蛇尾了，但是质量还是高于大多数同类游戏。音乐方面不评价，没咋注意，游戏难度听说是动态的，在某一关待久了听说会降低难度，方便手残玩家，但耗时间，适合平时时间长放松可以试一下，没时间不适合玩，比如累死晚上十点回家，这个游戏建议别试着玩了。</p><h4 id="影之诗"><a href="#影之诗" class="headerlink" title="影之诗"></a>影之诗</h4><p><img src="https://s2.loli.net/2022/07/20/jKwHk72dgOFYVmi.jpg" alt="影之诗.jpg"></p><p>游玩：算是老玩家了，在起焉之光版本入坑，大概一两周后碧蓝骑士版本（在国服，当时国际服应该早就碧蓝骑士版本了），中间退坑过一年的时间，大概就是疫情那段时间，去玩昆特牌了，没碰影之诗，拿过三个版本 GM，优点是无聊，缺点也是无聊。国服的福利极好，随便肝一下每日任务就行，基本上每个版本的所有卡都能拿到，还会有剩余的资源。但是为什么退坑，就是太无聊了，稍微娱乐一点点的卡组就不能玩，而且渐渐的很多东西都脱离实际了，很多职业特色都没有了，像暗夜伯爵原本非常好的一张鬼妈（8 费用，4 攻击，4 生命，虹卡，荣耀再临版本），原来效果是从卡堆里抽到手上时消失，直接无条件复仇，俗称点灯，后来削过后就没意思了，主战者生命上限直接少了一半，对手稍微打一下就输了，而且国服版本特别难玩，稍微有一点不顺就会输，任务有时候打三四个小时都做不好，而且后面设计的卡越来越膨胀，膨胀就算了，还膨胀的特别快，官方削弱卡牌一削弱就不能用，会不会削弱啊，卡牌不会设计就算了，削弱也是一刀切。我最关心的其实是双人模式，可惜一直没出，出不出都不会去玩了，毕竟是二次元游戏，我反而重视游戏性，玩 steam 挺好。</p><h4 id="洛克王国"><a href="#洛克王国" class="headerlink" title="洛克王国"></a>洛克王国</h4><p><img src="https://s2.loli.net/2022/07/20/lRL6wrIn75jkmyX.png" alt="洛克王国.png"></p><p>游玩：也算是个老玩家，基本前期游玩的样子都知道，疫情的时候也是玩到了高级训练师，系别排位也是圣魔导师。前期洛克王国感觉更像是经营类的游戏，战斗没有任何技巧可言，就是想办法控制对面（催眠粉，以及后面的瓦斯叮当的生命火焰，或者雪影娃娃的冰晶结界和冰龙王的嗜血寒冰冰冻），找一个 C 位进行强化进行推队，简单得很，看运气。但是现在的战斗很有趣，基本都是会玩的能够碾压不会玩的，已经不是以前的过家家了，从前期的收集、逛街重点倾向于战斗了，我玩过，很有趣，但是也无聊，每场战斗少则二十分钟，多则上小时，每天十把，累死人，而且网络极度不稳定，极度极度不稳定，退坑原因一方面就是这个，战斗我觉得比王者啥的好多了，操作运营一点不输王者那些游戏，另一方面是 flash 游戏，已经淘汰的技术，网页大多数不支持且有广告。另外前期洛克王国剧情极好，后期就是现在的剧情完全就是白开水，只会玩梗，一点感情没有，看其他大佬分析，游戏封面也敷衍起来了，以前是剧情为主，每周任务也很好，至少挺人性化，现在随便放几个花盆宠，而且每周任务特别恶心人，费时费力，不用辅助手刷我是时间多了没事干啊，游戏已经到了末期了，另外论坛也是很让人头疼的地方。最后提一嘴，氪金吗？也挺氪金的，不过比不上王者一套皮肤的钱，不氪金可以玩，也是大佬，要肝一肝的。最近洛克王国手游也被大众关注，我不看好，不为什么，就是不看好，洛克王国页游都不行，手游也大概率不行，都是刷刷刷的，剧情和所寄托的文化没有，算不上好游戏。原神也火出去了啊？我不玩原神，但那个是手游和 PC 端互通啊，手机方便，但其性能现在远远弱于电脑。</p><h4 id="觅长生"><a href="#觅长生" class="headerlink" title="觅长生"></a>觅长生</h4><p><img src="https://s2.loli.net/2022/07/20/fHcmsZepbixJzMv.png" alt="觅长生.png"></p><p>游玩：依然是 steam 游戏，我很早就在 B 站上看见了，当时还没 ea 版本呢，可惜当时不看好，卡牌？？金木水火土的牌能做出来什么战斗呢，就没管，最近改成灵气球了，无所谓，玩多了都可以。后来鬼谷八荒火了，当时也不知道怎么回事，对修仙游戏极度渴望，找到了觅长生，当时鬼谷八荒还没出事，就是 bug 多，更新慢，饼很多。当时看了飞羽仙狂的游玩，会了打劫流，渐渐熟悉了，制作组诚意很足，每周都更新，还有了 B 站的 wiki，体系完善，就等制作组继续更新了，不过好慢啊，都好多年了，还在 ea 阶段，游戏最近的创意工坊也出来了，玩家实力大大增加，难度降低很多，不过觅长生我更喜欢看看剧情了，飞不飞升要等正式版了（虽然我也化神了），喜欢修仙游戏的可以尝试，至少没有坑，也没有饼，缺点就像 steam 里面说的，可以玩的修仙小说，看剧情和装大佬才是王道啦。另外有一款了不起的修仙模拟器（玩法是修仙门派模拟器）也很好，但学习成本高。有额外资金且对修仙感兴趣可以尝试这两款游戏（觅长生和了不起的休闲模拟器，鬼谷八荒有大坑，别去）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
